// Generated by dart2js, the Dart to JavaScript compiler.
// The code supports the following hooks:
// dartPrint(message)   - if this function is defined it is called
//                        instead of the Dart [print] method.
// dartMainRunner(main) - if this function is defined, the Dart [main]
//                        method will not be invoked directly.
//                        Instead, a closure that will invoke [main] is
//                        passed to [dartMainRunner].
function Isolate() {}
init();

var $ = Isolate.$isolateProperties;
var $$ = {};

// Classes
$$.ListIterable = {"": "Iterable;",
  get$iterator: function(_) {
    return $.ListIterator$(this);
  },
  forEach$1: function(_, action) {
    var $length, i;
    $length = this.get$length(this);
    if (typeof $length !== "number")
      return this.forEach$1$bailout1(1, action, $length);
    for (i = 0; i < $length; ++i) {
      action.call$1(this.elementAt$1(this, i));
      if ($length !== this.get$length(this))
        throw $.$$throw($.ConcurrentModificationError$(this));
    }
  },
  forEach$1$bailout1: function(state0, action, $length) {
    var t1, i;
    for (t1 = $.getInterceptor($length), i = 0; $.JSNumber_methods.$lt(i, $length); ++i) {
      action.call$1(this.elementAt$1(this, i));
      if (t1.$eq($length, this.get$length(this)) !== true)
        throw $.$$throw($.ConcurrentModificationError$(this));
    }
  },
  get$isEmpty: function(_) {
    return $.$eq(this.get$length(this), 0);
  },
  contains$1: function(_, element) {
    var $length, i;
    $length = this.get$length(this);
    if (typeof $length !== "number")
      return this.contains$1$bailout1(1, element, $length);
    for (i = 0; i < $length; ++i) {
      if ($.$eq(this.elementAt$1(this, i), element) === true)
        return true;
      if ($length !== this.get$length(this))
        throw $.$$throw($.ConcurrentModificationError$(this));
    }
    return false;
  },
  contains$1$bailout1: function(state0, element, $length) {
    var t1, i;
    for (t1 = $.getInterceptor($length), i = 0; $.JSNumber_methods.$lt(i, $length); ++i) {
      if ($.$eq(this.elementAt$1(this, i), element) === true)
        return true;
      if (t1.$eq($length, this.get$length(this)) !== true)
        throw $.$$throw($.ConcurrentModificationError$(this));
    }
    return false;
  },
  get$contains: function(receiver) {
    return new $.BoundClosure$i1(this, "contains$1", receiver);
  },
  toList$1$growable: function(_, growable) {
    var result, i, t1;
    if (growable) {
      result = $.List_List($, $.getRuntimeTypeArgument(this, this["$asListIterable"], 0));
      $.setRuntimeTypeInfo(result, [$.getRuntimeTypeArgument(this, this["$asListIterable"], 0)]);
      $.JSArray_methods.set$length(result, this.get$length(this));
    } else {
      result = $.List_List(this.get$length(this), $.getRuntimeTypeArgument(this, this["$asListIterable"], 0));
      $.setRuntimeTypeInfo(result, [$.getRuntimeTypeArgument(this, this["$asListIterable"], 0)]);
    }
    for (i = 0; $.JSNumber_methods.$lt(i, this.get$length(this)); ++i) {
      t1 = this.elementAt$1(this, i);
      if (i >= result.length)
        throw $.ioore(i);
      result[i] = t1;
    }
    return result;
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  $asIterable: function() {
    return null;
  }
};

$$.ListIterator = {"": "Object0;_iterable,_length,_index,_current",
  get$current: function() {
    return this._current;
  },
  moveNext$0: function() {
    var t1, t2, t3;
    t1 = this._length;
    t2 = this._iterable;
    if ($.$eq(t1, $.get$length$asx(t2)) !== true)
      throw $.$$throw($.ConcurrentModificationError$(t2));
    t3 = this._index;
    if (t3 === t1) {
      this._current = null;
      return false;
    }
    this._current = $.elementAt$1$ax(t2, t3);
    this._index = this._index + 1;
    return true;
  }
};

$$.MappedIterable = {"": "Iterable;_iterable,_f",
  _f$1: function(arg0) {
    return this._f.call$1(arg0);
  },
  get$iterator: function(_) {
    var t1 = this._iterable;
    return $.MappedIterator$(t1.get$iterator(t1), this._f);
  },
  get$length: function(_) {
    var t1 = this._iterable;
    return t1.get$length(t1);
  },
  get$isEmpty: function(_) {
    var t1 = this._iterable;
    return t1.get$isEmpty(t1);
  },
  elementAt$1: function(_, index) {
    var t1 = this._iterable;
    return this._f$1(t1.elementAt$1(t1, index));
  },
  $asIterable: function() {
    return function (S, T) { return [T]; };
  }
};

$$.MappedIterator = {"": "Iterator;_current,_iterator,_f",
  _f$1: function(arg0) {
    return this._f.call$1(arg0);
  },
  moveNext$0: function() {
    var t1 = this._iterator;
    if (t1.moveNext$0()) {
      this._current = this._f$1(t1.get$current());
      return true;
    }
    this._current = null;
    return false;
  },
  get$current: function() {
    return this._current;
  }
};

$$.MappedListIterable = {"": "ListIterable;_source,_f",
  _f$1: function(arg0) {
    return this._f.call$1(arg0);
  },
  get$length: function(_) {
    return this._source.length;
  },
  elementAt$1: function(_, index) {
    return this._f$1($.JSArray_methods.elementAt$1(this._source, index));
  },
  $asListIterable: function (S, T) { return [T]; }
};

$$.WhereIterable = {"": "Iterable;_iterable,_f",
  get$iterator: function(_) {
    return $.WhereIterator$($.get$iterator$ax(this._iterable), this._f);
  },
  $asIterable: function() {
    return null;
  }
};

$$.WhereIterator = {"": "Iterator;_iterator,_f",
  _f$1: function(arg0) {
    return this._f.call$1(arg0);
  },
  moveNext$0: function() {
    for (var t1 = this._iterator; t1.moveNext$0();)
      if (this._f$1(t1.get$current()) === true)
        return true;
    return false;
  },
  get$current: function() {
    return this._iterator.get$current();
  }
};

$$.ToString__emitMap_anon = {"": "Closure;box_0,result_1,visiting_2",
  call$2: function(k, v) {
    var t1, t2;
    t1 = this.box_0;
    if (!t1.first_0)
      this.result_1.write$1(", ");
    t1.first_0 = false;
    t1 = this.result_1;
    t2 = this.visiting_2;
    $.ToString__emitObject(k, t1, t2);
    t1.write$1(": ");
    $.ToString__emitObject(v, t1, t2);
  }
};

$$.HashMap_values_anon = {"": "Closure;this_0",
  call$1: function(each) {
    return $.$index$asx(this.this_0, each);
  }
};

$$.HashMap_addAll_anon = {"": "Closure;this_0",
  call$2: function(key, value) {
    $.$indexSet$ax(this.this_0, key, value);
  }
};

$$.HashMapKeyIterable = {"": "Iterable;_map",
  get$length: function(_) {
    return this._map._liblib1$_length;
  },
  get$isEmpty: function(_) {
    return this._map._liblib1$_length === 0;
  },
  get$iterator: function(_) {
    var t1 = this._map;
    return $.HashMapKeyIterator$(t1, t1._computeKeys$0());
  },
  contains$1: function(_, element) {
    return this._map.containsKey$1(element);
  },
  get$contains: function(receiver) {
    return new $.BoundClosure$i1(this, "contains$1", receiver);
  },
  forEach$1: function(_, f) {
    var t1, keys, $length, i;
    t1 = this._map;
    keys = t1._computeKeys$0();
    for ($length = keys.length, i = 0; i < $length; ++i) {
      f.call$1(keys[i]);
      if (keys !== t1._keys)
        throw $.$$throw($.ConcurrentModificationError$(t1));
    }
  },
  $asIterable: function() {
    return null;
  }
};

$$.HashMapKeyIterator = {"": "Object0;_map,_keys,_offset,_liblib1$_current",
  get$current: function() {
    return this._liblib1$_current;
  },
  moveNext$0: function() {
    var keys, offset, t1;
    keys = this._keys;
    offset = this._offset;
    t1 = this._map;
    if (keys !== t1._keys)
      throw $.$$throw($.ConcurrentModificationError$(t1));
    else if (offset >= keys.length) {
      this._liblib1$_current = null;
      return false;
    } else {
      this._liblib1$_current = keys[offset];
      this._offset = offset + 1;
      return true;
    }
  }
};

$$.NoSuchMethodError_toString_anon = {"": "Closure;box_0",
  call$2: function(key, value) {
    var t1 = this.box_0;
    if ($.$gt$n(t1.i_1, 0) === true)
      t1.sb_0.write$1(", ");
    t1.sb_0.write$1(key);
    t1.sb_0.write$1(": ");
    t1.sb_0.write$1($.Error_safeToString(value));
    t1.i_1 = $.$add$ns(t1.i_1, 1);
  }
};

$$.Interceptor = {"": "Object0;",
  $eq: function(receiver, other) {
    return receiver === other;
  },
  get$hashCode: function(receiver) {
    return $.Primitives_objectHashCode(receiver);
  },
  toString$0: function(receiver) {
    return "Instance of '" + $.S($.Primitives_objectTypeName(receiver)) + "'";
  }
};

$$.JSFunction = {"": "Interceptor;",
  toString$0: function(receiver) {
    return "Closure";
  }
};

$$.JSBool = {"": "Interceptor;",
  toString$0: function(receiver) {
    return String(receiver);
  },
  get$hashCode: function(receiver) {
    return receiver ? 519018 : 218159;
  },
  $isbool: true
};

$$.JSNull = {"": "Interceptor;",
  $eq: function(receiver, other) {
    return null == other;
  },
  toString$0: function(receiver) {
    return "null";
  },
  get$hashCode: function(receiver) {
    return 0;
  }
};

$$.CloseToken = {"": "Object0;", $isCloseToken: true};

$$.JsIsolateSink = {"": "StreamSink;_isClosed,_port<",
  add$1: function(_, message) {
    $.send$1$x(this._port, message);
  },
  $eq: function(_, other) {
    if (other == null)
      return false;
    return typeof other === "object" && other !== null && !!other.$isIsolateSink && $.$eq(this._port, other.get$_port()) === true;
  },
  get$hashCode: function(_) {
    return $.$add$ns($.get$hashCode$(this._port), 499);
  },
  $isJsIsolateSink: true,
  $asIsolateSink: null,
  $isIsolateSink: true
};

$$._Manager = {"": "Object0;nextIsolateId@,currentManagerId,nextManagerId,currentContext<,rootContext,topEventLoop<,fromCommandLine,isWorker<,supportsWorkers,isolates,mainManager,managers",
  get$useWorkers: function() {
    return this.supportsWorkers;
  },
  get$needSerialization: function() {
    return this.get$useWorkers();
  },
  _nativeDetectEnvironment$0: function() {
    var t1, t2;
    t1 = $.get$globalWindow() == null;
    this.isWorker = t1 && $.get$globalPostMessageDefined() === true;
    if (this.isWorker !== true)
      t2 = $.get$globalWorker() != null && $.get$IsolateNatives_thisScript() != null;
    else
      t2 = true;
    this.supportsWorkers = t2;
    this.fromCommandLine = t1 && this.isWorker !== true;
  },
  _nativeInitWorkerMessageHandler$0: function() {
    var $function = function (e) { $.IsolateNatives__processWorkerMessage.call$2(this.mainManager, e); };
    $.get$globalThis().onmessage = $function;
    $.get$globalThis().dartPrint = function (object) {};
  },
  maybeCloseWorker$0: function() {
    if (this.isWorker === true) {
      var t1 = this.isolates;
      t1 = t1.get$isEmpty(t1) && this.topEventLoop.activeTimerCount === 0;
    } else
      t1 = false;
    if (t1) {
      t1 = this.mainManager;
      t1.postMessage$1(t1, $._serializeMessage($.makeLiteralMap(["command", "close"])));
    }
  },
  _Manager$0: function() {
    this._nativeDetectEnvironment$0();
    this.topEventLoop = $._EventLoop$();
    this.isolates = $.Map_Map($.$int, $._IsolateContext);
    this.managers = $.Map_Map($.$int, $._ManagerStub);
    if (this.isWorker === true) {
      this.mainManager = $._MainManagerStub$();
      this._nativeInitWorkerMessageHandler$0();
    }
  }
};

$$._IsolateContext = {"": "Object0;id>,ports,isolateStatics",
  eval$1: function(code) {
    var old, result;
    old = $globalState.currentContext;
    $globalState.currentContext = this;
    $ = this.isolateStatics;
    result = null;
    try {
      result = code.call$0();
    } finally {
      $globalState.currentContext = old;
      if (old != null)
        old._setGlobals$0();
    }
    return result;
  },
  _setGlobals$0: function() {
    $ = this.isolateStatics;
  },
  lookup$1: function(portId) {
    var t1 = this.ports;
    return t1.$index(t1, portId);
  },
  register$2: function(portId, port) {
    var t1;
    if (this.ports.containsKey$1(portId) === true)
      throw $.$$throw($._ExceptionImplementation$("Registry: ports must be registered only once."));
    t1 = this.ports;
    t1.$indexSet(t1, portId, port);
    t1 = $globalState.isolates;
    t1.$indexSet(t1, this.id, this);
  },
  unregister$1: function(portId) {
    var t1 = this.ports;
    t1.remove$1(t1, portId);
    t1 = this.ports;
    if (t1.get$isEmpty(t1)) {
      t1 = $globalState.isolates;
      t1.remove$1(t1, this.id);
    }
  },
  _IsolateContext$0: function() {
    var t1, t2;
    t1 = $._globalState();
    t2 = t1.get$nextIsolateId();
    t1.set$nextIsolateId(t2 + 1);
    this.id = t2;
    this.ports = $.Map_Map($.$int, $.ReceivePort);
    this.isolateStatics = new Isolate;
  }
};

$$._EventLoop = {"": "Object0;events,activeTimerCount",
  enqueue$3: function(isolate, fn, msg) {
    var t1 = this.events;
    t1.addLast$1(t1, $._IsolateEvent$(isolate, fn, msg));
  },
  dequeue$0: function() {
    var t1 = this.events;
    if (t1.get$isEmpty(t1))
      return;
    return t1.removeFirst$0();
  },
  checkOpenReceivePortsFromCommandLine$0: function() {
    if ($globalState.rootContext != null)
      if ($globalState.isolates.containsKey$1($globalState.rootContext.id) === true)
        if ($globalState.fromCommandLine === true) {
          var t1 = $globalState.rootContext.ports;
          t1 = t1.get$isEmpty(t1);
        } else
          t1 = false;
      else
        t1 = false;
    else
      t1 = false;
    if (t1)
      throw $.$$throw($._ExceptionImplementation$("Program exited with open ReceivePorts."));
  },
  runIteration$0: function() {
    var $event = this.dequeue$0();
    if ($event == null) {
      this.checkOpenReceivePortsFromCommandLine$0();
      $globalState.maybeCloseWorker$0();
      return false;
    }
    $event.process$0();
    return true;
  },
  _runHelper$0: function() {
    if ($.get$globalWindow() != null)
      new $._EventLoop__runHelper_next(this).call$0();
    else
      for (; this.runIteration$0();)
        ;
  },
  run$0: function() {
    var e, trace, exception, t1;
    if ($globalState.isWorker !== true)
      this._runHelper$0();
    else
      try {
        this._runHelper$0();
      } catch (exception) {
        t1 = $.unwrapException(exception);
        e = t1;
        trace = $.getTraceFromException(exception);
        t1 = $globalState.mainManager;
        t1.postMessage$1(t1, $._serializeMessage($.makeLiteralMap(["command", "error", "msg", $.S(e) + "\n" + $.S(trace)])));
      }

  }
};

$$._EventLoop__runHelper_next = {"": "Closure;this_0",
  call$0: function() {
    if (!this.this_0.runIteration$0())
      return;
    $.Timer_run(this);
  }
};

$$._IsolateEvent = {"": "Object0;isolate,fn,message",
  process$0: function() {
    this.isolate.eval$1(this.fn);
  }
};

$$._MainManagerStub = {"": "Object0;",
  get$id: function(_) {
    return 0;
  },
  postMessage$1: function(_, msg) {
    $.get$globalThis().postMessage(msg);
  },
  terminate$0: function(_) {
  }
};

$$.IsolateNatives__processWorkerMessage_anon = {"": "Closure;entryPoint_0,replyTo_1",
  call$0: function() {
    $.IsolateNatives__startIsolate(this.entryPoint_0, this.replyTo_1);
  }
};

$$._BaseSendPort = {"": "Object0;_isolateId<",
  _checkReplyTo$1: function(replyTo) {
    if (replyTo != null && !(typeof replyTo === "object" && replyTo !== null && !!replyTo.$is_NativeJsSendPort) && !(typeof replyTo === "object" && replyTo !== null && !!replyTo.$is_WorkerSendPort) && true)
      throw $.$$throw($._ExceptionImplementation$("SendPort.send: Illegal replyTo port type"));
  },
  call$1: function(message) {
    var completer, port;
    completer = $._CompleterImpl$();
    port = $.ReceivePortImpl$();
    this.send$2(this, message, port.toSendPort$0());
    port.receive$1(new $._BaseSendPort_call_anon(completer, port));
    return completer.future;
  },
  $isSendPort: true
};

$$._BaseSendPort_call_anon = {"": "Closure;completer_0,port_1",
  call$2: function(value, ignoreReplyTo) {
    var t1 = this.port_1;
    t1.close$0(t1);
    t1 = this.completer_0;
    if (typeof value === "object" && value !== null && !!value.$isException)
      t1.completeError$1(value);
    else
      t1.complete$1(t1, value);
  }
};

$$._NativeJsSendPort = {"": "_BaseSendPort;_receivePort<,_isolateId",
  send$2: function(_, message, replyTo) {
    $._waitForPendingPorts([message, replyTo], new $._NativeJsSendPort_send_anon(this, message, replyTo));
  },
  send$1: function($receiver, message) {
    return this.send$2($receiver, message, null);
  },
  $eq: function(_, other) {
    if (other == null)
      return false;
    return typeof other === "object" && other !== null && !!other.$is_NativeJsSendPort && $.$eq(this._receivePort, other._receivePort) === true;
  },
  get$hashCode: function(_) {
    return this._receivePort.get$_id();
  },
  $is_NativeJsSendPort: true,
  $isSendPort: true
};

$$._NativeJsSendPort_send_anon = {"": "Closure;this_1,message_2,replyTo_3",
  call$0: function() {
    var t1, t2, t3, t4, isolate, shouldSerialize, msg;
    t1 = {};
    t2 = this.this_1;
    t3 = this.replyTo_3;
    t2._checkReplyTo$1(t3);
    t4 = $globalState.isolates;
    isolate = t4.$index(t4, t2.get$_isolateId());
    if (isolate == null)
      return;
    if (t2.get$_receivePort().get$_callback() == null)
      return;
    shouldSerialize = $globalState.currentContext != null && $.$eq($.get$id$x($globalState.currentContext), t2.get$_isolateId()) !== true;
    msg = this.message_2;
    t1.msg_0 = msg;
    t1.reply_1 = t3;
    if (shouldSerialize) {
      t1.msg_0 = $._serializeMessage(t1.msg_0);
      t1.reply_1 = $._serializeMessage(t1.reply_1);
    }
    $globalState.topEventLoop.enqueue$3(isolate, new $._NativeJsSendPort_send__anon(t1, t2, shouldSerialize), "receive " + $.S(msg));
  }
};

$$._NativeJsSendPort_send__anon = {"": "Closure;box_0,this_4,shouldSerialize_5",
  call$0: function() {
    var t1, t2;
    t1 = this.this_4;
    if (t1.get$_receivePort().get$_callback() != null) {
      if (this.shouldSerialize_5) {
        t2 = this.box_0;
        t2.msg_0 = $._deserializeMessage(t2.msg_0);
        t2.reply_1 = $._deserializeMessage(t2.reply_1);
      }
      t1 = t1.get$_receivePort();
      t2 = this.box_0;
      t1._callback$2(t2.msg_0, t2.reply_1);
    }
  }
};

$$._WorkerSendPort = {"": "_BaseSendPort;_workerId<,_receivePortId,_isolateId",
  send$2: function(_, message, replyTo) {
    $._waitForPendingPorts([message, replyTo], new $._WorkerSendPort_send_anon(this, message, replyTo));
  },
  send$1: function($receiver, message) {
    return this.send$2($receiver, message, null);
  },
  $eq: function(_, other) {
    var t1;
    if (other == null)
      return false;
    if (typeof other === "object" && other !== null && !!other.$is_WorkerSendPort)
      t1 = $.$eq(this._workerId, other._workerId) === true && $.$eq(this._isolateId, other._isolateId) === true && $.$eq(this._receivePortId, other._receivePortId) === true;
    else
      t1 = false;
    return t1;
  },
  get$hashCode: function(_) {
    var t1, t2, t3;
    t1 = $.$shl$n(this._workerId, 16);
    t2 = $.$shl$n(this._isolateId, 8);
    t3 = this._receivePortId;
    if (typeof t3 !== "number")
      throw $.iae(t3);
    return (t1 ^ t2 ^ t3) >>> 0;
  },
  $is_WorkerSendPort: true,
  $isSendPort: true
};

$$._WorkerSendPort_send_anon = {"": "Closure;this_0,message_1,replyTo_2",
  call$0: function() {
    var t1, t2, workerMessage, manager;
    t1 = this.this_0;
    t2 = this.replyTo_2;
    t1._checkReplyTo$1(t2);
    workerMessage = $._serializeMessage($.makeLiteralMap(["command", "message", "port", t1, "msg", this.message_1, "replyTo", t2]));
    if ($globalState.isWorker === true) {
      t1 = $globalState.mainManager;
      t1.postMessage$1(t1, workerMessage);
    } else {
      t2 = $globalState.managers;
      manager = t2.$index(t2, t1.get$_workerId());
      if (manager != null)
        $.postMessage$1$x(manager, workerMessage);
    }
  }
};

$$.ReceivePortImpl = {"": "Object0;_id<,_callback<",
  _callback$2: function(arg0, arg1) {
    return this._callback.call$2(arg0, arg1);
  },
  receive$1: function(onMessage) {
    this._callback = onMessage;
  },
  close$0: function(_) {
    this._callback = null;
    $globalState.currentContext.unregister$1(this._id);
  },
  toSendPort$0: function() {
    return $._NativeJsSendPort$(this, $.get$id$x($globalState.currentContext));
  },
  ReceivePortImpl$0: function() {
    $._globalState().get$currentContext().register$2(this._id, this);
  }
};

$$._waitForPendingPorts_anon = {"": "Closure;callback_0",
  call$1: function(_) {
    return this.callback_0.call$0();
  }
};

$$._PendingSendPortFinder = {"": "_MessageTraverser;ports,_visited",
  visitPrimitive$1: function(x) {
  },
  visitList$1: function(list) {
    var t1 = this._visited;
    if (t1.$index(t1, list) != null)
      return;
    t1 = this._visited;
    t1.$indexSet(t1, list, true);
    $.forEach$1$ax(list, new $._PendingSendPortFinder_visitList_anon(this));
  },
  visitMap$1: function(map) {
    var t1 = this._visited;
    if (t1.$index(t1, map) != null)
      return;
    t1 = this._visited;
    t1.$indexSet(t1, map, true);
    t1 = map.get$values(map);
    t1.forEach$1(t1, new $._PendingSendPortFinder_visitMap_anon(this));
  },
  visitSendPort$1: function(port) {
    if (false)
      this.ports.push(port.get$_futurePort());
  },
  visitIsolateSink$1: function(sink) {
    this.visitSendPort$1(sink._port);
  },
  visitCloseToken$1: function(token) {
  },
  _PendingSendPortFinder$0: function() {
    this._visited = $._JsVisitedMap$();
  }
};

$$._PendingSendPortFinder_visitList_anon = {"": "Closure;this_0",
  call$1: function(e) {
    return this.this_0._dispatch$1(e);
  }
};

$$._PendingSendPortFinder_visitMap_anon = {"": "Closure;this_0",
  call$1: function(e) {
    return this.this_0._dispatch$1(e);
  }
};

$$._JsSerializer = {"": "_Serializer;_nextFreeRefId,_visited",
  visitSendPort$1: function(x) {
    if (typeof x === "object" && x !== null && !!x.$is_NativeJsSendPort)
      return this.visitNativeJsSendPort$1(x);
    if (typeof x === "object" && x !== null && !!x.$is_WorkerSendPort)
      return ["sendport", x._workerId, x._isolateId, x._receivePortId];
    throw $.$$throw("Illegal underlying port " + $.S(x));
  },
  visitNativeJsSendPort$1: function(port) {
    return ["sendport", $globalState.currentManagerId, port._isolateId, port._receivePort.get$_id()];
  },
  visitIsolateSink$1: function(sink) {
    var isClosed = sink._isClosed;
    return ["isolateSink", this.visitSendPort$1(sink._port), isClosed];
  },
  visitCloseToken$1: function(token) {
    return ["closeToken"];
  },
  _JsSerializer$0: function() {
    this._visited = $._JsVisitedMap$();
  }
};

$$._JsCopier = {"": "_Copier;_visited",
  visitSendPort$1: function(x) {
    if (typeof x === "object" && x !== null && !!x.$is_NativeJsSendPort)
      return this.visitNativeJsSendPort$1(x);
    if (typeof x === "object" && x !== null && !!x.$is_WorkerSendPort)
      return this.visitWorkerSendPort$1(x);
    throw $.$$throw("Illegal underlying port " + $.S(this.get$p()));
  },
  visitNativeJsSendPort$1: function(port) {
    return $._NativeJsSendPort$(port._receivePort, port._isolateId);
  },
  visitWorkerSendPort$1: function(port) {
    return $._WorkerSendPort$(port._workerId, port._isolateId, port._receivePortId);
  },
  visitIsolateSink$1: function(sink) {
    var isClosed, result;
    isClosed = sink._isClosed;
    result = $.JsIsolateSink$fromPort(this.visitSendPort$1(sink._port));
    result._isClosed = isClosed;
    return result;
  },
  visitCloseToken$1: function(token) {
    return token;
  },
  _JsCopier$0: function() {
    this._visited = $._JsVisitedMap$();
  }
};

$$._JsDeserializer = {"": "_Deserializer;_deserialized",
  deserializeSendPort$1: function(list) {
    var t1, managerId, isolateId, receivePortId, isolate, receivePort;
    t1 = $.getInterceptor$asx(list);
    managerId = t1.$index(list, 1);
    isolateId = t1.$index(list, 2);
    receivePortId = t1.$index(list, 3);
    if ($.$eq(managerId, $globalState.currentManagerId) === true) {
      t1 = $globalState.isolates;
      isolate = t1.$index(t1, isolateId);
      if (isolate == null)
        return;
      receivePort = isolate.lookup$1(receivePortId);
      if (receivePort == null)
        return;
      return $._NativeJsSendPort$(receivePort, isolateId);
    } else
      return $._WorkerSendPort$(managerId, isolateId, receivePortId);
  },
  deserializeIsolateSink$1: function(list) {
    var t1, port, isClosed, result;
    t1 = $.getInterceptor$asx(list);
    port = this.deserializeSendPort$1(t1.$index(list, 1));
    isClosed = t1.$index(list, 2);
    result = $.JsIsolateSink$fromPort(port);
    result._isClosed = isClosed;
    return result;
  },
  deserializeCloseToken$1: function(list) {
    return $.C_CloseToken;
  }
};

$$._JsVisitedMap = {"": "Object0;tagged",
  $index: function(_, object) {
    return object['__MessageTraverser__attached_info__'];
  },
  $indexSet: function(_, object, info) {
    $.add$1$ax(this.tagged, object);
    object['__MessageTraverser__attached_info__'] = info;
  },
  reset$0: function(_) {
    this.tagged = $.List_List($, null);
  },
  cleanup$0: function() {
    var $length, i;
    for ($length = $.get$length$asx(this.tagged), i = 0; i < $length; ++i)
      $.$index$asx(this.tagged, i)['__MessageTraverser__attached_info__'] = null;
    this.tagged = null;
  }
};

$$._MessageTraverserVisitedMap = {"": "Object0;",
  $index: function(_, object) {
    return;
  },
  $indexSet: function(_, object, info) {
  },
  reset$0: function(_) {
  },
  cleanup$0: function() {
  }
};

$$._MessageTraverser = {"": "Object0;",
  traverse$1: function(x) {
    var result, t1;
    t1 = x;
    if (t1 == null || typeof t1 === "string" || typeof t1 === "number" || typeof t1 === "boolean")
      return this.visitPrimitive$1(x);
    t1 = this._visited;
    t1.reset$0(t1);
    result = null;
    try {
      result = this._dispatch$1(x);
    } finally {
      this._visited.cleanup$0();
    }
    return result;
  },
  _dispatch$1: function(x) {
    if (x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean")
      return this.visitPrimitive$1(x);
    if (typeof x === "object" && x !== null && (x.constructor === Array || x.$isList()))
      return this.visitList$1(x);
    if (typeof x === "object" && x !== null && !!x.$isMap)
      return this.visitMap$1(x);
    if (typeof x === "object" && x !== null && !!x.$isSendPort)
      return this.visitSendPort$1(x);
    if (typeof x === "object" && x !== null && !!x.$isJsIsolateSink)
      return this.visitIsolateSink$1(x);
    if (typeof x === "object" && x !== null && !!x.$isCloseToken)
      return this.visitCloseToken$1(x);
    return this.visitObject$1(x);
  },
  visitObject$1: function(x) {
    throw $.$$throw("Message serialization: Illegal value " + $.S(x) + " passed");
  }
};

$$._Copier = {"": "_MessageTraverser;",
  visitPrimitive$1: function(x) {
    return x;
  },
  visitList$1: function(list) {
    var t1, copy, len, i, t2;
    if (typeof list !== "string" && (typeof list !== "object" || list === null || list.constructor !== Array && !list.$isJavaScriptIndexingBehavior()))
      return this.visitList$1$bailout1(1, list);
    t1 = this._visited;
    copy = t1.$index(t1, list);
    if (copy != null)
      return copy;
    len = list.length;
    copy = $.List_List(len, null);
    t1 = this._visited;
    t1.$indexSet(t1, list, copy);
    for (t1 = copy.length, i = 0; i < len; ++i) {
      if (i >= list.length)
        throw $.ioore(i);
      t2 = this._dispatch$1(list[i]);
      if (i >= t1)
        throw $.ioore(i);
      copy[i] = t2;
    }
    return copy;
  },
  visitList$1$bailout1: function(state0, list) {
    var t1, copy, len, t2, i, t3;
    t1 = this._visited;
    copy = t1.$index(t1, list);
    if (copy != null)
      return copy;
    t1 = $.getInterceptor$asx(list);
    len = t1.get$length(list);
    copy = $.List_List(len, null);
    t2 = this._visited;
    t2.$indexSet(t2, list, copy);
    for (t2 = copy.length, i = 0; $.JSNumber_methods.$lt(i, len); ++i) {
      t3 = this._dispatch$1(t1.$index(list, i));
      if (i >= t2)
        throw $.ioore(i);
      copy[i] = t3;
    }
    return copy;
  },
  visitMap$1: function(map) {
    var t1, t2;
    t1 = {};
    t2 = this._visited;
    t1.copy_0 = t2.$index(t2, map);
    t2 = t1.copy_0;
    if (t2 != null)
      return t2;
    t1.copy_0 = $.HashMap$(null, null);
    t2 = this._visited;
    t2.$indexSet(t2, map, t1.copy_0);
    map.forEach$1(map, new $._Copier_visitMap_anon(t1, this));
    return t1.copy_0;
  }
};

$$._Copier_visitMap_anon = {"": "Closure;box_0,this_1",
  call$2: function(key, val) {
    var t1, t2;
    t1 = this.box_0.copy_0;
    t2 = this.this_1;
    $.$indexSet$ax(t1, t2._dispatch$1(key), t2._dispatch$1(val));
  }
};

$$._Serializer = {"": "_MessageTraverser;",
  visitPrimitive$1: function(x) {
    return x;
  },
  visitList$1: function(list) {
    var t1, copyId, id;
    t1 = this._visited;
    copyId = t1.$index(t1, list);
    if (copyId != null)
      return ["ref", copyId];
    id = this._nextFreeRefId;
    this._nextFreeRefId = id + 1;
    t1 = this._visited;
    t1.$indexSet(t1, list, id);
    return ["list", id, this._serializeList$1(list)];
  },
  visitMap$1: function(map) {
    var t1, copyId, id, keys;
    t1 = this._visited;
    copyId = t1.$index(t1, map);
    if (copyId != null)
      return ["ref", copyId];
    id = this._nextFreeRefId;
    this._nextFreeRefId = id + 1;
    t1 = this._visited;
    t1.$indexSet(t1, map, id);
    t1 = map.get$keys();
    keys = this._serializeList$1(t1.toList$0(t1));
    t1 = map.get$values(map);
    return ["map", id, keys, this._serializeList$1(t1.toList$0(t1))];
  },
  _serializeList$1: function(list) {
    var len, result, t1, i, t2;
    if (typeof list !== "string" && (typeof list !== "object" || list === null || list.constructor !== Array && !list.$isJavaScriptIndexingBehavior()))
      return this._serializeList$1$bailout(1, list);
    len = list.length;
    result = $.List_List(len, null);
    for (t1 = result.length, i = 0; i < len; ++i) {
      if (i >= list.length)
        throw $.ioore(i);
      t2 = this._dispatch$1(list[i]);
      if (i >= t1)
        throw $.ioore(i);
      result[i] = t2;
    }
    return result;
  },
  _serializeList$1$bailout: function(state0, list) {
    var t1, len, result, t2, i, t3;
    t1 = $.getInterceptor$asx(list);
    len = t1.get$length(list);
    result = $.List_List(len, null);
    for (t2 = result.length, i = 0; $.JSNumber_methods.$lt(i, len); ++i) {
      t3 = this._dispatch$1(t1.$index(list, i));
      if (i >= t2)
        throw $.ioore(i);
      result[i] = t3;
    }
    return result;
  }
};

$$._Deserializer = {"": "Object0;",
  deserialize$1: function(x) {
    if (x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean")
      return x;
    this._deserialized = $.HashMap$(null, null);
    return this._deserializeHelper$1(x);
  },
  _deserializeHelper$1: function(x) {
    if (x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean")
      return x;
    switch ($.$index$asx(x, 0)) {
      case "ref":
        return this._deserializeRef$1(x);
      case "list":
        return this._deserializeList$1(x);
      case "map":
        return this._deserializeMap$1(x);
      case "sendport":
        return this.deserializeSendPort$1(x);
      case "isolateSink":
        return this.deserializeIsolateSink$1(x);
      case "closeToken":
        return this.deserializeCloseToken$1(x);
      default:
        return this.deserializeObject$1(x);
    }
  },
  _deserializeRef$1: function(x) {
    var id, t1;
    id = $.$index$asx(x, 1);
    t1 = this._deserialized;
    return t1.$index(t1, id);
  },
  _deserializeList$1: function(x) {
    var t1, id, dartList, t2, len, i;
    t1 = $.getInterceptor$asx(x);
    id = t1.$index(x, 1);
    dartList = t1.$index(x, 2);
    if (typeof dartList !== "object" || dartList === null || (dartList.constructor !== Array || !!dartList.immutable$list) && !dartList.$isJavaScriptIndexingBehavior())
      return this._deserializeList$1$bailout(1, dartList, id);
    t2 = this._deserialized;
    t2.$indexSet(t2, id, dartList);
    len = dartList.length;
    for (i = 0; i < len; ++i) {
      if (i >= dartList.length)
        throw $.ioore(i);
      t1 = this._deserializeHelper$1(dartList[i]);
      if (i >= dartList.length)
        throw $.ioore(i);
      dartList[i] = t1;
    }
    return dartList;
  },
  _deserializeList$1$bailout: function(state0, dartList, id) {
    var t2, len, i;
    t2 = this._deserialized;
    t2.$indexSet(t2, id, dartList);
    t2 = $.getInterceptor$asx(dartList);
    len = t2.get$length(dartList);
    for (i = 0; $.JSNumber_methods.$lt(i, len); ++i)
      t2.$indexSet(dartList, i, this._deserializeHelper$1(t2.$index(dartList, i)));
    return dartList;
  },
  _deserializeMap$1: function(x) {
    var result, t1, id, t2, keys, values, len, i, key;
    result = $.HashMap$(null, null);
    t1 = $.getInterceptor$asx(x);
    id = t1.$index(x, 1);
    t2 = this._deserialized;
    t2.$indexSet(t2, id, result);
    keys = t1.$index(x, 2);
    if (typeof keys !== "string" && (typeof keys !== "object" || keys === null || keys.constructor !== Array && !keys.$isJavaScriptIndexingBehavior()))
      return this._deserializeMap$1$bailout(1, keys, t1, x, result);
    values = t1.$index(x, 3);
    if (typeof values !== "string" && (typeof values !== "object" || values === null || values.constructor !== Array && !values.$isJavaScriptIndexingBehavior()))
      return this._deserializeMap$1$bailout(2, keys, 0, 0, result, values);
    len = keys.length;
    for (i = 0; i < len; ++i) {
      if (i >= keys.length)
        throw $.ioore(i);
      key = this._deserializeHelper$1(keys[i]);
      if (i >= values.length)
        throw $.ioore(i);
      result.$indexSet(result, key, this._deserializeHelper$1(values[i]));
    }
    return result;
  },
  _deserializeMap$1$bailout: function(state0, keys, t1, x, result, values) {
    switch (state0) {
      case 0:
        result = $.HashMap$(null, null);
        t1 = $.getInterceptor$asx(x);
        id = t1.$index(x, 1);
        t2 = this._deserialized;
        t2.$indexSet(t2, id, result);
        keys = t1.$index(x, 2);
      case 1:
        state0 = 0;
        values = t1.$index(x, 3);
      case 2:
        var id, t2, t3, len, i;
        state0 = 0;
        t3 = $.getInterceptor$asx(keys);
        len = t3.get$length(keys);
        for (t1 = $.getInterceptor$asx(values), i = 0; $.JSNumber_methods.$lt(i, len); ++i)
          result.$indexSet(result, this._deserializeHelper$1(t3.$index(keys, i)), this._deserializeHelper$1(t1.$index(values, i)));
        return result;
    }
  },
  deserializeObject$1: function(x) {
    throw $.$$throw("Unexpected serialized object");
  }
};

$$.TimerImpl = {"": "Object0;_once,_inEventLoop,_handle?",
  cancel$0: function() {
    if ($.get$globalThis().setTimeout != null) {
      if (this._inEventLoop)
        throw $.$$throw($.UnsupportedError$("Timer in event loop cannot be canceled."));
      if (this._handle == null)
        return;
      var t1 = $globalState.topEventLoop;
      t1.activeTimerCount = t1.activeTimerCount - 1;
      if (this._once)
        $.get$globalThis().clearTimeout(this._handle);
      else
        $.get$globalThis().clearInterval(this._handle);
      this._handle = null;
    } else
      throw $.$$throw($.UnsupportedError$("Canceling a timer."));
  },
  TimerImpl$2: function(milliseconds, callback) {
    var t1;
    if (milliseconds === 0)
      t1 = $.hasTimer() !== true || $._globalState().get$isWorker() === true;
    else
      t1 = false;
    if (t1) {
      $._globalState().get$topEventLoop().enqueue$3($._globalState().get$currentContext(), callback, "timer");
      this._inEventLoop = true;
    } else if ($.hasTimer() === true) {
      t1 = $._globalState().get$topEventLoop();
      t1.activeTimerCount = t1.activeTimerCount + 1;
      t1 = new $.internalCallback(this, callback);
      this._handle = $.get$globalThis().setTimeout($.convertDartClosureToJS(t1, 0), milliseconds);
    } else
      throw $.$$throw($.UnsupportedError$("Timer greater than 0."));
  }
};

$$.internalCallback = {"": "Closure;this_0,callback_1",
  call$0: function() {
    this.callback_1.call$0();
    this.this_0.set$_handle(null);
    var t1 = $globalState.topEventLoop;
    t1.activeTimerCount = t1.activeTimerCount - 1;
  }
};

$$.JSArray = {"": "Interceptor;",
  add$1: function(receiver, value) {
    $.checkGrowable(receiver, "add");
    receiver.push(value);
  },
  removeAt$1: function(receiver, index) {
    if (!(typeof index === "number" && Math.floor(index) === index))
      throw $.$$throw($.ArgumentError$(index));
    if (index < 0 || index >= receiver.length)
      throw $.$$throw($.RangeError$value(index));
    $.checkGrowable(receiver, "removeAt");
    return receiver.splice(index, 1)[0];
  },
  insert$2: function(receiver, index, value) {
    if (index < 0 || index > receiver.length)
      throw $.$$throw($.RangeError$value(index));
    $.checkGrowable(receiver, "insert");
    receiver.splice(index, 0, value);
  },
  removeLast$0: function(receiver) {
    $.checkGrowable(receiver, "removeLast");
    if (receiver.length === 0)
      throw $.$$throw($.RangeError$value(-1));
    return receiver.pop();
  },
  remove$1: function(receiver, element) {
    var i;
    $.checkGrowable(receiver, "remove");
    for (i = 0; i < receiver.length; ++i)
      if ($.$eq(receiver[i], element) === true) {
        receiver.splice(i, 1);
        return;
      }
  },
  removeAll$1: function(receiver, elements) {
    $.IterableMixinWorkaround_removeAllList(receiver, elements);
  },
  removeWhere$1: function(receiver, test) {
    $.IterableMixinWorkaround_removeWhereList(receiver, test);
  },
  addAll$1: function(receiver, collection) {
    var t1, t2;
    for (t1 = $.get$iterator$ax(collection); t1.moveNext$0();) {
      t2 = t1.get$current();
      $.checkGrowable(receiver, "add");
      receiver.push(t2);
    }
  },
  clear$0: function(receiver) {
    this.set$length(receiver, 0);
  },
  forEach$1: function(receiver, f) {
    var t1;
    for (t1 = this.get$iterator(receiver); t1.moveNext$0();)
      f.call$1(t1.get$current());
    return;
  },
  map$1: function(receiver, f) {
    return $.MappedListIterable$(receiver, f, null, null);
  },
  elementAt$1: function(receiver, index) {
    if (index !== (index | 0))
      return this.elementAt$1$bailout(1, index, receiver);
    if (index < 0 || index >= receiver.length)
      throw $.ioore(index);
    return receiver[index];
  },
  elementAt$1$bailout: function(state0, index, receiver) {
    if (index !== (index | 0))
      throw $.iae(index);
    if (index < 0 || index >= receiver.length)
      throw $.ioore(index);
    return receiver[index];
  },
  sublist$2: function(receiver, start, end) {
    if (typeof end !== "number")
      return this.sublist$2$bailout(1, start, end, receiver);
    $.checkNull(start);
    if (!(typeof start === "number" && Math.floor(start) === start))
      throw $.$$throw($.ArgumentError$(start));
    if (start < 0 || start > receiver.length)
      throw $.$$throw($.RangeError$range(start, 0, receiver.length));
    if (!(typeof end === "number" && Math.floor(end) === end))
      throw $.$$throw($.ArgumentError$(end));
    if (end < start || end > receiver.length)
      throw $.$$throw($.RangeError$range(end, start, receiver.length));
    if (start === end)
      return [];
    return receiver.slice(start, end);
  },
  sublist$2$bailout: function(state0, start, end, receiver) {
    $.checkNull(start);
    if (!(typeof start === "number" && Math.floor(start) === start))
      throw $.$$throw($.ArgumentError$(start));
    if (start < 0 || start > receiver.length)
      throw $.$$throw($.RangeError$range(start, 0, receiver.length));
    if (end == null)
      end = receiver.length;
    else {
      if (!(typeof end === "number" && Math.floor(end) === end))
        throw $.$$throw($.ArgumentError$(end));
      if (end < start || end > receiver.length)
        throw $.$$throw($.RangeError$range(end, start, receiver.length));
    }
    if (start === end)
      return [];
    return receiver.slice(start, end);
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  get$last: function(receiver) {
    var t1 = receiver.length;
    if (t1 > 0)
      return receiver[t1 - 1];
    throw $.$$throw($.StateError$("No elements"));
  },
  setRange$4: function(receiver, start, $length, from, startFrom) {
    $.checkMutable(receiver, "set range");
    $.IterableMixinWorkaround_setRangeList(receiver, start, $length, from, startFrom);
  },
  indexOf$2: function(receiver, element, start) {
    return $.Arrays_indexOf(receiver, element, start, receiver.length);
  },
  indexOf$1: function($receiver, element) {
    return this.indexOf$2($receiver, element, 0);
  },
  contains$1: function(receiver, other) {
    var t1, i;
    for (t1 = $.getInterceptor(other), i = 0; i < receiver.length; ++i)
      if (t1.$eq(other, receiver[i]) === true)
        return true;
    return false;
  },
  get$contains: function(receiver) {
    return new $.BoundClosure$i1(this, "contains$1", receiver);
  },
  get$isEmpty: function(receiver) {
    return receiver.length === 0;
  },
  toString$0: function(receiver) {
    return $.ToString_collectionToString(receiver);
  },
  get$iterator: function(receiver) {
    return $.ListIterator$(receiver);
  },
  get$hashCode: function(receiver) {
    return $.Primitives_objectHashCode(receiver);
  },
  get$length: function(receiver) {
    return receiver.length;
  },
  set$length: function(receiver, newLength) {
    if (!(typeof newLength === "number" && Math.floor(newLength) === newLength))
      throw $.$$throw($.ArgumentError$(newLength));
    if (newLength < 0)
      throw $.$$throw($.RangeError$value(newLength));
    $.checkGrowable(receiver, "set length");
    receiver.length = newLength;
  },
  $index: function(receiver, index) {
    if (!(typeof index === "number" && Math.floor(index) === index))
      throw $.$$throw($.ArgumentError$(index));
    if (index >= receiver.length || index < 0)
      throw $.$$throw($.RangeError$value(index));
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    $.checkMutable(receiver, "indexed set");
    if (!(typeof index === "number" && Math.floor(index) === index))
      throw $.$$throw($.ArgumentError$(index));
    if (index >= receiver.length || index < 0)
      throw $.$$throw($.RangeError$value(index));
    receiver[index] = value;
  },
  $asInterceptor: null,
  $asList: function() {
    return null;
  },
  $asCollection: function() {
    return null;
  },
  $isList: function() {
    return true;
  },
  $isCollection: function() {
    return true;
  }
};

$$.JSMutableArray = {"": "JSArray;",
  $asList: function() {
    return function () { return [null]; };
  },
  $asCollection: function() {
    return function () { return [null]; };
  }
};

$$.JSFixedArray = {"": "JSMutableArray;"};

$$.JSExtendableArray = {"": "JSMutableArray;"};

$$.DartError = {"": "Object0;",
  get$stack: function() {
    return this.stack;
  },
  toString$0: function(_) {
    var dartException = this.dartException;
    if (!!Error.captureStackTrace || this.get$stack() == null)
      return $.toString$0(dartException);
    else
      return $.S(dartException) + "\n" + $.S(this.get$stack());
  },
  DartError$1: function(dartException) {
    this.dartException = dartException;
    this.toString = $.DartError_toStringWrapper.call$0;
  }
};

$$.StackTrace = {"": "Object0;stack",
  toString$0: function(_) {
    var t1 = this.stack;
    return t1 != null ? t1 : "";
  }
};

$$.invokeClosure_anon = {"": "Closure;closure_0",
  call$0: function() {
    return this.closure_0.call$0();
  }
};

$$.invokeClosure_anon0 = {"": "Closure;closure_1,arg1_2",
  call$0: function() {
    return this.closure_1.call$1(this.arg1_2);
  }
};

$$.invokeClosure_anon1 = {"": "Closure;closure_3,arg1_4,arg2_5",
  call$0: function() {
    return this.closure_3.call$2(this.arg1_4, this.arg2_5);
  }
};

$$.Closure = {"": "Object0;",
  toString$0: function(_) {
    return "Closure";
  }
};

$$.Null = {"": "Object0;"};

$$.CastErrorImplementation = {"": "Object0;message",
  toString$0: function(_) {
    return this.message;
  }
};

$$.JSNumber = {"": "Interceptor;",
  get$isNegative: function(receiver) {
    return receiver === 0 ? 1 / receiver < 0 : receiver < 0;
  },
  get$isNaN: function(receiver) {
    return isNaN(receiver);
  },
  get$isInfinite: function(receiver) {
    return receiver == Infinity || receiver == -Infinity;
  },
  remainder$1: function(receiver, b) {
    $.checkNull(b);
    return receiver % b;
  },
  abs$0: function(receiver) {
    return Math.abs(receiver);
  },
  toInt$0: function(receiver) {
    var truncated;
    if (this.get$isNaN(receiver))
      throw $.$$throw($.UnsupportedError$("NaN"));
    if (this.get$isInfinite(receiver))
      throw $.$$throw($.UnsupportedError$("Infinity"));
    truncated = receiver < 0 ? Math.ceil(receiver) : Math.floor(receiver);
    return truncated == -0.0 ? 0 : truncated;
  },
  truncate$0: function(receiver) {
    return this.toInt$0(receiver);
  },
  ceil$0: function(receiver) {
    return this.toInt$0(Math.ceil(receiver));
  },
  toDouble$0: function(receiver) {
    return receiver;
  },
  toStringAsFixed$1: function(receiver, fractionDigits) {
    var result;
    $.checkNum(fractionDigits);
    if (fractionDigits < 0 || fractionDigits > 20)
      throw $.$$throw($.RangeError$(fractionDigits));
    result = receiver.toFixed(fractionDigits);
    if (receiver === 0 && this.get$isNegative(receiver))
      return "-" + result;
    return result;
  },
  toString$0: function(receiver) {
    if (receiver === 0 && (1 / receiver) < 0)
      return "-0.0";
    else
      return "" + (receiver);
  },
  get$hashCode: function(receiver) {
    return receiver & 0x1FFFFFFF;
  },
  $negate: function(receiver) {
    return -receiver;
  },
  $add: function(receiver, other) {
    if (!(typeof other === "number"))
      throw $.$$throw($.ArgumentError$(other));
    return receiver + other;
  },
  $sub: function(receiver, other) {
    if (!(typeof other === "number"))
      throw $.$$throw($.ArgumentError$(other));
    return receiver - other;
  },
  $div: function(receiver, other) {
    if (!(typeof other === "number"))
      throw $.$$throw($.ArgumentError$(other));
    return receiver / other;
  },
  $mul: function(receiver, other) {
    if (!(typeof other === "number"))
      throw $.$$throw($.ArgumentError$(other));
    return receiver * other;
  },
  $tdiv: function(receiver, other) {
    if (!(typeof other === "number"))
      throw $.$$throw($.ArgumentError$(other));
    return this.truncate$0(receiver / other);
  },
  $shl: function(receiver, other) {
    if (other < 0)
      throw $.$$throw($.ArgumentError$(other));
    if (other > 31)
      return 0;
    return (receiver << other) >>> 0;
  },
  $shr: function(receiver, other) {
    if (other < 0)
      throw $.$$throw($.ArgumentError$(other));
    if (receiver > 0) {
      if (other > 31)
        return 0;
      return receiver >>> other;
    }
    if (other > 31)
      other = 31;
    return (receiver >> other) >>> 0;
  },
  $and: function(receiver, other) {
    if (!(typeof other === "number"))
      throw $.$$throw($.ArgumentError$(other));
    return (receiver & other) >>> 0;
  },
  $or: function(receiver, other) {
    return (receiver | other) >>> 0;
  },
  $xor: function(receiver, other) {
    return (receiver ^ other) >>> 0;
  },
  $lt: function(receiver, other) {
    if (!(typeof other === "number"))
      throw $.$$throw($.ArgumentError$(other));
    return receiver < other;
  },
  $gt: function(receiver, other) {
    if (!(typeof other === "number"))
      throw $.$$throw($.ArgumentError$(other));
    return receiver > other;
  },
  $le: function(receiver, other) {
    if (!(typeof other === "number"))
      throw $.$$throw($.ArgumentError$(other));
    return receiver <= other;
  },
  $ge: function(receiver, other) {
    if (!(typeof other === "number"))
      throw $.$$throw($.ArgumentError$(other));
    return receiver >= other;
  },
  $isnum: true
};

$$.JSInt = {"": "JSNumber;",
  get$isEven: function(receiver) {
    return (receiver & 1) === 0;
  },
  $is$int: true,
  $isnum: true
};

$$.JSDouble = {"": "JSNumber;", $is$double: true, $isnum: true};

$$.JSString = {"": "Interceptor;",
  codeUnitAt$1: function(receiver, index) {
    if (index < 0)
      throw $.$$throw($.RangeError$value(index));
    if (index >= receiver.length)
      throw $.$$throw($.RangeError$value(index));
    return receiver.charCodeAt(index);
  },
  allMatches$1: function(receiver, str) {
    $.checkString(str);
    return $.allMatchesInStringUnchecked(receiver, str);
  },
  $add: function(receiver, other) {
    if (!(typeof other === "string"))
      throw $.$$throw($.ArgumentError$(other));
    return receiver + other;
  },
  endsWith$1: function(receiver, other) {
    var otherLength, t1;
    $.checkString(other);
    otherLength = other.length;
    t1 = receiver.length;
    if (otherLength > t1)
      return false;
    return other === this.substring$1(receiver, t1 - otherLength);
  },
  replaceAll$2: function(receiver, from, to) {
    $.checkString(to);
    return $.stringReplaceAllUnchecked(receiver, from, to);
  },
  split$1: function(receiver, pattern) {
    $.checkNull(pattern);
    return receiver.split(pattern);
  },
  substring$2: function(receiver, startIndex, endIndex) {
    var t1;
    $.checkNum(startIndex);
    if (endIndex == null)
      endIndex = receiver.length;
    $.checkNum(endIndex);
    t1 = $.getInterceptor$n(startIndex);
    if (t1.$lt(startIndex, 0) === true)
      throw $.$$throw($.RangeError$value(startIndex));
    if (t1.$gt(startIndex, endIndex) === true)
      throw $.$$throw($.RangeError$value(startIndex));
    if ($.$gt$n(endIndex, receiver.length) === true)
      throw $.$$throw($.RangeError$value(endIndex));
    return receiver.substring(startIndex, endIndex);
  },
  substring$1: function($receiver, startIndex) {
    return this.substring$2($receiver, startIndex, null);
  },
  toLowerCase$0: function(receiver) {
    return receiver.toLowerCase();
  },
  indexOf$2: function(receiver, other, start) {
    $.checkNull(other);
    if (!(typeof start === "number" && Math.floor(start) === start))
      throw $.$$throw($.ArgumentError$(start));
    if (!(typeof other === "string"))
      throw $.$$throw($.ArgumentError$(other));
    if (start < 0)
      return -1;
    return receiver.indexOf(other, start);
  },
  indexOf$1: function($receiver, other) {
    return this.indexOf$2($receiver, other, 0);
  },
  contains$2: function(receiver, other, startIndex) {
    $.checkNull(other);
    return $.stringContainsUnchecked(receiver, other, startIndex);
  },
  contains$1: function($receiver, other) {
    return this.contains$2($receiver, other, 0);
  },
  get$contains: function(receiver) {
    return new $.Bound_contains_JSString(this, "contains$2", receiver);
  },
  get$isEmpty: function(receiver) {
    return receiver.length === 0;
  },
  toString$0: function(receiver) {
    return receiver;
  },
  get$hashCode: function(receiver) {
    var hash, i;
    for (hash = 0, i = 0; i < receiver.length; ++i) {
      hash = 536870911 & hash + receiver.charCodeAt(i);
      hash = 536870911 & hash + ((524287 & hash) << 10 >>> 0);
      hash = hash ^ (hash >> 6);
    }
    hash = 536870911 & hash + ((67108863 & hash) << 3 >>> 0);
    hash = hash ^ (hash >> 11);
    return 536870911 & hash + ((16383 & hash) << 15 >>> 0);
  },
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    if (!(typeof index === "number" && Math.floor(index) === index))
      throw $.$$throw($.ArgumentError$(index));
    if (index >= receiver.length || index < 0)
      throw $.$$throw($.RangeError$value(index));
    return receiver[index];
  },
  $isString: true
};

$$._convertJsonToDart_anon = {"": "Closure;",
  call$2: function(key, value) {
    return value;
  }
};

$$._convertJsonToDart_walk = {"": "Closure;revive_0",
  call$1: function(e) {
    var list, t1, i, keys, map, key, proto;
    if (e == null || typeof e != "object")
      return e;
    if (Object.getPrototypeOf(e) === Array.prototype) {
      list = e;
      for (t1 = this.revive_0, i = 0; i < list.length; ++i)
        list[i]=t1.call$2(i, this.call$1(list[i]));
      return list;
    }
    keys = Object.keys(e);
    map = $.makeLiteralMap([]);
    for (t1 = this.revive_0, i = 0; i < keys.length; ++i) {
      key = keys[i];
      map.$indexSet(map, key, t1.call$2(key, this.call$1(e[key])));
    }
    proto = e.__proto__;
    if (typeof proto !== "undefined" && proto !== Object.prototype)
      map.$indexSet(map, "__proto__", t1.call$2("__proto__", this.call$1(proto)));
    return map;
  }
};

$$._Random = {"": "Object0;",
  nextDouble$0: function() {
    return Math.random();
  }
};

$$.MetaInfo = {"": "Object0;_tag<,_tags,_set<"};

$$.JSSyntaxRegExp = {"": "Object0;_pattern,_isMultiLine,_isCaseSensitive,_nativeRegExp",
  firstMatch$1: function(str) {
    var m, matchStart, t1;
    m = this._nativeRegExp.exec($.checkString(str));
    if (m == null)
      return;
    matchStart = m.index;
    t1 = $.get$length$asx($.$index$asx(m, 0));
    if (typeof t1 !== "number")
      throw $.iae(t1);
    return $._MatchImplementation$(this.get$pattern(this), str, matchStart, matchStart + t1, m);
  },
  hasMatch$1: function(str) {
    return this._nativeRegExp.test($.checkString(str));
  },
  allMatches$1: function(_, str) {
    $.checkString(str);
    return $._AllMatchesIterable$(this, str);
  },
  get$pattern: function(_) {
    return this._pattern;
  },
  get$isMultiLine: function() {
    return this._isMultiLine;
  },
  get$isCaseSensitive: function() {
    return this._isCaseSensitive;
  },
  $isJSSyntaxRegExp: true
};

$$._MatchImplementation = {"": "Object0;pattern,str,start,end,_groups",
  start$0: function($receiver) {
    return this.start.call$0();
  },
  group$1: function(index) {
    return $.$index$asx(this._groups, index);
  },
  $index: function(_, index) {
    return $.$index$asx(this._groups, index);
  }
};

$$._AllMatchesIterable = {"": "Iterable;_re,_str",
  get$iterator: function(_) {
    return $._AllMatchesIterator$(this._re, this._str);
  }
};

$$._AllMatchesIterator = {"": "Object0;_re,_str,_liblib2$_current",
  get$current: function() {
    return this._liblib2$_current;
  },
  moveNext$0: function() {
    this._liblib2$_current = this._re.firstMatch$1(this._str);
    return this._liblib2$_current != null;
  }
};

$$.StringMatch = {"": "Object0;start,str,pattern",
  $index: function(_, g) {
    return this.group$1(g);
  },
  group$1: function(group_) {
    if ($.$eq(group_, 0) !== true)
      throw $.$$throw($.RangeError$value(group_));
    return this.pattern;
  },
  start$0: function($receiver) {
    return this.start.call$0();
  }
};

$$.AsyncError = {"": "Object0;error>,stackTrace<,cause<",
  _writeOn$1: function(buffer) {
    var message, exception, t1;
    buffer.write$1("'");
    message = null;
    try {
      message = $.toString$0(this.error);
    } catch (exception) {
      $.unwrapException(exception);
      message = $.Error_safeToString(this.error);
    }

    buffer.write$1(message);
    buffer.write$1("'\n");
    t1 = this.stackTrace;
    if (t1 != null) {
      buffer.write$1("Stack trace:\n");
      buffer.writeln$1($.toString$0(t1));
    }
  },
  toString$0: function(_) {
    var buffer, cause;
    buffer = $.StringBuffer$("");
    buffer.write$1("AsyncError: ");
    this._writeOn$1(buffer);
    cause = this.cause;
    for (; cause != null;) {
      buffer.write$1("Caused by: ");
      cause._writeOn$1(buffer);
      cause = cause.get$cause();
    }
    return buffer.toString$0(buffer);
  },
  throwDelayed$0: function() {
    var reportError, exception;
    reportError = new $.AsyncError_throwDelayed_reportError(this);
    try {
      $.Timer_run(new $.AsyncError_throwDelayed_anon(this, reportError));
    } catch (exception) {
      $.unwrapException(exception);
      reportError.call$0();
    }

  },
  $isAsyncError: true
};

$$.AsyncError_throwDelayed_reportError = {"": "Closure;this_0",
  call$0: function() {
    var t1 = this.this_0;
    $.Primitives_printString("Uncaught Error: " + $.S($.get$error$x(t1)));
    t1 = t1.get$stackTrace();
    if (t1 != null)
      $.Primitives_printString("Stack Trace:\n" + $.S(t1) + "\n");
  }
};

$$.AsyncError_throwDelayed_anon = {"": "Closure;this_1,reportError_2",
  call$0: function() {
    this.reportError_2.call$0();
    throw $.$$throw($.get$error$x(this.this_1));
  }
};

$$._CompleterImpl = {"": "Object0;future,_isComplete",
  complete$1: function(_, value) {
    if (this._isComplete)
      throw $.$$throw($.StateError$("Future already completed"));
    this._isComplete = true;
    this.future._liblib0$_setValue$1(value);
  },
  completeError$2: function(error, stackTrace) {
    var asyncError;
    if (this._isComplete)
      throw $.$$throw($.StateError$("Future already completed"));
    this._isComplete = true;
    asyncError = typeof error === "object" && error !== null && !!error.$isAsyncError ? error : $.AsyncError$(error, stackTrace);
    this.future._setError$1(asyncError);
  },
  completeError$1: function(error) {
    return this.completeError$2(error, null);
  }
};

$$._FutureListenerWrapper = {"": "Object0;future,_nextListener@",
  _sendValue$1: function(value) {
    this.future._liblib0$_setValue$1(value);
  },
  _sendError$1: function(error) {
    this.future._setError$1(error);
  }
};

$$._FutureImpl = {"": "Object0;_state@,_resultOrListeners<",
  get$_isComplete: function() {
    return this._state !== 0;
  },
  get$_hasValue: function() {
    return this._state === 1;
  },
  get$_hasError: function() {
    return (this._state & 2) !== 0;
  },
  get$_hasUnhandledError: function() {
    return (this._state & 4) !== 0;
  },
  then$2$onError: function(f, onError) {
    var t1;
    if (!this.get$_isComplete()) {
      if (onError == null) {
        t1 = $._ThenFuture$(f);
        t1._subscribeTo$1(this);
        return t1;
      }
      t1 = $._SubscribeFuture$(f, onError);
      t1._subscribeTo$1(this);
      return t1;
    }
    if (this.get$_hasError()) {
      if (onError != null)
        return this._handleError$2(onError, null);
      return $._FutureWrapper$(this);
    } else
      return this._handleValue$1(f);
  },
  then$1: function(f) {
    return this.then$2$onError(f, null);
  },
  catchError$2$test: function(f, test) {
    var t1;
    if (this.get$_hasValue())
      return $._FutureWrapper$(this);
    if (!this.get$_isComplete()) {
      t1 = $._CatchErrorFuture$(f, test);
      t1._subscribeTo$1(this);
      return t1;
    } else
      return this._handleError$2(f, test);
  },
  catchError$1: function(f) {
    return this.catchError$2$test(f, null);
  },
  whenComplete$1: function(action) {
    var whenFuture = $._WhenFuture$(action);
    if (!this.get$_isComplete())
      this._addListener$1(whenFuture);
    else if (this.get$_hasValue())
      $.Timer_run(new $._FutureImpl_whenComplete_anon(whenFuture, this._resultOrListeners));
    else {
      this._state = (this._state & 4294967291) >>> 0;
      $.Timer_run(new $._FutureImpl_whenComplete_anon0(whenFuture, this._resultOrListeners));
    }
    return whenFuture;
  },
  _handleValue$1: function(onValue) {
    var thenFuture = $._ThenFuture$(onValue);
    $.Timer_run(new $._FutureImpl__handleValue_anon(thenFuture, this._resultOrListeners));
    return thenFuture;
  },
  _handleError$2: function(onError, test) {
    var error, errorFuture;
    this._state = (this._state & 4294967291) >>> 0;
    error = this._resultOrListeners;
    errorFuture = $._CatchErrorFuture$(onError, test);
    $.Timer_run(new $._FutureImpl__handleError_anon(error, errorFuture));
    return errorFuture;
  },
  _liblib0$_setValue$1: function(value) {
    var listeners, listeners0;
    if (this.get$_isComplete())
      throw $.$$throw($.StateError$("Future already completed"));
    listeners = this._removeListeners$0();
    this._state = 1;
    this._resultOrListeners = value;
    for (; listeners != null; listeners = listeners0) {
      listeners0 = listeners.get$_nextListener();
      listeners.set$_nextListener(null);
      listeners._sendValue$1(value);
    }
  },
  get$_liblib0$_setValue: function() {
    return new $.BoundClosure$1(this, "_liblib0$_setValue$1");
  },
  _setError$1: function(error) {
    var listeners, listeners0;
    if (this.get$_isComplete())
      throw $.$$throw($.StateError$("Future already completed"));
    listeners = this._removeListeners$0();
    this._state = 2;
    this._resultOrListeners = error;
    if (listeners == null) {
      this._scheduleUnhandledError$0();
      return;
    }
    do {
      listeners0 = listeners.get$_nextListener();
      listeners.set$_nextListener(null);
      listeners._sendError$1(error);
      if (listeners0 != null) {
        listeners = listeners0;
        continue;
      } else
        break;
    } while (true);
  },
  get$_setError: function() {
    return new $.BoundClosure$1(this, "_setError$1");
  },
  _scheduleUnhandledError$0: function() {
    this._state = (this._state | 4) >>> 0;
    $.Timer_run(new $._FutureImpl__scheduleUnhandledError_anon(this));
  },
  _addListener$1: function(listener) {
    listener.set$_nextListener(this._resultOrListeners);
    this._resultOrListeners = listener;
  },
  _removeListeners$0: function() {
    var current, prev, next;
    current = this._resultOrListeners;
    this._resultOrListeners = null;
    for (prev = null; current != null; prev = current, current = next) {
      next = current.get$_nextListener();
      current.set$_nextListener(prev);
    }
    return prev;
  },
  _chain$1: function(future) {
    if (!this.get$_isComplete())
      this._addListener$1(future._asListener$0());
    else if (this.get$_hasValue())
      future._liblib0$_setValue$1(this._resultOrListeners);
    else {
      this._state = (this._state & 4294967291) >>> 0;
      future._setError$1(this._resultOrListeners);
    }
  },
  _setOrChainValue$1: function(result) {
    if (typeof result === "object" && result !== null && !!result.$isFuture)
      if (!!result.$is_FutureImpl) {
        result._chain$1(this);
        return;
      } else {
        result.then$2$onError(this.get$_liblib0$_setValue(), this.get$_setError());
        return;
      }
    else
      this._liblib0$_setValue$1(result);
  },
  _asListener$0: function() {
    return $._FutureListenerWrapper$(this);
  },
  _FutureImpl$immediateError$2: function(error, stackTrace) {
    this._setError$1(typeof error === "object" && error !== null && !!error.$isAsyncError ? error : $.AsyncError$(error, stackTrace));
  },
  _FutureImpl$immediate$1: function(value) {
    this._state = 1;
    this._resultOrListeners = value;
  },
  $is_FutureImpl: true,
  $isFuture: true
};

$$._FutureImpl__FutureImpl$wait_handleError = {"": "Closure;box_0",
  call$1: function(error) {
    var t1 = this.box_0;
    if (t1.values_1 != null) {
      t1.values_1 = null;
      t1.completer_0.completeError$2($.get$error$x(error), error.get$stackTrace());
    }
  }
};

$$._FutureImpl__FutureImpl$wait_anon = {"": "Closure;box_0,pos_1",
  call$1: function(value) {
    var t1, t2;
    t1 = this.box_0;
    t2 = t1.values_1;
    if (t2 == null)
      return;
    $.$indexSet$ax(t2, this.pos_1, value);
    t1.remaining_2 = $.$sub$n(t1.remaining_2, 1);
    if ($.$eq(t1.remaining_2, 0) === true) {
      t2 = t1.completer_0;
      t2.complete$1(t2, t1.values_1);
    }
  }
};

$$._FutureImpl_whenComplete_anon = {"": "Closure;whenFuture_0,value_1",
  call$0: function() {
    this.whenFuture_0._sendValue$1(this.value_1);
  }
};

$$._FutureImpl_whenComplete_anon0 = {"": "Closure;whenFuture_2,error_3",
  call$0: function() {
    this.whenFuture_2._sendError$1(this.error_3);
  }
};

$$._FutureImpl__handleValue_anon = {"": "Closure;thenFuture_0,value_1",
  call$0: function() {
    this.thenFuture_0._sendValue$1(this.value_1);
  }
};

$$._FutureImpl__handleError_anon = {"": "Closure;error_0,errorFuture_1",
  call$0: function() {
    this.errorFuture_1._sendError$1(this.error_0);
  }
};

$$._FutureImpl__scheduleUnhandledError_anon = {"": "Closure;this_0",
  call$0: function() {
    var t1, error, t2;
    t1 = this.this_0;
    if (t1.get$_hasUnhandledError()) {
      t1.set$_state($.$and$n(t1.get$_state(), 4294967291));
      error = t1.get$_resultOrListeners();
      t1 = $.getInterceptor$x(error);
      $.Primitives_printString("Uncaught Error: " + $.S(t1.get$error(error)));
      t2 = error.get$stackTrace();
      if (t2 != null)
        $.Primitives_printString("Stack Trace:\n" + $.S(t2) + "\n");
      throw $.$$throw(t1.get$error(error));
    }
  }
};

$$._TransformFuture = {"": "_FutureImpl;_nextListener@",
  _subscribeTo$1: function(future) {
    future._addListener$1(this);
  },
  $as_FutureImpl: function (S, T) { return [T]; },
  $asFuture: function (S, T) { return [T]; }
};

$$._ThenFuture = {"": "_TransformFuture;_onValue,_nextListener,_state,_resultOrListeners",
  _onValue$1: function(arg0) {
    return this._onValue.call$1(arg0);
  },
  _sendValue$1: function(value) {
    var result, e, e0, s, exception, t1;
    result = null;
    try {
      result = this._onValue$1(value);
    } catch (exception) {
      t1 = $.unwrapException(exception);
      if (typeof t1 === "object" && t1 !== null && !!t1.$isAsyncError) {
        e = t1;
        this._setError$1(e);
        return;
      } else {
        e0 = t1;
        s = $.getTraceFromException(exception);
        this._setError$1($.AsyncError$(e0, s));
        return;
      }
    }

    this._setOrChainValue$1(result);
  },
  _sendError$1: function(error) {
    this._setError$1(error);
  },
  $as_FutureImpl: function (S, T) { return [T]; },
  $asFuture: function (S, T) { return [T]; }
};

$$._CatchErrorFuture = {"": "_TransformFuture;_test,_onError,_nextListener,_state,_resultOrListeners",
  _test$1: function(arg0) {
    return this._test.call$1(arg0);
  },
  _onError$1: function(arg0) {
    return this._onError.call$1(arg0);
  },
  _sendValue$1: function(value) {
    this._liblib0$_setValue$1(value);
  },
  _sendError$1: function(error) {
    var matchesTest, e, s, result, e0, e1, s0, exception, t1;
    if (this._test != null) {
      matchesTest = null;
      try {
        matchesTest = this._test$1($.get$error$x(error));
      } catch (exception) {
        t1 = $.unwrapException(exception);
        e = t1;
        s = $.getTraceFromException(exception);
        this._setError$1($.AsyncError$withCause(e, s, error));
        return;
      }

      if (matchesTest !== true) {
        this._setError$1(error);
        return;
      }
    }
    result = null;
    try {
      result = this._onError$1(error);
    } catch (exception) {
      t1 = $.unwrapException(exception);
      if (typeof t1 === "object" && t1 !== null && !!t1.$isAsyncError) {
        e0 = t1;
        this._setError$1(e0);
        return;
      } else {
        e1 = t1;
        s0 = $.getTraceFromException(exception);
        this._setError$1($.AsyncError$withCause(e1, s0, error));
        return;
      }
    }

    this._setOrChainValue$1(result);
  },
  $as_FutureImpl: null,
  $asFuture: null
};

$$._SubscribeFuture = {"": "_ThenFuture;_onError,_onValue,_nextListener,_state,_resultOrListeners",
  _onError$1: function(arg0) {
    return this._onError.call$1(arg0);
  },
  _sendError$1: function(error) {
    var result, e, e0, s, exception, t1;
    result = null;
    try {
      result = this._onError$1(error);
    } catch (exception) {
      t1 = $.unwrapException(exception);
      if (typeof t1 === "object" && t1 !== null && !!t1.$isAsyncError) {
        e = t1;
        this._setError$1(e);
        return;
      } else {
        e0 = t1;
        s = $.getTraceFromException(exception);
        this._setError$1($.AsyncError$withCause(e0, s, error));
        return;
      }
    }

    this._setOrChainValue$1(result);
  },
  $as_FutureImpl: function (S, T) { return [T]; },
  $asFuture: function (S, T) { return [T]; }
};

$$._WhenFuture = {"": "_TransformFuture;_action,_nextListener,_state,_resultOrListeners",
  _action$0: function() {
    return this._action.call$0();
  },
  _sendValue$1: function(value) {
    var result, resultFuture, e, e0, s, t1, exception;
    try {
      result = this._action$0();
      t1 = result;
      if (typeof t1 === "object" && t1 !== null && !!t1.$isFuture) {
        resultFuture = result;
        resultFuture.then$2$onError(new $._WhenFuture__sendValue_anon(this, value), this.get$_setError());
        return;
      }
    } catch (exception) {
      t1 = $.unwrapException(exception);
      if (typeof t1 === "object" && t1 !== null && !!t1.$isAsyncError) {
        e = t1;
        this._setError$1(e);
        return;
      } else {
        e0 = t1;
        s = $.getTraceFromException(exception);
        this._setError$1($.AsyncError$(e0, s));
        return;
      }
    }

    this._liblib0$_setValue$1(value);
  },
  _sendError$1: function(error) {
    var t1, result, resultFuture, e, e0, s, t2, exception;
    t1 = {};
    t1.error_0 = error;
    try {
      result = this._action$0();
      t2 = result;
      if (typeof t2 === "object" && t2 !== null && !!t2.$isFuture) {
        resultFuture = result;
        resultFuture.then$2$onError(new $._WhenFuture__sendError_anon(t1, this), this.get$_setError());
        return;
      }
    } catch (exception) {
      t2 = $.unwrapException(exception);
      if (typeof t2 === "object" && t2 !== null && !!t2.$isAsyncError) {
        e = t2;
        t1.error_0 = e;
      } else {
        e0 = t2;
        s = $.getTraceFromException(exception);
        t1.error_0 = $.AsyncError$withCause(e0, s, t1.error_0);
      }
    }

    this._setError$1(t1.error_0);
  },
  $as_FutureImpl: null,
  $asFuture: null
};

$$._WhenFuture__sendValue_anon = {"": "Closure;this_0,value_1",
  call$1: function(_) {
    this.this_0._liblib0$_setValue$1(this.value_1);
  }
};

$$._WhenFuture__sendError_anon = {"": "Closure;box_0,this_1",
  call$1: function(_) {
    this.this_1._setError$1(this.box_0.error_0);
  }
};

$$._FutureWrapper = {"": "Object0;_future",
  then$2$onError: function($function, onError) {
    return this._future.then$2$onError($function, onError);
  },
  then$1: function($function) {
    return this.then$2$onError($function, null);
  },
  catchError$2$test: function($function, test) {
    return this._future.catchError$2$test($function, test);
  },
  catchError$1: function($function) {
    return this.catchError$2$test($function, null);
  },
  whenComplete$1: function(action) {
    return this._future.whenComplete$1(action);
  },
  $isFuture: true
};

$$.Stream = {"": "Object0;",
  get$isBroadcast: function() {
    return false;
  },
  asBroadcastStream$0: function() {
    if (this.get$isBroadcast() === true)
      return this;
    return $._SingleStreamMultiplexer$(this, $.getRuntimeTypeArgument(this, this["$asStream"], 0));
  },
  contains$1: function(_, match) {
    var t1, future, t2, t3;
    t1 = {};
    future = $._FutureImpl$();
    t1.subscription_0 = null;
    t2 = new $.Stream_contains_anon(t1, match, future);
    t3 = future.get$_setError();
    t1.subscription_0 = this.listen$4$onDone$onError$unsubscribeOnError(t2, new $.Stream_contains_anon0(future), t3, true);
    return future;
  },
  get$contains: function(receiver) {
    return new $.BoundClosure$i1(this, "contains$1", receiver);
  },
  get$length: function(_) {
    var t1, future, t2, t3;
    t1 = {};
    future = $._FutureImpl$();
    t1.count_0 = 0;
    t2 = new $.Stream_length_anon(t1);
    t3 = future.get$_setError();
    this.listen$4$onDone$onError$unsubscribeOnError(t2, new $.Stream_length_anon0(t1, future), t3, true);
    return future;
  },
  get$isEmpty: function(_) {
    var t1, future, t2, t3;
    t1 = {};
    future = $._FutureImpl$();
    t1.subscription_0 = null;
    t2 = new $.Stream_isEmpty_anon(t1, future);
    t3 = future.get$_setError();
    t1.subscription_0 = this.listen$4$onDone$onError$unsubscribeOnError(t2, new $.Stream_isEmpty_anon0(future), t3, true);
    return future;
  }
};

$$.Stream_contains_anon = {"": "Closure;box_0,match_1,future_2",
  call$1: function(element) {
    var t1, t2, t3;
    t1 = new $.Stream_contains__anon(this.match_1, element);
    t2 = this.box_0;
    t3 = this.future_2;
    $._runUserCode(t1, new $.Stream_contains__anon0(t2, t3), $._cancelAndError(t2.subscription_0, t3), null);
  }
};

$$.Stream_contains__anon = {"": "Closure;match_3,element_4",
  call$0: function() {
    return $.$eq(this.element_4, this.match_3);
  }
};

$$.Stream_contains__anon0 = {"": "Closure;box_0,future_5",
  call$1: function(isMatch) {
    if (isMatch === true) {
      this.box_0.subscription_0.cancel$0();
      this.future_5._liblib0$_setValue$1(true);
    }
  }
};

$$.Stream_contains_anon0 = {"": "Closure;future_6",
  call$0: function() {
    this.future_6._liblib0$_setValue$1(false);
  }
};

$$.Stream_length_anon = {"": "Closure;box_0",
  call$1: function(_) {
    var t1 = this.box_0;
    t1.count_0 = $.$add$ns(t1.count_0, 1);
  }
};

$$.Stream_length_anon0 = {"": "Closure;box_0,future_1",
  call$0: function() {
    this.future_1._liblib0$_setValue$1(this.box_0.count_0);
  }
};

$$.Stream_isEmpty_anon = {"": "Closure;box_0,future_1",
  call$1: function(_) {
    this.box_0.subscription_0.cancel$0();
    this.future_1._liblib0$_setValue$1(false);
  }
};

$$.Stream_isEmpty_anon0 = {"": "Closure;future_2",
  call$0: function() {
    this.future_2._liblib0$_setValue$1(true);
  }
};

$$.StreamSubscription = {"": "Object0;"};

$$.StreamSink = {"": "EventSink;"};

$$.EventSink = {"": "Object0;"};

$$.StreamController = {"": "StreamSink;stream>",
  add$1: function(_, value) {
    return this.stream._liblib0$_add$1(value);
  },
  $asStreamSink: null
};

$$._SingleControllerStream = {"": "_SingleStreamImpl;_subscriptionHandler,_pauseHandler,_subscriber,_state,_pendingEvents",
  _subscriptionHandler$0: function() {
    return this._subscriptionHandler.call$0();
  },
  _pauseHandler$0: function() {
    return this._pauseHandler.call$0();
  },
  _onSubscriptionStateChange$0: function() {
    var e, s, exception, t1;
    if (this._subscriptionHandler != null)
      try {
        this._subscriptionHandler$0();
      } catch (exception) {
        t1 = $.unwrapException(exception);
        e = t1;
        s = $.getTraceFromException(exception);
        $.AsyncError$(e, s).throwDelayed$0();
      }

  },
  _onPauseStateChange$0: function() {
    var e, s, exception, t1;
    if (this._pauseHandler != null)
      try {
        this._pauseHandler$0();
      } catch (exception) {
        t1 = $.unwrapException(exception);
        e = t1;
        s = $.getTraceFromException(exception);
        $.AsyncError$(e, s).throwDelayed$0();
      }

  },
  $as_SingleStreamImpl: null
};

$$._StreamImpl = {"": "Stream;_state@",
  listen$4$onDone$onError$unsubscribeOnError: function(onData, onDone, onError, unsubscribeOnError) {
    var subscription;
    if (this.get$_isComplete())
      return $._DoneSubscription$(onDone);
    if (onData == null)
      onData = $._nullDataHandler;
    if (onError == null)
      onError = $._nullErrorHandler;
    if (onDone == null)
      onDone = $._nullDoneHandler;
    subscription = this._createSubscription$4(onData, onError, onDone, true === unsubscribeOnError);
    this._addListener$1(subscription);
    return subscription;
  },
  listen$1: function(onData) {
    return this.listen$4$onDone$onError$unsubscribeOnError(onData, null, null, null);
  },
  listen$3$onDone$onError: function(onData, onDone, onError) {
    return this.listen$4$onDone$onError$unsubscribeOnError(onData, onDone, onError, null);
  },
  _liblib0$_add$1: function(value) {
    if (this.get$_liblib0$_isClosed())
      throw $.$$throw($.StateError$("Sending on closed stream"));
    if (!this.get$_mayFireState()) {
      this._addPendingEvent$1($._DelayedData$(value));
      return;
    }
    if (this.get$_hasPendingEvent())
      this._addPendingEvent$1($._DelayedData$(value));
    else
      this._sendData$1(value);
    this._handlePendingEvents$0();
  },
  get$_liblib0$_add: function() {
    return new $.BoundClosure$1(this, "_liblib0$_add$1");
  },
  _addError$1: function(error) {
    if (this.get$_liblib0$_isClosed())
      throw $.$$throw($.StateError$("Sending on closed stream"));
    if (!this.get$_mayFireState()) {
      this._addPendingEvent$1($._DelayedError$(error));
      return;
    }
    if (this.get$_hasPendingEvent())
      this._addPendingEvent$1($._DelayedError$(error));
    else
      this._sendError$1(error);
    this._handlePendingEvents$0();
  },
  get$_addError: function() {
    return new $.BoundClosure$1(this, "_addError$1");
  },
  _close$0: function() {
    if (this.get$_liblib0$_isClosed())
      return;
    this._state = $.$or$n(this._state, 1);
    if (!this.get$_mayFireState()) {
      this._addPendingEvent$1($.C__DelayedDone);
      return;
    }
    if (this.get$_hasPendingEvent()) {
      this._addPendingEvent$1($._DelayedDone$());
      this._handlePendingEvents$0();
    } else
      this._sendDone$0();
  },
  get$_close: function() {
    return new $.BoundClosure$0(this, "_close$0");
  },
  get$_liblib0$_isClosed: function() {
    return $.$and$n(this._state, 1) !== 0;
  },
  get$_isComplete: function() {
    return $.$and$n(this._state, 2) !== 0;
  },
  get$_isPaused: function() {
    var t1 = this._state;
    if (typeof t1 !== "number")
      return this.get$_isPaused$bailout(1, t1);
    return t1 >= 64;
  },
  get$_isPaused$bailout: function(state0, t1) {
    return $.$ge$n(t1, 64);
  },
  get$_isInputPaused: function() {
    var t1 = this._state;
    if (typeof t1 !== "number")
      return this.get$_isInputPaused$bailout(1, t1);
    return t1 >= 32;
  },
  get$_isInputPaused$bailout: function(state0, t1) {
    return $.$ge$n(t1, 32);
  },
  get$_hasPendingResume: function() {
    return $.$and$n(this._state, 32) !== 0;
  },
  get$_isInactive: function() {
    return $.$and$n(this._state, 24) === 0;
  },
  get$_isInCallback: function() {
    return $.$and$n(this._state, 16) !== 0;
  },
  get$_isFiring: function() {
    return $.$and$n(this._state, 8) !== 0;
  },
  get$_hasPendingEvent: function() {
    var t1 = this._pendingEvents;
    return t1 != null && t1.get$isEmpty(t1) !== true;
  },
  get$_currentEventIdBit: function() {
    var t1 = this._state;
    if (typeof t1 !== "number")
      return this.get$_currentEventIdBit$bailout(1, t1);
    return $.JSInt_methods.$shr(t1 & 4, 2);
  },
  get$_currentEventIdBit$bailout: function(state0, t1) {
    return $.JSInt_methods.$shr($.$and$n(t1, 4), 2);
  },
  get$_mayFireState: function() {
    return $.$and$n(this._state, 4294967256) === 0;
  },
  _incrementPauseCount$1: function(listener) {
    listener._incrementPauseCount$0();
    this._state = $.$and$n(this._state, 4294967263);
    this._updatePauseCount$1(1);
  },
  _decrementPauseCount$1: function(listener) {
    listener._decrementPauseCount$0();
    this._updatePauseCount$1(-1);
  },
  _updatePauseCount$1: function(by) {
    var oldState = this._state;
    if (by >= 0)
      this._state = $.$add$ns(oldState, by << 6 >>> 0);
    else
      this._state = $.$sub$n(oldState, -by << 6 >>> 0);
  },
  _startFiring$0: function() {
    this._state = $.$xor$n(this._state, 12);
  },
  _endFiring$1: function(wasInputPaused) {
    this._state = $.$xor$n(this._state, 8);
    this._checkCallbacks$2(true, wasInputPaused);
  },
  _pause$2: function(listener, resumeSignal) {
    var wasInputPaused, wasPaused;
    if (!listener.get$_isSubscribed())
      throw $.$$throw($.StateError$("Subscription has been canceled."));
    wasInputPaused = this.get$_isInputPaused();
    wasPaused = this.get$_isPaused();
    this._incrementPauseCount$1(listener);
    if (resumeSignal != null)
      resumeSignal.whenComplete$1(new $._StreamImpl__pause_anon(this, listener));
    if (wasPaused !== true && this.get$_hasPendingEvent() && this._pendingEvents.get$isScheduled())
      this._pendingEvents.cancelSchedule$0();
    if (this.get$_isInactive() && wasInputPaused !== true) {
      this._checkCallbacks$2(true, false);
      if (this.get$_isPaused() !== true && this.get$_hasPendingEvent())
        this._pendingEvents.schedule$1(this);
    }
  },
  _resume$2: function(listener, fromEvent) {
    if (!listener.get$isPaused())
      return;
    this._decrementPauseCount$1(listener);
    if (this.get$_isPaused() !== true)
      if (this.get$_hasPendingEvent()) {
        this._state = $.$or$n(this._state, 32);
        if (this.get$_isInactive())
          if (fromEvent)
            this._handlePendingEvents$0();
          else
            this._pendingEvents.schedule$1(this);
      } else if (this.get$_isInactive()) {
        this._checkCallbacks$2(true, true);
        if (this.get$_isPaused() !== true && this.get$_hasPendingEvent())
          if (fromEvent)
            this._handlePendingEvents$0();
          else
            this._pendingEvents.schedule$1(this);
      }
  },
  _checkCallbacks$2: function(hadSubscribers, wasPaused) {
    var hasSubscribers, isPaused;
    if (this.get$_isInCallback())
      return;
    if (this.get$_hasPendingResume() && !this.get$_hasPendingEvent())
      this._state = $.$xor$n(this._state, 32);
    this._state = $.$or$n(this._state, 16);
    for (; true; wasPaused = isPaused, hadSubscribers = hasSubscribers) {
      hasSubscribers = this.get$_hasSubscribers();
      isPaused = this.get$_isInputPaused();
      if (!$.$eq(hadSubscribers, hasSubscribers))
        this._onSubscriptionStateChange$0();
      else if ($.$eq(isPaused, wasPaused) !== true)
        this._onPauseStateChange$0();
      else {
        this._state = $.$xor$n(this._state, 16);
        return;
      }
    }
  },
  _onPauseStateChange$0: function() {
  },
  _onSubscriptionStateChange$0: function() {
  },
  _addPendingEvent$1: function($event) {
    var events;
    if (this._pendingEvents == null)
      this._pendingEvents = $._StreamImplEvents$();
    events = this._pendingEvents;
    events.add$1(events, $event);
    if (this.get$_isPaused() === true || this.get$_isFiring())
      return;
    if (this.get$_isInCallback()) {
      this._pendingEvents.schedule$1(this);
      return;
    }
  },
  _handlePendingEvents$0: function() {
    if (!this.get$_hasPendingEvent())
      return;
    var events = this._pendingEvents;
    do {
      if (this.get$_isPaused() === true)
        return;
      if (events.get$isScheduled())
        events.cancelSchedule$0();
      events.handleNext$1(this);
    } while (events.get$isEmpty(events) !== true);
  },
  _sendData$1: function(value) {
    if (this.get$_hasSubscribers() !== true)
      return;
    this._forEachSubscriber$1(new $._StreamImpl__sendData_anon(value));
  },
  _sendError$1: function(error) {
    if (this.get$_hasSubscribers() !== true)
      return;
    this._forEachSubscriber$1(new $._StreamImpl__sendError_anon(error));
  },
  _sendDone$0: function() {
    this._state = $.$or$n(this._state, 2);
    if (this.get$_hasSubscribers() !== true)
      return;
    this._forEachSubscriber$1(new $._StreamImpl__sendDone_anon(this));
  },
  $asStream: null
};

$$._StreamImpl__pause_anon = {"": "Closure;this_0,listener_1",
  call$0: function() {
    this.this_0._resume$2(this.listener_1, true);
  }
};

$$._StreamImpl__sendData_anon = {"": "Closure;value_0",
  call$1: function(subscriber) {
    var e, e0, s, exception, t1;
    try {
      subscriber._sendData$1(this.value_0);
    } catch (exception) {
      t1 = $.unwrapException(exception);
      if (typeof t1 === "object" && t1 !== null && !!t1.$isAsyncError) {
        e = t1;
        e.throwDelayed$0();
      } else {
        e0 = t1;
        s = $.getTraceFromException(exception);
        $.AsyncError$(e0, s).throwDelayed$0();
      }
    }

  }
};

$$._StreamImpl__sendError_anon = {"": "Closure;error_0",
  call$1: function(subscriber) {
    var e, e0, s, exception, t1;
    try {
      subscriber._sendError$1(this.error_0);
    } catch (exception) {
      t1 = $.unwrapException(exception);
      if (typeof t1 === "object" && t1 !== null && !!t1.$isAsyncError) {
        e = t1;
        e.throwDelayed$0();
      } else {
        e0 = t1;
        s = $.getTraceFromException(exception);
        $.AsyncError$withCause(e0, s, this.error_0).throwDelayed$0();
      }
    }

  }
};

$$._StreamImpl__sendDone_anon = {"": "Closure;this_0",
  call$1: function(subscriber) {
    var e, e0, s, exception, t1;
    this.this_0._cancel$1(subscriber);
    try {
      subscriber._sendDone$0();
    } catch (exception) {
      t1 = $.unwrapException(exception);
      if (typeof t1 === "object" && t1 !== null && !!t1.$isAsyncError) {
        e = t1;
        e.throwDelayed$0();
      } else {
        e0 = t1;
        s = $.getTraceFromException(exception);
        $.AsyncError$(e0, s).throwDelayed$0();
      }
    }

  }
};

$$._SingleStreamImpl = {"": "_StreamImpl;",
  get$_hasSubscribers: function() {
    return this._subscriber != null;
  },
  _createSubscription$4: function(onData, onError, onDone, unsubscribeOnError) {
    return $._StreamSubscriptionImpl$(this, onData, onError, onDone, unsubscribeOnError);
  },
  _addListener$1: function(subscription) {
    if (this.get$_hasSubscribers() === true)
      throw $.$$throw($.StateError$("Stream already has subscriber."));
    this._updatePauseCount$1(-1);
    this._subscriber = subscription;
    subscription._setSubscribed$1(0);
    if (this.get$_isInactive()) {
      this._checkCallbacks$2(false, true);
      if (this.get$_isPaused() !== true && this.get$_hasPendingEvent())
        this._pendingEvents.schedule$1(this);
    }
  },
  _cancel$1: function(subscriber) {
    var t1, resumeCount;
    t1 = this._subscriber;
    if (t1 == null ? subscriber != null : t1 !== subscriber)
      return;
    this._subscriber = null;
    resumeCount = subscriber._setUnsubscribed$0();
    t1 = -resumeCount;
    this._updatePauseCount$1(this.get$_isComplete() ? t1 : t1 + 1);
    if (this.get$_isInactive()) {
      this._checkCallbacks$2(true, resumeCount > 0);
      if (this.get$_isPaused() !== true && this.get$_hasPendingEvent())
        this._pendingEvents.schedule$1(this);
    }
  },
  _forEachSubscriber$1: function(action) {
    var wasInputPaused, subscription;
    wasInputPaused = this.get$_isInputPaused();
    subscription = this._subscriber;
    this._startFiring$0();
    action.call$1(subscription);
    this._endFiring$1(wasInputPaused);
  },
  _SingleStreamImpl$0: function(T) {
    this._updatePauseCount$1(1);
  },
  $as_StreamImpl: null
};

$$._MultiStreamImpl = {"": "_StreamImpl;_nextLink@,_previousLink@",
  get$isBroadcast: function() {
    return true;
  },
  asBroadcastStream$0: function() {
    return this;
  },
  get$_hasSubscribers: function() {
    return !$._InternalLinkList_isEmpty(this);
  },
  _createSubscription$4: function(onData, onError, onDone, unsubscribeOnError) {
    return $._StreamSubscriptionImpl$(this, onData, onError, onDone, unsubscribeOnError);
  },
  _forEachSubscriber$1: function(action) {
    var wasInputPaused, cursor, cursor0;
    if (!this.get$_hasSubscribers())
      return;
    wasInputPaused = this.get$_isInputPaused();
    this._startFiring$0();
    cursor = this._nextLink;
    for (; cursor !== this; cursor = cursor0) {
      if (cursor._needsEvent$1(this.get$_currentEventIdBit())) {
        action.call$1(cursor);
        cursor._toggleEventReceived$0();
      }
      cursor0 = cursor.get$_nextLink();
      if (cursor.get$_isPendingUnsubscribe())
        this._removeListener$1(cursor);
    }
    this._endFiring$1(wasInputPaused);
  },
  _addListener$1: function(listener) {
    var hadSubscribers;
    listener._setSubscribed$1(this.get$_currentEventIdBit());
    hadSubscribers = this.get$_hasSubscribers();
    $._InternalLinkList_add(this, listener);
    if (!hadSubscribers && this.get$_isInactive()) {
      this._checkCallbacks$2(false, false);
      if (this.get$_isPaused() !== true && this.get$_hasPendingEvent())
        this._pendingEvents.schedule$1(this);
    }
  },
  _cancel$1: function(listener) {
    var t1, wasInputPaused;
    t1 = listener.get$_nextLink();
    if (listener == null ? t1 == null : listener === t1)
      return;
    if (this.get$_isFiring())
      if (listener._needsEvent$1(this.get$_currentEventIdBit()))
        listener._setPendingUnsubscribe$1(this.get$_currentEventIdBit());
      else
        this._removeListener$1(listener);
    else {
      wasInputPaused = this.get$_isInputPaused();
      this._removeListener$1(listener);
      if (this.get$_isInactive()) {
        this._checkCallbacks$2(true, wasInputPaused);
        if (this.get$_isPaused() !== true && this.get$_hasPendingEvent())
          this._pendingEvents.schedule$1(this);
      }
    }
  },
  _removeListener$1: function(listener) {
    var pauseCount, t1;
    pauseCount = listener._setUnsubscribed$0();
    $._InternalLink_unlink(listener);
    if (pauseCount > 0) {
      this._updatePauseCount$1(-pauseCount);
      if (this.get$_isPaused() !== true && this.get$_hasPendingEvent()) {
        t1 = this._state;
        if (typeof t1 !== "number")
          return this._removeListener$1$bailout(1, t1);
        this._state = (t1 | 32) >>> 0;
      }
    }
  },
  _removeListener$1$bailout: function(state0, t1) {
    switch (state0) {
      case 0:
        pauseCount = listener._setUnsubscribed$0();
        $._InternalLink_unlink(listener);
      case 1:
        var pauseCount;
        if (state0 === 1 || state0 === 0 && pauseCount > 0)
          switch (state0) {
            case 0:
              this._updatePauseCount$1(-pauseCount);
            case 1:
              if (state0 === 1 || state0 === 0 && this.get$_isPaused() !== true && this.get$_hasPendingEvent())
                switch (state0) {
                  case 0:
                    t1 = this._state;
                  case 1:
                    state0 = 0;
                    this._state = $.$or$n(t1, 32);
                }
          }
    }
  },
  _MultiStreamImpl$0: function(T) {
    this._previousLink = this;
    this._nextLink = this;
  },
  $as_StreamImpl: null
};

$$._StreamSubscriptionImpl = {"": "_StreamListener;_unsubscribeOnError,_liblib0$_onData,_onError,_onDone,_liblib0$_source,_state,_nextLink,_previousLink",
  _liblib0$_onData$1: function(arg0) {
    return this._liblib0$_onData.call$1(arg0);
  },
  _onError$1: function(arg0) {
    return this._onError.call$1(arg0);
  },
  _onDone$0: function() {
    return this._onDone.call$0();
  },
  onError$1: function(_, handleError) {
    this._onError = handleError == null ? $._nullErrorHandler : handleError;
  },
  get$onError: function(receiver) {
    return new $.BoundClosure$i1(this, "onError$1", receiver);
  },
  _sendData$1: function(data) {
    this._liblib0$_onData$1(data);
  },
  _sendError$1: function(error) {
    this._onError$1(error);
    if (this._unsubscribeOnError)
      this._liblib0$_source._cancel$1(this);
  },
  _sendDone$0: function() {
    this._onDone$0();
  },
  cancel$0: function() {
    this._liblib0$_source._cancel$1(this);
  },
  pause$1: function(_, resumeSignal) {
    this._liblib0$_source._pause$2(this, resumeSignal);
  },
  pause$0: function($receiver) {
    return this.pause$1($receiver, null);
  }
};

$$._DelayedEvent = {"": "Object0;next@"};

$$._DelayedData = {"": "_DelayedEvent;value,next",
  perform$1: function(stream) {
    stream._sendData$1(this.value);
  }
};

$$._DelayedError = {"": "_DelayedEvent;error>,next",
  perform$1: function(stream) {
    stream._sendError$1(this.error);
  }
};

$$._DelayedDone = {"": "Object0;",
  perform$1: function(stream) {
    stream._sendDone$0();
  },
  get$next: function() {
    return;
  },
  set$next: function(_) {
    throw $.$$throw($.StateError$("No events after a done."));
  }
};

$$._InternalLink = {"": "Object0;_nextLink@,_previousLink@",
  _InternalLink$0: function() {
    this._nextLink = this;
    this._previousLink = this;
  }
};

$$._StreamListener = {"": "_InternalLink;_state@",
  get$isPaused: function() {
    return this._state >= 8;
  },
  get$_isPendingUnsubscribe: function() {
    return (this._state & 2) !== 0;
  },
  get$_isSubscribed: function() {
    return (this._state & 1) !== 0;
  },
  _needsEvent$1: function(currentEventIdBit) {
    return $.JSInt_methods.$shr(this._state & 4, 2) !== currentEventIdBit;
  },
  _toggleEventReceived$0: function() {
    this._state = (this._state ^ 4) >>> 0;
  },
  _setSubscribed$1: function(eventIdBit) {
    this._state = (1 | eventIdBit << 2) >>> 0;
  },
  _setPendingUnsubscribe$1: function(currentEventIdBit) {
    this._state = (this._state | 6) >>> 0;
    this._state = (this._state ^ (1 ^ currentEventIdBit) << 2) >>> 0;
  },
  _setUnsubscribed$0: function() {
    var timesPaused = $.JSNumber_methods.$shr(this._state, 3);
    this._state = 0;
    return timesPaused;
  },
  _incrementPauseCount$0: function() {
    this._state = this._state + 8;
  },
  _decrementPauseCount$0: function() {
    this._state = this._state - 8;
  }
};

$$._PendingEvents = {"": "Object0;scheduleTimer?",
  get$isScheduled: function() {
    return this.scheduleTimer != null;
  },
  schedule$1: function(stream) {
    if (this.get$isScheduled())
      return;
    this.scheduleTimer = $.Timer_Timer($.Duration_0, new $._PendingEvents_schedule_anon(this, stream));
  },
  cancelSchedule$0: function() {
    this.scheduleTimer.cancel$0();
    this.scheduleTimer = null;
  }
};

$$._PendingEvents_schedule_anon = {"": "Closure;this_0,stream_1",
  call$0: function() {
    this.this_0.set$scheduleTimer(null);
    this.stream_1._handlePendingEvents$0();
  }
};

$$._StreamImplEvents = {"": "_PendingEvents;firstPendingEvent,lastPendingEvent,scheduleTimer",
  get$isEmpty: function(_) {
    return this.lastPendingEvent == null;
  },
  get$isScheduled: function() {
    return this.scheduleTimer != null;
  },
  add$1: function(_, $event) {
    var t1 = this.lastPendingEvent;
    if (t1 == null) {
      this.lastPendingEvent = $event;
      this.firstPendingEvent = $event;
    } else {
      t1.set$next($event);
      this.lastPendingEvent = $event;
    }
  },
  handleNext$1: function(stream) {
    var $event = this.firstPendingEvent;
    this.firstPendingEvent = $event.get$next();
    if (this.firstPendingEvent == null)
      this.lastPendingEvent = null;
    $event.perform$1(stream);
  }
};

$$._DoneSubscription = {"": "Object0;_handler<,_timer,_liblib0$_pauseCount",
  _handler$0: function() {
    return this._handler.call$0();
  },
  _delayDone$0: function() {
    this._timer = $.Timer_Timer($.Duration_0, new $._DoneSubscription__delayDone_anon(this));
  },
  get$_isComplete: function() {
    return this._timer == null && this._liblib0$_pauseCount === 0;
  },
  onError$1: function(_, handleError) {
  },
  get$onError: function(receiver) {
    return new $.BoundClosure$i1(this, "onError$1", receiver);
  },
  pause$1: function(_, signal) {
    var t1;
    if (this.get$_isComplete())
      throw $.$$throw($.StateError$("Subscription has been canceled."));
    t1 = this._timer;
    if (t1 != null) {
      t1.cancel$0();
      this._timer = null;
    }
    this._liblib0$_pauseCount = this._liblib0$_pauseCount + 1;
    if (signal != null)
      signal.whenComplete$1(this.get$resume());
  },
  pause$0: function($receiver) {
    return this.pause$1($receiver, null);
  },
  resume$0: function() {
    if (this.get$_isComplete())
      throw $.$$throw($.StateError$("Subscription has been canceled."));
    var t1 = this._liblib0$_pauseCount;
    if (t1 === 0)
      return;
    this._liblib0$_pauseCount = t1 - 1;
    if (this._liblib0$_pauseCount === 0)
      this._delayDone$0();
  },
  get$resume: function() {
    return new $.BoundClosure$0(this, "resume$0");
  },
  cancel$0: function() {
    if (this.get$_isComplete())
      throw $.$$throw($.StateError$("Subscription has been canceled."));
    var t1 = this._timer;
    if (t1 != null) {
      t1.cancel$0();
      this._timer = null;
    }
    this._liblib0$_pauseCount = 0;
  },
  _DoneSubscription$1: function(_handler) {
    this._delayDone$0();
  }
};

$$._DoneSubscription__delayDone_anon = {"": "Closure;this_0",
  call$0: function() {
    var t1 = this.this_0;
    if (t1.get$_handler() != null)
      t1._handler$0();
  }
};

$$._SingleStreamMultiplexer = {"": "_MultiStreamImpl;_liblib0$_source,_subscription,_nextLink,_previousLink,_state,_pendingEvents",
  _onSubscriptionStateChange$0: function() {
    var t1, t2;
    if (this.get$_hasSubscribers()) {
      t1 = this.get$_liblib0$_add();
      t2 = this.get$_addError();
      this._subscription = this._liblib0$_source.listen$3$onDone$onError(t1, this.get$_close(), t2);
    } else {
      t1 = this._subscription;
      if (t1 == null)
        return;
      t1.cancel$0();
      this._subscription = null;
    }
  },
  $as_MultiStreamImpl: null
};

$$._cancelAndError_anon = {"": "Closure;subscription_0,future_1",
  call$1: function(error) {
    this.subscription_0.cancel$0();
    this.future_1._setError$1(error);
  }
};

$$.Timer_run_anon = {"": "Closure;",
  call$0: function() {
    var runCallbacks, i, callback, newCallbacks, exception;
    runCallbacks = $.get$Timer__runCallbacks();
    $.Timer__runCallbacks = [];
    for (i = 0; $.$lt$n(i, $.get$length$asx(runCallbacks)) === true; i = $.$add$ns(i, 1)) {
      callback = $.$index$asx(runCallbacks, i);
      try {
        callback.call$0();
      } catch (exception) {
        $.unwrapException(exception);
        newCallbacks = $.get$Timer__runCallbacks();
        $.Timer__runCallbacks = [];
        i = $.$add$ns(i, 1);
        $.addAll$1$ax($.get$Timer__runCallbacks(), $.sublist$1$ax(runCallbacks, i));
        $.addAll$1$ax($.get$Timer__runCallbacks(), newCallbacks);
        throw exception;
      }

    }
  }
};

$$.HashMap = {"": "Object0;_liblib1$_length,_strings,_nums,_rest,_keys",
  get$length: function(_) {
    return this._liblib1$_length;
  },
  get$isEmpty: function(_) {
    return this._liblib1$_length === 0;
  },
  get$keys: function() {
    return $.HashMapKeyIterable$(this, $.getRuntimeTypeArgument(this, this["$asHashMap"], 0));
  },
  get$values: function(_) {
    var t1 = this.get$keys();
    return t1.map$1(t1, new $.HashMap_values_anon(this));
  },
  containsKey$1: function(key) {
    var strings, nums, rest;
    if (typeof key === "string" && key !== "__proto__") {
      strings = this._strings;
      return strings == null ? false : $.HashMap__hasTableEntry(strings, key);
    } else if ($.HashMap__isNumericKey(key)) {
      nums = this._nums;
      return nums == null ? false : $.HashMap__hasTableEntry(nums, key);
    } else {
      rest = this._rest;
      if (rest == null)
        return false;
      return $.HashMap__findBucketIndex(rest[$.HashMap__computeHashCode(key)], key) >= 0;
    }
  },
  addAll$1: function(_, other) {
    $.forEach$1$ax(other, new $.HashMap_addAll_anon(this));
  },
  $index: function(_, key) {
    var strings, nums, rest, bucket, index;
    if (typeof key === "string" && key !== "__proto__") {
      strings = this._strings;
      return strings == null ? null : $.HashMap__getTableEntry(strings, key);
    } else if ($.HashMap__isNumericKey(key)) {
      nums = this._nums;
      return nums == null ? null : $.HashMap__getTableEntry(nums, key);
    } else {
      rest = this._rest;
      if (rest == null)
        return;
      bucket = rest[$.HashMap__computeHashCode(key)];
      index = $.HashMap__findBucketIndex(bucket, key);
      return index < 0 ? null : bucket[index + 1];
    }
  },
  $indexSet: function(_, key, value) {
    var strings, nums, rest, hash, bucket, index;
    if (typeof key === "string" && key !== "__proto__") {
      strings = this._strings;
      if (strings == null) {
        strings = this._newHashTable$0();
        this._strings = strings;
      }
      this._addHashTableEntry$3(strings, key, value);
    } else if ($.HashMap__isNumericKey(key)) {
      nums = this._nums;
      if (nums == null) {
        nums = this._newHashTable$0();
        this._nums = nums;
      }
      this._addHashTableEntry$3(nums, key, value);
    } else {
      rest = this._rest;
      if (rest == null) {
        rest = this._newHashTable$0();
        this._rest = rest;
      }
      hash = $.HashMap__computeHashCode(key);
      bucket = rest[hash];
      if (bucket == null) {
        $.HashMap__setTableEntry(rest, hash, [key, value]);
        this._liblib1$_length = this._liblib1$_length + 1;
        this._keys = null;
      } else {
        index = $.HashMap__findBucketIndex(bucket, key);
        if (index >= 0)
          bucket[index + 1] = value;
        else {
          bucket.push(key, value);
          this._liblib1$_length = this._liblib1$_length + 1;
          this._keys = null;
        }
      }
    }
  },
  remove$1: function(_, key) {
    var rest, bucket, index;
    if (typeof key === "string" && key !== "__proto__")
      return this._removeHashTableEntry$2(this._strings, key);
    else if ($.HashMap__isNumericKey(key))
      return this._removeHashTableEntry$2(this._nums, key);
    else {
      rest = this._rest;
      if (rest == null)
        return;
      bucket = rest[$.HashMap__computeHashCode(key)];
      index = $.HashMap__findBucketIndex(bucket, key);
      if (index < 0)
        return;
      this._liblib1$_length = this._liblib1$_length - 1;
      this._keys = null;
      return bucket.splice(index, 2)[1];
    }
  },
  forEach$1: function(_, action) {
    var keys, $length, i, key;
    keys = this._computeKeys$0();
    for ($length = $.get$length$asx(keys), i = 0; i < $length; ++i) {
      key = keys[i];
      action.call$2(key, this.$index(this, key));
      if (keys !== this._keys)
        throw $.$$throw($.ConcurrentModificationError$(this));
    }
  },
  toString$0: function(_) {
    return $.ToString_mapToString(this);
  },
  _computeKeys$0: function() {
    var t1, result, strings, names, entries, index, i, nums, rest, bucket, $length, i0;
    t1 = this._keys;
    if (t1 != null)
      return t1;
    result = $.List_List(this._liblib1$_length, null);
    strings = this._strings;
    if (strings != null) {
      names = Object.getOwnPropertyNames(strings);
      entries = names.length;
      for (index = 0, i = 0; i < entries; ++i) {
        result[index] = names[i];
        ++index;
      }
    } else
      index = 0;
    nums = this._nums;
    if (nums != null) {
      names = Object.getOwnPropertyNames(nums);
      entries = names.length;
      for (i = 0; i < entries; ++i) {
        result[index] = +names[i];
        ++index;
      }
    }
    rest = this._rest;
    if (rest != null) {
      names = Object.getOwnPropertyNames(rest);
      entries = names.length;
      for (i = 0; i < entries; ++i) {
        bucket = rest[names[i]];
        $length = bucket.length;
        for (i0 = 0; i0 < $length; i0 += 2) {
          result[index] = bucket[i0];
          ++index;
        }
      }
    }
    this._keys = result;
    return result;
  },
  _newHashTable$0: function() {
    var table = Object.create(null);
    $.HashMap__setTableEntry(table, "<non-identifier-key>", table);
    delete table["<non-identifier-key>"];
    return table;
  },
  _addHashTableEntry$3: function(table, key, value) {
    if ($.HashMap__hasTableEntry(table, key) !== true) {
      this._liblib1$_length = this._liblib1$_length + 1;
      this._keys = null;
    }
    $.HashMap__setTableEntry(table, key, value);
  },
  _removeHashTableEntry$2: function(table, key) {
    var value;
    if (table != null && $.HashMap__hasTableEntry(table, key)) {
      value = $.HashMap__getTableEntry(table, key);
      delete table[key];
      this._liblib1$_length = this._liblib1$_length - 1;
      this._keys = null;
      return value;
    } else
      return;
  },
  $isMap: true
};

$$.HashSet = {"": "Collection;_table",
  get$iterator: function(_) {
    return $._HashTableKeyIterator$(this._table);
  },
  get$length: function(_) {
    return this._table.get$_elementCount();
  },
  get$isEmpty: function(_) {
    return this._table.get$_elementCount() === 0;
  },
  contains$1: function(_, object) {
    var t1 = this._table._get$1(object);
    if (typeof t1 !== "number")
      return this.contains$1$bailout1(1, t1);
    return t1 >= 0;
  },
  contains$1$bailout1: function(state0, t1) {
    return $.$ge$n(t1, 0);
  },
  get$contains: function(receiver) {
    return new $.BoundClosure$i1(this, "contains$1", receiver);
  },
  add$1: function(_, element) {
    var t1 = this._table;
    t1._put$1(element);
    t1._checkCapacity$0();
  },
  addAll$1: function(_, objects) {
    var t1, t2;
    for (t1 = $.get$iterator$ax(objects), t2 = this._table; t1.moveNext$0();) {
      t2._put$1(t1.get$current());
      t2._checkCapacity$0();
    }
  },
  remove$1: function(_, object) {
    var t1, offset;
    t1 = this._table;
    offset = t1._remove$1(object);
    if (typeof offset !== "number")
      return this.remove$1$bailout1(1, offset, t1);
    t1._checkCapacity$0();
    return offset >= 0;
  },
  remove$1$bailout1: function(state0, offset, t1) {
    t1._checkCapacity$0();
    return $.$ge$n(offset, 0);
  },
  removeAll$1: function(_, objectsToRemove) {
    var t1, t2;
    for (t1 = objectsToRemove.get$iterator(objectsToRemove), t2 = this._table; t1.moveNext$0();) {
      t2._remove$1(t1.get$current());
      t2._checkCapacity$0();
    }
  },
  union$1: function(_, other) {
    var t1 = $.HashSet$($.getRuntimeTypeArgument(this, this["$asHashSet"], 0));
    t1.addAll$1(t1, this);
    t1.addAll$1(t1, other);
    return t1;
  },
  toString$0: function(_) {
    return $.ToString_collectionToString(this);
  },
  HashSet$0: function(E) {
    this._table._container = this;
  },
  $asCollection: function() {
    return null;
  },
  $isCollection: function() {
    return true;
  }
};

$$._DeadEntry = {"": "Object0;"};

$$._NullKey = {"": "Object0;",
  get$hashCode: function(_) {
    return $.JSNull_methods.get$hashCode(null);
  }
};

$$._HashTable = {"": "Object0;_table,_capacity,_entryCount,_deletedCount,_modificationCount,_container",
  _key$1: function(offset) {
    var t1, key;
    t1 = this._table;
    if (typeof t1 !== "object" || t1 === null || (t1.constructor !== Array || !!t1.immutable$list) && !t1.$isJavaScriptIndexingBehavior())
      return this._key$1$bailout(1, offset, t1);
    if (offset !== (offset | 0))
      throw $.iae(offset);
    if (offset < 0 || offset >= t1.length)
      throw $.ioore(offset);
    key = t1[offset];
    if (key !== $.C__NullKey)
      return key;
    return;
  },
  _key$1$bailout: function(state0, offset, t1) {
    var key = $.$index$asx(t1, offset);
    if (key !== $.C__NullKey)
      return key;
    return;
  },
  get$_elementCount: function() {
    return this._entryCount - this._deletedCount;
  },
  get$_entrySize: function() {
    return 1;
  },
  _checkModification$1: function(expectedModificationCount) {
    if (this._modificationCount !== expectedModificationCount)
      throw $.$$throw($.ConcurrentModificationError$(this._container));
  },
  _recordModification$0: function() {
    this._modificationCount = this._modificationCount + 1 & 1073741823;
  },
  _createTable$1: function(capacity) {
    return $.List_List($.$mul$n(capacity, this.get$_entrySize()), null);
  },
  _nextProbe$3: function(previousIndex, probeCount, capacity) {
    if (typeof capacity !== "number")
      return this._nextProbe$3$bailout(1, previousIndex, probeCount, capacity);
    return (previousIndex + probeCount & capacity - 1) >>> 0;
  },
  _nextProbe$3$bailout: function(state0, previousIndex, probeCount, capacity) {
    var t1 = $.$sub$n(capacity, 1);
    if (typeof t1 !== "number")
      throw $.iae(t1);
    return (previousIndex + probeCount & t1) >>> 0;
  },
  _isFree$1: function(marker) {
    return marker == null || marker === $.C__DeadEntry;
  },
  _probeForAdd$2: function(hashCode, object) {
    var entrySize, index, t1, firstTombstone, probeCount, offset, entry;
    entrySize = this.get$_entrySize();
    index = $.$and$n(hashCode, $.$sub$n(this._capacity, 1));
    for (t1 = null == object, firstTombstone = -1, probeCount = 0; true;) {
      offset = index * entrySize;
      entry = $.$index$asx(this._table, offset);
      if (entry === $.C__DeadEntry) {
        if (firstTombstone < 0)
          firstTombstone = offset;
      } else if (entry == null) {
        if (firstTombstone < 0)
          return offset;
        return firstTombstone;
      } else if (($.C__NullKey === entry ? t1 : $.$eq(entry, object)) === true)
        return offset;
      ++probeCount;
      index = this._nextProbe$3(index, probeCount, this._capacity);
    }
  },
  _probeForLookup$2: function(hashCode, object) {
    var entrySize, index, t1, probeCount, offset, entry;
    entrySize = this.get$_entrySize();
    index = $.$and$n(hashCode, $.$sub$n(this._capacity, 1));
    for (t1 = null == object, probeCount = 0; true;) {
      offset = index * entrySize;
      entry = $.$index$asx(this._table, offset);
      if (entry == null)
        return -1;
      else if ($.C__DeadEntry !== entry)
        if (($.C__NullKey === entry ? t1 : $.$eq(entry, object)) === true)
          return offset;
      ++probeCount;
      index = this._nextProbe$3(index, probeCount, this._capacity);
    }
  },
  _checkCapacity$0: function() {
    var t1, t3, freeCount;
    t1 = this._capacity;
    if (typeof t1 !== "number")
      return this._checkCapacity$0$bailout(1, t1);
    t3 = this._entryCount;
    freeCount = t1 - t3;
    if (freeCount * 4 < t1 || freeCount < this._deletedCount)
      this._grow$1(t3 - this._deletedCount);
  },
  _checkCapacity$0$bailout: function(state0, t1, t2, freeCount, t3) {
    switch (state0) {
      case 0:
        t1 = this._capacity;
      case 1:
        state0 = 0;
        freeCount = $.$sub$n(t1, this._entryCount);
        t1 = $.getInterceptor$n(freeCount);
        t2 = t1.$mul(freeCount, 4);
        t3 = this._capacity;
      case 2:
        state0 = 0;
        if ($.$lt$n(t2, t3) === true || t1.$lt(freeCount, this._deletedCount) === true)
          this._grow$1(this._entryCount - this._deletedCount);
    }
  },
  _grow$1: function(contentCount) {
    var capacity, minCapacity, oldTable;
    capacity = this._capacity;
    if (typeof capacity !== "number")
      return this._grow$1$bailout(1, contentCount, capacity);
    minCapacity = contentCount * 2;
    for (; capacity < minCapacity;)
      capacity *= 2;
    oldTable = this._table;
    this._table = this._createTable$1(capacity);
    this._capacity = capacity;
    this._entryCount = 0;
    this._deletedCount = 0;
    this._addAllEntries$1(oldTable);
    this._recordModification$0();
  },
  _grow$1$bailout: function(state0, contentCount, capacity) {
    var minCapacity, t1, oldTable;
    minCapacity = contentCount * 2;
    for (; t1 = $.getInterceptor$n(capacity), t1.$lt(capacity, minCapacity) === true;)
      capacity = t1.$mul(capacity, 2);
    oldTable = this._table;
    this._table = this._createTable$1(capacity);
    this._capacity = capacity;
    this._entryCount = 0;
    this._deletedCount = 0;
    this._addAllEntries$1(oldTable);
    this._recordModification$0();
  },
  _addAllEntries$1: function(oldTable) {
    var t1, i, object;
    if (typeof oldTable !== "object" || oldTable === null || (oldTable.constructor !== Array || !!oldTable.immutable$list) && !oldTable.$isJavaScriptIndexingBehavior())
      return this._addAllEntries$1$bailout(1, oldTable);
    for (t1 = oldTable.length, i = 0; i < t1; i += this.get$_entrySize()) {
      if (i < 0)
        throw $.ioore(i);
      object = oldTable[i];
      if (!(object == null || object === $.C__DeadEntry))
        this._copyEntry$3(oldTable, i, this._put$1(object));
    }
  },
  _addAllEntries$1$bailout: function(state0, oldTable) {
    var t1, i, object;
    for (t1 = $.getInterceptor$asx(oldTable), i = 0; i < t1.get$length(oldTable); i += this.get$_entrySize()) {
      object = t1.$index(oldTable, i);
      if (!(object == null || object === $.C__DeadEntry))
        this._copyEntry$3(oldTable, i, this._put$1(object));
    }
  },
  _copyEntry$3: function(fromTable, fromOffset, toOffset) {
  },
  _get$1: function(key) {
    return this._probeForLookup$2($.get$hashCode$(key), key);
  },
  _put$1: function(key) {
    var offset, t1, oldEntry;
    offset = this._probeForAdd$2($.get$hashCode$(key), key);
    t1 = this._table;
    if (typeof t1 !== "object" || t1 === null || (t1.constructor !== Array || !!t1.immutable$list) && !t1.$isJavaScriptIndexingBehavior())
      return this._put$1$bailout(1, key, t1, offset);
    if (offset !== (offset | 0))
      throw $.iae(offset);
    if (offset < 0 || offset >= t1.length)
      throw $.ioore(offset);
    oldEntry = t1[offset];
    if (oldEntry == null)
      this._entryCount = this._entryCount + 1;
    else if (oldEntry === $.C__DeadEntry)
      this._deletedCount = this._deletedCount - 1;
    else
      return offset;
    if (key == null)
      key = $.C__NullKey;
    t1 = this._table;
    if (typeof t1 !== "object" || t1 === null || (t1.constructor !== Array || !!t1.immutable$list) && !t1.$isJavaScriptIndexingBehavior())
      return this._put$1$bailout(2, key, t1, offset);
    if (offset >= t1.length)
      throw $.ioore(offset);
    t1[offset] = key;
    this._recordModification$0();
    return offset;
  },
  _put$1$bailout: function(state0, key, t1, offset) {
    switch (state0) {
      case 0:
        offset = this._probeForAdd$2($.get$hashCode$(key), key);
        t1 = this._table;
      case 1:
        state0 = 0;
        oldEntry = $.$index$asx(t1, offset);
        if (oldEntry == null)
          this._entryCount = this._entryCount + 1;
        else if (oldEntry === $.C__DeadEntry)
          this._deletedCount = this._deletedCount - 1;
        else
          return offset;
        if (key == null)
          key = $.C__NullKey;
        t1 = this._table;
      case 2:
        var oldEntry;
        state0 = 0;
        $.$indexSet$ax(t1, offset, key);
        this._recordModification$0();
        return offset;
    }
  },
  _remove$1: function(key) {
    var offset = this._probeForLookup$2($.get$hashCode$(key), key);
    if (typeof offset !== "number")
      return this._remove$1$bailout(1, offset);
    if (offset >= 0)
      this._deleteEntry$1(offset);
    return offset;
  },
  _remove$1$bailout: function(state0, offset) {
    if ($.$ge$n(offset, 0))
      this._deleteEntry$1(offset);
    return offset;
  },
  _deleteEntry$1: function(offset) {
    var key, t1;
    key = $.C__DeadEntry;
    t1 = this._table;
    if (typeof t1 !== "object" || t1 === null || (t1.constructor !== Array || !!t1.immutable$list) && !t1.$isJavaScriptIndexingBehavior())
      return this._deleteEntry$1$bailout(1, offset, t1, key);
    if (offset !== (offset | 0))
      throw $.iae(offset);
    if (offset < 0 || offset >= t1.length)
      throw $.ioore(offset);
    t1[offset] = key;
    this._deletedCount = this._deletedCount + 1;
    this._recordModification$0();
  },
  _deleteEntry$1$bailout: function(state0, offset, t1, key) {
    $.$indexSet$ax(t1, offset, key);
    this._deletedCount = this._deletedCount + 1;
    this._recordModification$0();
  },
  _HashTable$1: function(initialCapacity) {
    this._table = this._createTable$1(initialCapacity);
  }
};

$$._HashTableIterator = {"": "Object0;_hashTable<",
  moveNext$0: function() {
    var t1, table, entrySize, t2, t3, entry;
    t1 = this._hashTable;
    t1._checkModification$1(this._modificationCount);
    table = t1._table;
    if (typeof table !== "object" || table === null || (table.constructor !== Array || !!table.immutable$list) && !table.$isJavaScriptIndexingBehavior())
      return this.moveNext$0$bailout(1, table, t1);
    entrySize = t1.get$_entrySize();
    for (t2 = table.length; t3 = this._offset, t3 < t2;) {
      if (t3 !== (t3 | 0))
        throw $.iae(t3);
      if (t3 < 0 || t3 >= t2)
        throw $.ioore(t3);
      entry = table[t3];
      this._offset = t3 + entrySize;
      if (!t1._isFree$1(entry)) {
        this._liblib1$_current = this._valueAt$2(t3, entry);
        return true;
      }
    }
    this._liblib1$_current = null;
    return false;
  },
  moveNext$0$bailout: function(state0, table, t1) {
    var entrySize, t2, currentOffset, entry;
    entrySize = t1.get$_entrySize();
    for (t2 = $.getInterceptor$asx(table); this._offset < t2.get$length(table);) {
      currentOffset = this._offset;
      entry = t2.$index(table, currentOffset);
      this._offset = currentOffset + entrySize;
      if (!t1._isFree$1(entry)) {
        this._liblib1$_current = this._valueAt$2(currentOffset, entry);
        return true;
      }
    }
    this._liblib1$_current = null;
    return false;
  },
  get$current: function() {
    return this._liblib1$_current;
  }
};

$$._HashTableKeyIterator = {"": "_HashTableIterator;_hashTable,_modificationCount,_offset,_liblib1$_current",
  _valueAt$2: function(offset, key) {
    if (key === $.C__NullKey)
      return;
    return key;
  }
};

$$._LinkedHashMapTable = {"": "_LinkedHashTable;_table,_capacity,_entryCount,_deletedCount,_modificationCount,_container",
  get$_entrySize: function() {
    return 4;
  },
  _value$1: function(offset) {
    var t1, t3;
    if (typeof offset !== "number")
      return this._value$1$bailout(1, offset);
    t1 = this._table;
    if (typeof t1 !== "object" || t1 === null || (t1.constructor !== Array || !!t1.immutable$list) && !t1.$isJavaScriptIndexingBehavior())
      return this._value$1$bailout(2, offset, t1);
    t3 = offset + 3;
    if (t3 !== (t3 | 0))
      throw $.iae(t3);
    if (t3 < 0 || t3 >= t1.length)
      throw $.ioore(t3);
    return t1[t3];
  },
  _value$1$bailout: function(state0, offset, t1) {
    switch (state0) {
      case 0:
      case 1:
        state0 = 0;
        t1 = this._table;
      case 2:
        state0 = 0;
        return $.$index$asx(t1, $.$add$ns(offset, 3));
    }
  },
  _setValue$2: function(offset, value) {
    $.$indexSet$ax(this._table, $.$add$ns(offset, 3), value);
  },
  _copyEntry$3: function(oldTable, fromOffset, toOffset) {
    var t1, t3, t4;
    if (typeof oldTable !== "object" || oldTable === null || (oldTable.constructor !== Array || !!oldTable.immutable$list) && !oldTable.$isJavaScriptIndexingBehavior())
      return this._copyEntry$3$bailout1(1, oldTable, fromOffset, toOffset);
    if (typeof fromOffset !== "number")
      return this._copyEntry$3$bailout1(1, oldTable, fromOffset, toOffset);
    if (typeof toOffset !== "number")
      return this._copyEntry$3$bailout1(1, oldTable, fromOffset, toOffset);
    t1 = this._table;
    if (typeof t1 !== "object" || t1 === null || (t1.constructor !== Array || !!t1.immutable$list) && !t1.$isJavaScriptIndexingBehavior())
      return this._copyEntry$3$bailout1(2, oldTable, fromOffset, toOffset, t1);
    t3 = toOffset + 3;
    t4 = fromOffset + 3;
    if (t4 !== (t4 | 0))
      throw $.iae(t4);
    if (t4 < 0 || t4 >= oldTable.length)
      throw $.ioore(t4);
    t4 = oldTable[t4];
    if (t3 !== (t3 | 0))
      throw $.iae(t3);
    if (t3 < 0 || t3 >= t1.length)
      throw $.ioore(t3);
    t1[t3] = t4;
  },
  _copyEntry$3$bailout1: function(state0, oldTable, fromOffset, toOffset, t1) {
    switch (state0) {
      case 0:
      case 1:
        state0 = 0;
        t1 = this._table;
      case 2:
        state0 = 0;
        $.$indexSet$ax(t1, $.$add$ns(toOffset, 3), $.$index$asx(oldTable, $.$add$ns(fromOffset, 3)));
    }
  }
};

$$.LinkedHashMap = {"": "Object0;_hashTable<",
  containsKey$1: function(key) {
    return $.$ge$n(this._hashTable._get$1(key), 0);
  },
  addAll$1: function(_, other) {
    $.forEach$1$ax(other, new $.LinkedHashMap_addAll_anon(this));
  },
  $index: function(_, key) {
    var t1, offset;
    t1 = this._hashTable;
    offset = t1._get$1(key);
    if ($.$ge$n(offset, 0))
      return t1._value$1(offset);
    return;
  },
  $indexSet: function(_, key, value) {
    var t1 = this._hashTable;
    t1._setValue$2(t1._put$1(key), value);
    t1._checkCapacity$0();
  },
  remove$1: function(_, key) {
    var t1, offset, oldValue;
    t1 = this._hashTable;
    offset = t1._remove$1(key);
    if ($.$lt$n(offset, 0))
      return;
    oldValue = t1._value$1(offset);
    t1._setValue$2(offset, null);
    t1._checkCapacity$0();
    return oldValue;
  },
  forEach$1: function(_, action) {
    var t1, modificationCount, offset;
    t1 = this._hashTable;
    modificationCount = t1._modificationCount;
    offset = t1._next$1(0);
    if (typeof offset !== "number")
      return this.forEach$1$bailout(1, action, t1, modificationCount, offset);
    for (; !$.$eq(offset, 0); offset = t1._next$1(offset)) {
      action.call$2(t1._key$1(offset), t1._value$1(offset));
      t1._checkModification$1(modificationCount);
    }
  },
  forEach$1$bailout: function(state0, action, t1, modificationCount, offset) {
    for (; $.$eq(offset, 0) !== true; offset = t1._next$1(offset)) {
      action.call$2(t1._key$1(offset), t1._value$1(offset));
      t1._checkModification$1(modificationCount);
    }
  },
  get$keys: function() {
    return $._LinkedHashTableKeyIterable$(this._hashTable, $.getRuntimeTypeArgument(this, this["$asLinkedHashMap"], 0));
  },
  get$values: function(_) {
    return $._LinkedHashTableValueIterable$(this._hashTable, 3, $.getRuntimeTypeArgument(this, this["$asLinkedHashMap"], 1));
  },
  get$length: function(_) {
    return this._hashTable.get$_elementCount();
  },
  get$isEmpty: function(_) {
    return this._hashTable.get$_elementCount() === 0;
  },
  toString$0: function(_) {
    return $.ToString_mapToString(this);
  },
  LinkedHashMap$0: function(K, V) {
    this._hashTable._container = this;
  },
  $isMap: true
};

$$.LinkedHashMap_addAll_anon = {"": "Closure;this_0",
  call$2: function(key, value) {
    var t1, offset;
    t1 = this.this_0;
    offset = t1.get$_hashTable()._put$1(key);
    t1.get$_hashTable()._setValue$2(offset, value);
    t1.get$_hashTable()._checkCapacity$0();
  }
};

$$._LinkedHashTableHeadMarker = {"": "Object0;"};

$$._LinkedHashTable = {"": "_HashTable;",
  get$_entrySize: function() {
    return 3;
  },
  _createTable$1: function(capacity) {
    var result, t1;
    result = $.List_List($.$mul$n(capacity, this.get$_entrySize()), null);
    t1 = result.length;
    if (0 >= t1)
      throw $.ioore(0);
    result[0] = $.C__LinkedHashTableHeadMarker;
    if (1 >= t1)
      throw $.ioore(1);
    result[1] = 0;
    if (2 >= t1)
      throw $.ioore(2);
    result[2] = 0;
    return result;
  },
  _next$1: function(offset) {
    var t1, t3;
    if (typeof offset !== "number")
      return this._next$1$bailout(1, offset);
    t1 = this._table;
    if (typeof t1 !== "object" || t1 === null || (t1.constructor !== Array || !!t1.immutable$list) && !t1.$isJavaScriptIndexingBehavior())
      return this._next$1$bailout(2, offset, t1);
    t3 = offset + 1;
    if (t3 !== (t3 | 0))
      throw $.iae(t3);
    if (t3 < 0 || t3 >= t1.length)
      throw $.ioore(t3);
    return t1[t3];
  },
  _next$1$bailout: function(state0, offset, t1) {
    switch (state0) {
      case 0:
      case 1:
        state0 = 0;
        t1 = this._table;
      case 2:
        state0 = 0;
        return $.$index$asx(t1, $.$add$ns(offset, 1));
    }
  },
  _linkLast$1: function(offset) {
    var last, t1;
    last = $.$index$asx(this._table, 2);
    t1 = $.getInterceptor$ns(offset);
    $.$indexSet$ax(this._table, t1.$add(offset, 1), 0);
    $.$indexSet$ax(this._table, t1.$add(offset, 2), last);
    $.$indexSet$ax(this._table, $.$add$ns(last, 1), offset);
    $.$indexSet$ax(this._table, 2, offset);
  },
  _unlink$1: function(offset) {
    var t1, next, prev;
    t1 = $.getInterceptor$ns(offset);
    next = $.$index$asx(this._table, t1.$add(offset, 1));
    prev = $.$index$asx(this._table, t1.$add(offset, 2));
    $.$indexSet$ax(this._table, t1.$add(offset, 1), null);
    $.$indexSet$ax(this._table, t1.$add(offset, 2), null);
    $.$indexSet$ax(this._table, $.$add$ns(prev, 1), next);
    $.$indexSet$ax(this._table, $.$add$ns(next, 2), prev);
  },
  _addAllEntries$1: function(oldTable) {
    var t1, offset, object, t2, nextOffset;
    if (typeof oldTable !== "object" || oldTable === null || (oldTable.constructor !== Array || !!oldTable.immutable$list) && !oldTable.$isJavaScriptIndexingBehavior())
      return this._addAllEntries$1$bailout1(1, oldTable);
    t1 = oldTable.length;
    if (1 >= t1)
      throw $.ioore(1);
    offset = oldTable[1];
    if (typeof offset !== "number")
      return this._addAllEntries$1$bailout1(2, oldTable, offset, $.JSArray_methods);
    for (; !$.$eq(offset, 0); offset = nextOffset) {
      if (offset !== (offset | 0))
        throw $.iae(offset);
      if (offset < 0 || offset >= t1)
        throw $.ioore(offset);
      object = oldTable[offset];
      t2 = offset + 1;
      if (t2 >= t1)
        throw $.ioore(t2);
      nextOffset = oldTable[t2];
      this._copyEntry$3(oldTable, offset, this._put$1(object));
    }
  },
  _addAllEntries$1$bailout1: function(state0, oldTable, offset, t1) {
    switch (state0) {
      case 0:
      case 1:
        state0 = 0;
        t1 = $.getInterceptor$asx(oldTable);
        offset = t1.$index(oldTable, 1);
      case 2:
        var t2, object, nextOffset;
        state0 = 0;
        for (; t2 = $.getInterceptor(offset), t2.$eq(offset, 0) !== true; offset = nextOffset) {
          object = t1.$index(oldTable, offset);
          nextOffset = t1.$index(oldTable, t2.$add(offset, 1));
          this._copyEntry$3(oldTable, offset, this._put$1(object));
        }
    }
  },
  _put$1: function(key) {
    var offset, t1, oldEntry;
    offset = this._probeForAdd$2($.get$hashCode$(key), key);
    t1 = this._table;
    if (typeof t1 !== "object" || t1 === null || (t1.constructor !== Array || !!t1.immutable$list) && !t1.$isJavaScriptIndexingBehavior())
      return this._put$1$bailout1(1, key, t1, offset);
    if (offset !== (offset | 0))
      throw $.iae(offset);
    if (offset < 0 || offset >= t1.length)
      throw $.ioore(offset);
    oldEntry = t1[offset];
    if (oldEntry === $.C__DeadEntry)
      this._deletedCount = this._deletedCount - 1;
    else if (oldEntry == null)
      this._entryCount = this._entryCount + 1;
    else
      return offset;
    this._recordModification$0();
    if (key == null)
      key = $.C__NullKey;
    t1 = this._table;
    if (typeof t1 !== "object" || t1 === null || (t1.constructor !== Array || !!t1.immutable$list) && !t1.$isJavaScriptIndexingBehavior())
      return this._put$1$bailout1(2, key, t1, offset);
    if (offset >= t1.length)
      throw $.ioore(offset);
    t1[offset] = key;
    this._linkLast$1(offset);
    return offset;
  },
  _put$1$bailout1: function(state0, key, t1, offset) {
    switch (state0) {
      case 0:
        offset = this._probeForAdd$2($.get$hashCode$(key), key);
        t1 = this._table;
      case 1:
        state0 = 0;
        oldEntry = $.$index$asx(t1, offset);
        if (oldEntry === $.C__DeadEntry)
          this._deletedCount = this._deletedCount - 1;
        else if (oldEntry == null)
          this._entryCount = this._entryCount + 1;
        else
          return offset;
        this._recordModification$0();
        if (key == null)
          key = $.C__NullKey;
        t1 = this._table;
      case 2:
        var oldEntry;
        state0 = 0;
        $.$indexSet$ax(t1, offset, key);
        this._linkLast$1(offset);
        return offset;
    }
  },
  _deleteEntry$1: function(offset) {
    var key;
    this._unlink$1(offset);
    key = $.C__DeadEntry;
    $.$indexSet$ax(this._table, offset, key);
    this._deletedCount = this._deletedCount + 1;
    this._recordModification$0();
  }
};

$$._LinkedHashTableKeyIterable = {"": "Iterable;_table",
  get$iterator: function(_) {
    return $._LinkedHashTableKeyIterator$(this._table);
  },
  contains$1: function(_, value) {
    return $.$ge$n(this._table._get$1(value), 0);
  },
  get$contains: function(receiver) {
    return new $.BoundClosure$i1(this, "contains$1", receiver);
  },
  get$length: function(_) {
    return this._table.get$_elementCount();
  },
  $asIterable: function() {
    return null;
  }
};

$$._LinkedHashTableKeyIterator = {"": "_LinkedHashTableIterator;_hashTable,_modificationCount,_offset,_liblib1$_current",
  _getCurrent$1: function(offset) {
    return this._hashTable._key$1(offset);
  }
};

$$._LinkedHashTableValueIterable = {"": "Iterable;_hashTable<,_valueIndex",
  get$iterator: function(_) {
    return $._LinkedHashTableValueIterator$(this._hashTable, this._valueIndex);
  },
  get$length: function(_) {
    return this._hashTable.get$_elementCount();
  },
  $asIterable: function() {
    return null;
  }
};

$$._LinkedHashTableValueIterator = {"": "_LinkedHashTableIterator;_valueIndex,_hashTable,_modificationCount,_offset,_liblib1$_current",
  _getCurrent$1: function(offset) {
    return $.$index$asx(this._hashTable._table, $.$add$ns(offset, this._valueIndex));
  }
};

$$._LinkedHashTableIterator = {"": "Object0;_hashTable<",
  moveNext$0: function() {
    var t1, t2;
    t1 = this._hashTable;
    t1._checkModification$1(this._modificationCount);
    t2 = this._offset;
    if (typeof t2 !== "number")
      return this.moveNext$0$bailout(1, t1, t2);
    if (t2 === 0) {
      this._liblib1$_current = null;
      return false;
    }
    this._liblib1$_current = this._getCurrent$1(t2);
    this._offset = t1._next$1(this._offset);
    return true;
  },
  moveNext$0$bailout: function(state0, t1, t2) {
    if ($.$eq(t2, 0) === true) {
      this._liblib1$_current = null;
      return false;
    }
    this._liblib1$_current = this._getCurrent$1(this._offset);
    this._offset = t1._next$1(this._offset);
    return true;
  },
  get$current: function() {
    return this._liblib1$_current;
  }
};

$$.ListQueue = {"": "Collection;_table,_head,_tail,_modificationCount",
  get$iterator: function(_) {
    return $._ListQueueIterator$(this);
  },
  forEach$1: function(_, action) {
    var modificationCount, i, t1;
    modificationCount = this._modificationCount;
    for (i = this._head; i !== this._tail; i = (i + 1 & this._table.length - 1) >>> 0) {
      t1 = this._table;
      if (i < 0 || i >= t1.length)
        throw $.ioore(i);
      action.call$1(t1[i]);
      this._checkModification$1(modificationCount);
    }
  },
  get$isEmpty: function(_) {
    return this._head === this._tail;
  },
  get$length: function(_) {
    return $.$and$n($.$sub$n(this._tail, this._head), this._table.length - 1);
  },
  elementAt$1: function(_, index) {
    var t1, t2, t3;
    if (index < 0 || index > this.get$length(this))
      throw $.$$throw($.RangeError$range(index, 0, this.get$length(this)));
    t1 = this._table;
    t2 = t1.length;
    t3 = (this._head + index & t2 - 1) >>> 0;
    if (t3 < 0 || t3 >= t2)
      throw $.ioore(t3);
    return t1[t3];
  },
  toList$1$growable: function(_, growable) {
    var list;
    if (growable) {
      list = $.List_List($, $.getRuntimeTypeArgument(this, this["$asListQueue"], 0));
      $.setRuntimeTypeInfo(list, [$.getRuntimeTypeArgument(this, this["$asListQueue"], 0)]);
      $.JSArray_methods.set$length(list, this.get$length(this));
    } else {
      list = $.List_List(this.get$length(this), $.getRuntimeTypeArgument(this, this["$asListQueue"], 0));
      $.setRuntimeTypeInfo(list, [$.getRuntimeTypeArgument(this, this["$asListQueue"], 0)]);
    }
    this._writeToList$1(list);
    return list;
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  add$1: function(_, element) {
    this._add$1(element);
  },
  addAll$1: function(_, elements) {
    var addCount, $length, t1, t2, t3, endSpace, preSpace;
    if (typeof elements === "object" && elements !== null && (elements.constructor === Array || elements.$isList())) {
      addCount = $.get$length$asx(elements);
      $length = this.get$length(this);
      if (typeof addCount !== "number")
        throw $.iae(addCount);
      t1 = $length + addCount;
      t2 = this._table;
      t3 = t2.length;
      if (t1 >= t3) {
        this._preGrow$1(t1);
        $.JSArray_methods.setRange$4(this._table, $length, addCount, elements, 0);
        this._tail = $.$add$ns(this._tail, addCount);
      } else {
        t1 = this._tail;
        if (typeof t1 !== "number")
          throw $.iae(t1);
        endSpace = t3 - t1;
        if (addCount < endSpace) {
          $.JSArray_methods.setRange$4(t2, t1, addCount, elements, 0);
          this._tail = $.$add$ns(this._tail, addCount);
        } else {
          preSpace = addCount - endSpace;
          $.JSArray_methods.setRange$4(t2, t1, endSpace, elements, 0);
          $.JSArray_methods.setRange$4(this._table, 0, preSpace, elements, endSpace);
          this._tail = preSpace;
        }
      }
      this._modificationCount = this._modificationCount + 1;
    } else
      for (t1 = $.get$iterator$ax(elements); t1.moveNext$0();)
        this._add$1(t1.get$current());
  },
  remove$1: function(_, object) {
    var i, t1;
    for (i = this._head; i !== this._tail; i = (i + 1 & this._table.length - 1) >>> 0) {
      t1 = this._table;
      if (i < 0 || i >= t1.length)
        throw $.ioore(i);
      if ($.$eq(t1[i], object) === true) {
        this._remove$1(i);
        return;
      }
    }
    this._modificationCount = this._modificationCount + 1;
  },
  toString$0: function(_) {
    return $.ToString_collectionToString(this);
  },
  addLast$1: function(_, element) {
    this._add$1(element);
  },
  removeFirst$0: function() {
    var t1, t2, t3, result;
    if (this._head === this._tail)
      throw $.$$throw($.StateError$("No elements"));
    this._modificationCount = this._modificationCount + 1;
    t1 = this._table;
    t2 = this._head;
    t3 = t1.length;
    if (t2 < 0 || t2 >= t3)
      throw $.ioore(t2);
    result = t1[t2];
    this._head = (t2 + 1 & t3 - 1) >>> 0;
    return result;
  },
  removeLast$0: function(_) {
    var t1, t2;
    if (this._head === this._tail)
      throw $.$$throw($.StateError$("No elements"));
    this._modificationCount = this._modificationCount + 1;
    this._tail = $.$and$n($.$sub$n(this._tail, 1), this._table.length - 1);
    t1 = this._table;
    t2 = this._tail;
    if (t2 !== (t2 | 0))
      throw $.iae(t2);
    if (t2 < 0 || t2 >= t1.length)
      throw $.ioore(t2);
    return t1[t2];
  },
  _checkModification$1: function(expectedModificationCount) {
    if (typeof expectedModificationCount !== "number")
      return this._checkModification$1$bailout(1, expectedModificationCount);
    if (expectedModificationCount !== this._modificationCount)
      throw $.$$throw($.ConcurrentModificationError$(this));
  },
  _checkModification$1$bailout: function(state0, expectedModificationCount) {
    if ($.$eq(expectedModificationCount, this._modificationCount) !== true)
      throw $.$$throw($.ConcurrentModificationError$(this));
  },
  _add$1: function(element) {
    var t1, t2;
    t1 = this._table;
    t2 = this._tail;
    if (t2 !== (t2 | 0))
      throw $.iae(t2);
    if (t2 < 0 || t2 >= t1.length)
      throw $.ioore(t2);
    t1[t2] = element;
    this._tail = $.$and$n(t2 + 1, this._table.length - 1);
    if (this._head === this._tail)
      this._grow$0();
    this._modificationCount = this._modificationCount + 1;
  },
  _remove$1: function(offset) {
    var t1, t2, mask, t3, startDistance, t4, i, prevOffset, nextOffset;
    t1 = this._table;
    t2 = t1.length;
    mask = t2 - 1;
    t3 = this._head;
    startDistance = (offset - t3 & mask) >>> 0;
    t4 = this._tail;
    if (typeof t4 !== "number")
      return this._remove$1$bailout(1, offset, mask, startDistance, t4);
    if (startDistance < (t4 - offset & mask) >>> 0) {
      for (i = offset; i !== t3; i = prevOffset) {
        prevOffset = (i - 1 & mask) >>> 0;
        if (prevOffset < 0 || prevOffset >= t2)
          throw $.ioore(prevOffset);
        t4 = t1[prevOffset];
        if (i < 0 || i >= t2)
          throw $.ioore(i);
        t1[i] = t4;
      }
      if (t3 < 0 || t3 >= t2)
        throw $.ioore(t3);
      t1[t3] = null;
      this._head = (t3 + 1 & mask) >>> 0;
      return (offset + 1 & mask) >>> 0;
    } else {
      this._tail = (t4 - 1 & mask) >>> 0;
      for (t1 = this._table, t2 = t1.length, i = offset; t3 = this._tail, i !== t3; i = nextOffset) {
        nextOffset = (i + 1 & mask) >>> 0;
        if (nextOffset < 0 || nextOffset >= t2)
          throw $.ioore(nextOffset);
        t3 = t1[nextOffset];
        if (i < 0 || i >= t2)
          throw $.ioore(i);
        t1[i] = t3;
      }
      if (t3 !== (t3 | 0))
        throw $.iae(t3);
      if (t3 < 0 || t3 >= t2)
        throw $.ioore(t3);
      t1[t3] = null;
      return offset;
    }
  },
  _remove$1$bailout: function(state0, offset, mask, startDistance, t1) {
    switch (state0) {
      case 0:
        mask = this._table.length - 1;
        startDistance = (offset - this._head & mask) >>> 0;
        t1 = this._tail;
      case 1:
        state0 = 0;
      case 2:
        var t2, i, t3, prevOffset, nextOffset;
        if (state0 === 0 && startDistance < $.$and$n($.$sub$n(t1, offset), mask)) {
          for (t1 = this._table, t2 = t1.length, i = offset; t3 = this._head, i !== t3; i = prevOffset) {
            prevOffset = (i - 1 & mask) >>> 0;
            if (prevOffset < 0 || prevOffset >= t2)
              throw $.ioore(prevOffset);
            t3 = t1[prevOffset];
            if (i < 0 || i >= t2)
              throw $.ioore(i);
            t1[i] = t3;
          }
          if (t3 < 0 || t3 >= t2)
            throw $.ioore(t3);
          t1[t3] = null;
          this._head = (t3 + 1 & mask) >>> 0;
          return (offset + 1 & mask) >>> 0;
        } else
          switch (state0) {
            case 0:
              t1 = this._tail;
            case 2:
              state0 = 0;
              this._tail = $.$and$n($.$sub$n(t1, 1), mask);
              for (t1 = this._table, t2 = t1.length, i = offset; t3 = this._tail, i !== t3; i = nextOffset) {
                nextOffset = (i + 1 & mask) >>> 0;
                if (nextOffset < 0 || nextOffset >= t2)
                  throw $.ioore(nextOffset);
                t3 = t1[nextOffset];
                if (i < 0 || i >= t2)
                  throw $.ioore(i);
                t1[i] = t3;
              }
              if (t3 !== (t3 | 0))
                throw $.iae(t3);
              if (t3 < 0 || t3 >= t2)
                throw $.ioore(t3);
              t1[t3] = null;
              return offset;
          }
    }
  },
  _grow$0: function() {
    var newTable, t1, t2, split;
    newTable = $.List_List(this._table.length * 2, $.getRuntimeTypeArgument(this, this["$asListQueue"], 0));
    $.setRuntimeTypeInfo(newTable, [$.getRuntimeTypeArgument(this, this["$asListQueue"], 0)]);
    t1 = this._table;
    t2 = this._head;
    split = t1.length - t2;
    $.JSArray_methods.setRange$4(newTable, 0, split, t1, t2);
    $.JSArray_methods.setRange$4(newTable, split, this._head, this._table, 0);
    this._head = 0;
    this._tail = this._table.length;
    this._table = newTable;
  },
  _writeToList$1: function(target) {
    var t1, t2, $length, firstPartSize;
    t1 = $.JSInt_methods.$le(this._head, this._tail);
    t2 = this._head;
    if (t1) {
      $length = $.$sub$n(this._tail, t2);
      $.JSArray_methods.setRange$4(target, 0, $length, this._table, this._head);
      return $length;
    } else {
      t1 = this._table;
      firstPartSize = t1.length - t2;
      $.JSArray_methods.setRange$4(target, 0, firstPartSize, t1, t2);
      $.JSArray_methods.setRange$4(target, firstPartSize, this._tail, this._table, 0);
      return $.$add$ns(this._tail, firstPartSize);
    }
  },
  _preGrow$1: function(newElementCount) {
    var newTable = $.List_List($.ListQueue__nextPowerOf2(newElementCount), $.getRuntimeTypeArgument(this, this["$asListQueue"], 0));
    $.setRuntimeTypeInfo(newTable, [$.getRuntimeTypeArgument(this, this["$asListQueue"], 0)]);
    this._tail = this._writeToList$1(newTable);
    this._table = newTable;
    this._head = 0;
  },
  ListQueue$1: function(initialCapacity, E) {
    var t1;
    if (initialCapacity == null || $.JSNull_methods.$lt(initialCapacity, 8))
      initialCapacity = 8;
    else if (!$.ListQueue__isPowerOf2(initialCapacity))
      initialCapacity = $.ListQueue__nextPowerOf2(initialCapacity);
    t1 = $.List_List(initialCapacity, E);
    $.setRuntimeTypeInfo(t1, [E]);
    this._table = t1;
  },
  $asCollection: function() {
    return null;
  },
  $isCollection: function() {
    return true;
  }
};

$$._ListQueueIterator = {"": "Object0;_queue,_end,_modificationCount,_liblib1$_position,_liblib1$_current",
  get$current: function() {
    return this._liblib1$_current;
  },
  moveNext$0: function() {
    var t1, t2, t3;
    t1 = this._queue;
    t1._checkModification$1(this._modificationCount);
    t2 = this._liblib1$_position;
    if (t2 === this._end) {
      this._liblib1$_current = null;
      return false;
    }
    t3 = t1._table;
    if (t2 < 0 || t2 >= t3.length)
      throw $.ioore(t2);
    this._liblib1$_current = t3[t2];
    this._liblib1$_position = (this._liblib1$_position + 1 & t1._table.length - 1) >>> 0;
    return true;
  }
};

$$.Collection = {"": "Iterable;",
  addAll$1: function(_, elements) {
    var t1;
    for (t1 = $.get$iterator$ax(elements); t1.moveNext$0();)
      this.add$1(this, t1.get$current());
  },
  $isCollection: function() {
    return true;
  },
  $asCollection: function() {
    return null;
  },
  $asIterable: function() {
    return null;
  }
};

$$.DateTime = {"": "Object0;millisecondsSinceEpoch<,isUtc",
  $eq: function(_, other) {
    if (other == null)
      return false;
    if (!(typeof other === "object" && other !== null && !!other.$isDateTime))
      return false;
    return $.$eq(this.millisecondsSinceEpoch, other.millisecondsSinceEpoch) === true && $.$eq(this.isUtc, other.isUtc) === true;
  },
  $lt: function(_, other) {
    return $.$lt$n(this.millisecondsSinceEpoch, other.get$millisecondsSinceEpoch());
  },
  $le: function(_, other) {
    return $.$le$n(this.millisecondsSinceEpoch, other.get$millisecondsSinceEpoch());
  },
  $gt: function(_, other) {
    return $.$gt$n(this.millisecondsSinceEpoch, other.get$millisecondsSinceEpoch());
  },
  $ge: function(_, other) {
    return $.$ge$n(this.millisecondsSinceEpoch, other.get$millisecondsSinceEpoch());
  },
  get$hashCode: function(_) {
    return this.millisecondsSinceEpoch;
  },
  toString$0: function(_) {
    var t1, t2, t3, y, m, d, h, min, sec, ms;
    t1 = new $.DateTime_toString_fourDigits();
    t2 = new $.DateTime_toString_threeDigits();
    t3 = new $.DateTime_toString_twoDigits();
    y = t1.call$1(this.get$year());
    m = t3.call$1(this.get$month());
    d = t3.call$1(this.get$day());
    h = t3.call$1(this.get$hour());
    min = t3.call$1(this.get$minute());
    sec = t3.call$1(this.get$second());
    ms = t2.call$1(this.get$millisecond());
    if (this.isUtc === true)
      return $.S(y) + "-" + $.S(m) + "-" + $.S(d) + " " + $.S(h) + ":" + $.S(min) + ":" + $.S(sec) + "." + $.S(ms) + "Z";
    else
      return $.S(y) + "-" + $.S(m) + "-" + $.S(d) + " " + $.S(h) + ":" + $.S(min) + ":" + $.S(sec) + "." + $.S(ms);
  },
  add$1: function(_, duration) {
    return $.DateTime$fromMillisecondsSinceEpoch($.$add$ns(this.millisecondsSinceEpoch, duration.get$inMilliseconds()), this.isUtc);
  },
  get$year: function() {
    return $.Primitives_getYear(this);
  },
  get$month: function() {
    return $.Primitives_getMonth(this);
  },
  get$day: function() {
    return $.Primitives_getDay(this);
  },
  get$hour: function() {
    return $.Primitives_getHours(this);
  },
  get$minute: function() {
    return $.Primitives_getMinutes(this);
  },
  get$second: function() {
    return $.Primitives_getSeconds(this);
  },
  get$millisecond: function() {
    return $.Primitives_getMilliseconds(this);
  },
  DateTime$fromMillisecondsSinceEpoch$2$isUtc: function(millisecondsSinceEpoch, isUtc) {
    if ($.abs$0$n(millisecondsSinceEpoch) > 8640000000000000)
      throw $.$$throw($.ArgumentError$(millisecondsSinceEpoch));
    if (isUtc == null)
      throw $.$$throw($.ArgumentError$(isUtc));
  },
  DateTime$_now$0: function() {
    $.Primitives_lazyAsJsDate(this);
  },
  $isDateTime: true
};

$$.DateTime_toString_fourDigits = {"": "Closure;",
  call$1: function(n) {
    var t1, absN, sign;
    t1 = $.getInterceptor$n(n);
    absN = t1.abs$0(n);
    sign = t1.$lt(n, 0) === true ? "-" : "";
    if (absN >= 1000)
      return $.S(n);
    if (absN >= 100)
      return sign + "0" + $.S(absN);
    if (absN >= 10)
      return sign + "00" + $.S(absN);
    return sign + "000" + $.S(absN);
  }
};

$$.DateTime_toString_threeDigits = {"": "Closure;",
  call$1: function(n) {
    var t1 = $.getInterceptor$n(n);
    if (t1.$ge(n, 100) === true)
      return $.S(n);
    if (t1.$ge(n, 10) === true)
      return "0" + $.S(n);
    return "00" + $.S(n);
  }
};

$$.DateTime_toString_twoDigits = {"": "Closure;",
  call$1: function(n) {
    if ($.$ge$n(n, 10) === true)
      return $.S(n);
    return "0" + $.S(n);
  }
};

$$.Duration = {"": "Object0;_duration<",
  $add: function(_, other) {
    return $.Duration$(0, 0, this._duration + other.get$_duration(), 0, 0, 0);
  },
  $sub: function(_, other) {
    return $.Duration$(0, 0, this._duration - other.get$_duration(), 0, 0, 0);
  },
  $mul: function(_, factor) {
    if (typeof factor !== "number")
      throw $.iae(factor);
    return $.Duration$(0, 0, this._duration * factor, 0, 0, 0);
  },
  $tdiv: function(_, quotient) {
    if (quotient === 0)
      throw $.$$throw($.IntegerDivisionByZeroException$());
    if (typeof quotient !== "number")
      throw $.iae(quotient);
    return $.Duration$(0, 0, $.JSNumber_methods.$tdiv(this._duration, quotient), 0, 0, 0);
  },
  $lt: function(_, other) {
    return this._duration < other.get$_duration();
  },
  $gt: function(_, other) {
    return this._duration > other.get$_duration();
  },
  $le: function(_, other) {
    return this._duration <= other.get$_duration();
  },
  $ge: function(_, other) {
    return this._duration >= other.get$_duration();
  },
  get$inHours: function() {
    return $.JSNumber_methods.$tdiv(this._duration, 3600000000);
  },
  get$inMinutes: function() {
    return $.JSNumber_methods.$tdiv(this._duration, 60000000);
  },
  get$inSeconds: function() {
    return $.JSNumber_methods.$tdiv(this._duration, 1000000);
  },
  get$inMilliseconds: function() {
    return $.JSNumber_methods.$tdiv(this._duration, 1000);
  },
  get$inMicroseconds: function() {
    return this._duration;
  },
  $eq: function(_, other) {
    if (other == null)
      return false;
    if (!(typeof other === "object" && other !== null && !!other.$isDuration))
      return false;
    return this._duration === other._duration;
  },
  get$hashCode: function(_) {
    return $.JSNumber_methods.get$hashCode(this._duration);
  },
  toString$0: function(_) {
    var t1, t2, twoDigitMinutes, twoDigitSeconds, sixDigitUs;
    t1 = new $.Duration_toString_sixDigits();
    t2 = new $.Duration_toString_twoDigits();
    if (this.get$inMicroseconds() < 0)
      return "-" + $.S($.Duration$(0, 0, -this.get$inMicroseconds(), 0, 0, 0));
    twoDigitMinutes = t2.call$1($.JSNumber_methods.remainder$1(this.get$inMinutes(), 60));
    twoDigitSeconds = t2.call$1($.JSNumber_methods.remainder$1(this.get$inSeconds(), 60));
    sixDigitUs = t1.call$1($.JSNumber_methods.remainder$1(this.get$inMicroseconds(), 1000000));
    return $.S(this.get$inHours()) + ":" + $.S(twoDigitMinutes) + ":" + $.S(twoDigitSeconds) + "." + $.S(sixDigitUs);
  },
  $isDuration: true
};

$$.Duration_toString_sixDigits = {"": "Closure;",
  call$1: function(n) {
    var t1 = $.getInterceptor$n(n);
    if (t1.$ge(n, 100000) === true)
      return $.S(n);
    if (t1.$ge(n, 10000) === true)
      return "0" + $.S(n);
    if (t1.$ge(n, 1000) === true)
      return "00" + $.S(n);
    if (t1.$ge(n, 100) === true)
      return "000" + $.S(n);
    if (t1.$gt(n, 10) === true)
      return "0000" + $.S(n);
    return "00000" + $.S(n);
  }
};

$$.Duration_toString_twoDigits = {"": "Closure;",
  call$1: function(n) {
    if ($.$ge$n(n, 10) === true)
      return $.S(n);
    return "0" + $.S(n);
  }
};

$$.NullThrownError = {"": "Object0;",
  toString$0: function(_) {
    return "Throw of null.";
  }
};

$$.ArgumentError = {"": "Object0;message",
  toString$0: function(_) {
    var t1 = this.message;
    if (t1 != null)
      return "Illegal argument(s): " + $.S(t1);
    return "Illegal argument(s)";
  }
};

$$.RangeError = {"": "ArgumentError;message",
  toString$0: function(_) {
    return "RangeError: " + $.S(this.message);
  }
};

$$.NoSuchMethodError = {"": "Object0;_receiver,_memberName,_arguments,_namedArguments,_existingArgumentNames",
  toString$0: function(_) {
    var t1, t2, t3, t4, actualParameters, i, formalParameters;
    t1 = {};
    t1.sb_0 = $.StringBuffer$("");
    t1.i_1 = 0;
    t2 = this._arguments;
    for (; $.$lt$n(t1.i_1, t2.length) === true; t1.i_1 = $.$add$ns(t1.i_1, 1)) {
      if ($.$gt$n(t1.i_1, 0) === true)
        t1.sb_0.write$1(", ");
      t3 = t1.sb_0;
      t4 = t1.i_1;
      if (t4 !== (t4 | 0))
        throw $.iae(t4);
      if (t4 < 0 || t4 >= t2.length)
        throw $.ioore(t4);
      t3.write$1($.Error_safeToString(t2[t4]));
    }
    t2 = this._namedArguments;
    t2.forEach$1(t2, new $.NoSuchMethodError_toString_anon(t1));
    t2 = this._existingArgumentNames;
    if (t2 == null)
      return "NoSuchMethodError : method not found: '" + $.S(this._memberName) + "'\nReceiver: " + $.S($.Error_safeToString(this._receiver)) + "\nArguments: [" + $.S(t1.sb_0) + "]";
    else {
      t3 = t1.sb_0;
      actualParameters = t3.toString$0(t3);
      t1.sb_0 = $.StringBuffer$("");
      for (i = 0; $.JSNumber_methods.$lt(i, $.JSNull_methods.get$length(t2)); ++i) {
        if (i > 0)
          t1.sb_0.write$1(", ");
        t1.sb_0.write$1($.JSNull_methods.$index(t2, i));
      }
      t1 = t1.sb_0;
      formalParameters = t1.toString$0(t1);
      t1 = this._memberName;
      return "NoSuchMethodError: incorrect number of arguments passed to method named '" + $.S(t1) + "'\nReceiver: " + $.S($.Error_safeToString(this._receiver)) + "\nTried calling: " + $.S(t1) + "(" + actualParameters + ")\nFound: " + $.S(t1) + "(" + formalParameters + ")";
    }
  }
};

$$.UnsupportedError = {"": "Object0;message",
  toString$0: function(_) {
    return "Unsupported operation: " + this.message;
  }
};

$$.StateError = {"": "Object0;message",
  toString$0: function(_) {
    return "Bad state: " + this.message;
  }
};

$$.ConcurrentModificationError = {"": "Object0;modifiedObject",
  toString$0: function(_) {
    var t1 = this.modifiedObject;
    if (t1 == null)
      return "Concurrent modification during iteration.";
    return "Concurrent modification during iteration: " + $.S($.Error_safeToString(t1)) + ".";
  }
};

$$.StackOverflowError = {"": "Object0;",
  toString$0: function(_) {
    return "Stack Overflow";
  }
};

$$.RuntimeError = {"": "Object0;message",
  toString$0: function(_) {
    return "RuntimeError: " + this.message;
  }
};

$$._ExceptionImplementation = {"": "Object0;message",
  toString$0: function(_) {
    var t1 = this.message;
    if (t1 == null)
      return "Exception";
    return "Exception: " + $.S(t1);
  },
  $isException: true
};

$$.FormatException = {"": "Object0;message",
  toString$0: function(_) {
    return "FormatException: " + this.message;
  },
  $isException: true
};

$$.IntegerDivisionByZeroException = {"": "Object0;",
  toString$0: function(_) {
    return "IntegerDivisionByZeroException";
  },
  $isException: true
};

$$.Iterable = {"": "Object0;",
  map$1: function(_, f) {
    return $.MappedIterable$(this, f, $.getRuntimeTypeArgument(this, this["$asIterable"], 0), null);
  },
  where$1: function(_, f) {
    return $.WhereIterable$(this, f, $.getRuntimeTypeArgument(this, this["$asIterable"], 0));
  },
  contains$1: function(_, element) {
    var t1;
    for (t1 = this.get$iterator(this); t1.moveNext$0();)
      if ($.$eq(t1.get$current(), element) === true)
        return true;
    return false;
  },
  get$contains: function(receiver) {
    return new $.BoundClosure$i1(this, "contains$1", receiver);
  },
  forEach$1: function(_, f) {
    var t1;
    for (t1 = this.get$iterator(this); t1.moveNext$0();)
      f.call$1(t1.get$current());
  },
  toList$1$growable: function(_, growable) {
    return $.List_List$from(this, growable, $.getRuntimeTypeArgument(this, this["$asIterable"], 0));
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$length: function(_) {
    var it, count;
    it = this.get$iterator(this);
    for (count = 0; it.moveNext$0();)
      ++count;
    return count;
  },
  get$isEmpty: function(_) {
    return !this.get$iterator(this).moveNext$0();
  },
  elementAt$1: function(_, index) {
    var t1, remaining, t2;
    if (!(typeof index === "number" && Math.floor(index) === index) || index < 0)
      throw $.$$throw($.RangeError$value(index));
    for (t1 = this.get$iterator(this), remaining = index; t1.moveNext$0();) {
      t2 = t1.get$current();
      if (remaining === 0)
        return t2;
      --remaining;
    }
    throw $.$$throw($.RangeError$value(index));
  }
};

$$.Iterator = {"": "Object0;"};

$$.Object0 = {"": ";",
  $eq: function(_, other) {
    return this === other;
  },
  get$hashCode: function(_) {
    return $.Primitives_objectHashCode(this);
  },
  toString$0: function(_) {
    return "Instance of '" + $.S($.Primitives_objectTypeName(this)) + "'";
  }
};

$$.StringBuffer = {"": "Object0;_contents",
  get$length: function(_) {
    return this._contents.length;
  },
  get$isEmpty: function(_) {
    return this.get$length(this) === 0;
  },
  write$1: function(obj) {
    if (typeof obj !== "string")
      return this.write$1$bailout(1, obj);
    this._contents = this._contents + obj;
  },
  write$1$bailout: function(state0, obj) {
    var str = typeof obj === "string" ? obj : $.S(obj);
    this._contents = this._contents + str;
  },
  writeln$1: function(obj) {
    this.write$1(obj);
    this.write$1("\n");
  },
  toString$0: function(_) {
    return this._contents;
  },
  StringBuffer$1: function($content) {
    this._contents = $content;
  }
};

$$._ChildrenElementList = {"": "Object0;_element,_childElements",
  toList$1$growable: function(_, growable) {
    var t1, output, len, t2, i, t3;
    t1 = this._childElements;
    if (growable) {
      output = [];
      $.JSArray_methods.set$length(output, $.get$length$asx(t1));
    } else {
      output = $.List_List($.get$length$asx(t1), $.Element);
      $.setRuntimeTypeInfo(output, [$.Element]);
    }
    for (t1 = this._childElements, len = $.get$length$asx(t1), t2 = $.getInterceptor$asx(t1), i = 0; i < len; ++i) {
      t3 = t2.$index(t1, i);
      if (i >= output.length)
        throw $.ioore(i);
      output[i] = t3;
    }
    return output;
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  contains$1: function(_, element) {
    return $.contains$1$asx(this._childElements, element);
  },
  get$contains: function(receiver) {
    return new $.BoundClosure$i1(this, "contains$1", receiver);
  },
  forEach$1: function(_, f) {
    var t1;
    for (t1 = $.get$iterator$ax(this._childElements); t1.moveNext$0();)
      f.call$1(t1.get$current());
  },
  get$isEmpty: function(_) {
    return this._element.firstElementChild == null;
  },
  elementAt$1: function(_, index) {
    return $.$index$asx(this._childElements, index);
  },
  get$length: function(_) {
    return $.get$length$asx(this._childElements);
  },
  $index: function(_, index) {
    return $.$index$asx(this._childElements, index);
  },
  $indexSet: function(_, index, value) {
    this._element.replaceChild(value, $.$index$asx(this._childElements, index));
  },
  add$1: function(_, value) {
    this._element.appendChild(value);
    return value;
  },
  get$iterator: function(_) {
    return $.JSArray_methods.get$iterator(this.toList$0(this));
  },
  addAll$1: function(_, iterable) {
    var t1, t2;
    if (typeof iterable === "object" && iterable !== null && !!iterable.$is_ChildNodeListLazy)
      iterable = $.List_List$from(iterable, true, null);
    for (t1 = $.get$iterator$ax(iterable), t2 = this._element; t1.moveNext$0();)
      t2.appendChild(t1.get$current());
  },
  remove$1: function(_, object) {
    var t1;
    if (typeof object === "object" && object !== null && object.$isElement()) {
      t1 = this._element;
      if (object.parentNode === t1)
        t1.removeChild(object);
    }
  },
  sublist$2: function(_, start, end) {
    if (end == null)
      end = this.get$length(this);
    return $._FrozenElementList$_wrap($.Lists_getRange(this, start, end, []));
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  indexOf$2: function(_, element, start) {
    return $.Lists_indexOf(this, element, start, this.get$length(this));
  },
  indexOf$1: function($receiver, element) {
    return this.indexOf$2($receiver, element, 0);
  },
  clear$0: function(_) {
    this._element.textContent = "";
  },
  removeLast$0: function(_) {
    var result = this.get$last(this);
    if (result != null)
      this._element.removeChild(result);
    return result;
  },
  get$last: function(_) {
    var result = this._element.lastElementChild;
    if (result == null)
      throw $.$$throw($.StateError$("No elements"));
    return result;
  },
  $isList: function() {
    return true;
  },
  $asList: function() {
    return function () { return [null]; };
  },
  $isCollection: function() {
    return true;
  },
  $asCollection: function() {
    return function () { return [null]; };
  }
};

$$._FrozenElementList = {"": "Object0;_nodeList",
  contains$1: function(_, element) {
    var t1;
    for (t1 = this.get$iterator(this); t1.moveNext$0();)
      if ($.$eq(t1.get$current(), element) === true)
        return true;
    return false;
  },
  get$contains: function(receiver) {
    return new $.BoundClosure$i1(this, "contains$1", receiver);
  },
  forEach$1: function(_, f) {
    var t1;
    for (t1 = this.get$iterator(this); t1.moveNext$0();)
      f.call$1(t1.get$current());
  },
  elementAt$1: function(_, index) {
    return $.$index$asx(this._nodeList, index);
  },
  get$isEmpty: function(_) {
    return $.get$isEmpty$asx(this._nodeList);
  },
  get$length: function(_) {
    return $.get$length$asx(this._nodeList);
  },
  $index: function(_, index) {
    return $.$index$asx(this._nodeList, index);
  },
  $indexSet: function(_, index, value) {
    throw $.$$throw($.UnsupportedError$(""));
  },
  add$1: function(_, value) {
    throw $.$$throw($.UnsupportedError$(""));
  },
  get$iterator: function(_) {
    return $._FrozenElementListIterator$(this);
  },
  addAll$1: function(_, iterable) {
    throw $.$$throw($.UnsupportedError$(""));
  },
  sublist$2: function(_, start, end) {
    return $._FrozenElementList$_wrap($.sublist$2$ax(this._nodeList, start, end));
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  indexOf$2: function(_, element, start) {
    return $.indexOf$2$asx(this._nodeList, element, start);
  },
  indexOf$1: function($receiver, element) {
    return this.indexOf$2($receiver, element, 0);
  },
  clear$0: function(_) {
    throw $.$$throw($.UnsupportedError$(""));
  },
  removeLast$0: function(_) {
    throw $.$$throw($.UnsupportedError$(""));
  },
  remove$1: function(_, element) {
    throw $.$$throw($.UnsupportedError$(""));
  },
  $isList: function() {
    return true;
  },
  $asList: function() {
    return function () { return [null]; };
  },
  $isCollection: function() {
    return true;
  },
  $asCollection: function() {
    return function () { return [null]; };
  }
};

$$._FrozenElementListIterator = {"": "Object0;_list,_liblib$_index,_liblib$_current",
  moveNext$0: function() {
    var t1, nextIndex, t2;
    t1 = this._liblib$_index;
    if (typeof t1 !== "number")
      return this.moveNext$0$bailout(1, t1);
    nextIndex = t1 + 1;
    t1 = this._list;
    t2 = t1.get$length(t1);
    if (typeof t2 !== "number")
      return this.moveNext$0$bailout(2, t1, t2, nextIndex);
    if (nextIndex < t2) {
      this._liblib$_current = t1.$index(t1, nextIndex);
      this._liblib$_index = nextIndex;
      return true;
    }
    this._liblib$_index = t1.get$length(t1);
    this._liblib$_current = null;
    return false;
  },
  moveNext$0$bailout: function(state0, t1, t2, nextIndex) {
    switch (state0) {
      case 0:
        t1 = this._liblib$_index;
      case 1:
        state0 = 0;
        nextIndex = $.$add$ns(t1, 1);
        t1 = this._list;
        t2 = t1.get$length(t1);
      case 2:
        state0 = 0;
        if ($.$lt$n(nextIndex, t2) === true) {
          this._liblib$_current = t1.$index(t1, nextIndex);
          this._liblib$_index = nextIndex;
          return true;
        }
        this._liblib$_index = t1.get$length(t1);
        this._liblib$_current = null;
        return false;
    }
  },
  get$current: function() {
    return this._liblib$_current;
  }
};

$$.HttpRequest_getString_anon = {"": "Closure;",
  call$1: function(xhr) {
    return $.get$responseText$x(xhr);
  }
};

$$.HttpRequest_request_anon = {"": "Closure;completer_0,xhr_1",
  call$1: function(e) {
    var t1, t2, t3;
    t1 = this.xhr_1;
    if (!($.$ge$n(t1.status, 200) && $.$lt$n(t1.status, 300))) {
      t2 = t1.status;
      t2 = t2 === 0 || t2 === 304;
    } else
      t2 = true;
    t3 = this.completer_0;
    if (t2)
      t3.complete$1(t3, t1);
    else
      t3.completeError$1(e);
  }
};

$$.HttpRequest_request_anon0 = {"": "Closure;completer_2",
  call$1: function(e) {
    this.completer_2.completeError$1(e);
  }
};

$$._ChildNodeListLazy = {"": "Object0;_this",
  get$last: function(_) {
    var result = this._this.lastChild;
    if (result == null)
      throw $.$$throw($.StateError$("No elements"));
    return result;
  },
  add$1: function(_, value) {
    this._this.appendChild(value);
  },
  addAll$1: function(_, iterable) {
    var t1, len, i, t2;
    if (typeof iterable === "object" && iterable !== null && !!iterable.$is_ChildNodeListLazy) {
      t1 = this._this;
      if (iterable._this !== t1) {
        len = iterable.get$length(iterable);
        if (typeof len !== "number")
          return this.addAll$1$bailout(1, iterable, len, t1);
        i = 0;
        for (; i < len; ++i)
          t1.appendChild(iterable.$index(iterable, 0));
      }
      return;
    }
    for (t1 = $.get$iterator$ax(iterable), t2 = this._this; t1.moveNext$0();)
      t2.appendChild(t1.get$current());
  },
  addAll$1$bailout: function(state0, iterable, len, t1) {
    switch (state0) {
      case 0:
      case 1:
        var i, t2;
        if (state0 === 1 || state0 === 0 && typeof iterable === "object" && iterable !== null && !!iterable.$is_ChildNodeListLazy)
          switch (state0) {
            case 0:
              t1 = this._this;
            case 1:
              if (state0 === 1 || state0 === 0 && iterable._this !== t1)
                switch (state0) {
                  case 0:
                    len = iterable.get$length(iterable);
                  case 1:
                    state0 = 0;
                    i = 0;
                    for (; $.JSNumber_methods.$lt(i, len); ++i)
                      t1.appendChild(iterable.$index(iterable, 0));
                }
              return;
          }
        for (t1 = $.get$iterator$ax(iterable), t2 = this._this; t1.moveNext$0();)
          t2.appendChild(t1.get$current());
    }
  },
  removeLast$0: function(_) {
    var result = this.get$last(this);
    if (result != null)
      this._this.removeChild(result);
    return result;
  },
  remove$1: function(_, object) {
    var t1;
    if (!(typeof object === "object" && object !== null && object.$isNode()))
      return;
    t1 = this._this;
    if (t1 !== object.parentNode)
      return;
    t1.removeChild(object);
  },
  clear$0: function(_) {
    this._this.textContent = "";
  },
  $indexSet: function(_, index, value) {
    var t1 = this._this;
    t1.replaceChild(value, $.$index$asx(t1.childNodes, index));
  },
  get$iterator: function(_) {
    return $.get$iterator$ax(this._this.childNodes);
  },
  contains$1: function(_, element) {
    return $.IterableMixinWorkaround_contains(this, element);
  },
  get$contains: function(receiver) {
    return new $.BoundClosure$i1(this, "contains$1", receiver);
  },
  forEach$1: function(_, f) {
    var t1;
    for (t1 = this.get$iterator(this); t1.moveNext$0();)
      f.call$1(t1.get$current());
    return;
  },
  where$1: function(_, f) {
    return $.WhereIterable$(this, f, null);
  },
  get$isEmpty: function(_) {
    return $.$eq(this.get$length(this), 0);
  },
  elementAt$1: function(_, index) {
    return $.$index$asx(this._this.childNodes, index);
  },
  indexOf$2: function(_, element, start) {
    return $.Lists_indexOf(this, element, start, this.get$length(this));
  },
  indexOf$1: function($receiver, element) {
    return this.indexOf$2($receiver, element, 0);
  },
  sublist$2: function(_, start, end) {
    if (end == null)
      $.$eq(end, this.get$length(this));
    return $.Lists_getRange(this, start, end, []);
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  get$length: function(_) {
    return $.get$length$asx(this._this.childNodes);
  },
  $index: function(_, index) {
    return $.$index$asx(this._this.childNodes, index);
  },
  $is_ChildNodeListLazy: true,
  $isList: function() {
    return true;
  },
  $asList: function() {
    return function () { return [null]; };
  },
  $isCollection: function() {
    return true;
  },
  $asCollection: function() {
    return function () { return [null]; };
  }
};

$$._EventStream = {"": "Stream;_target,_eventType,_useCapture",
  asBroadcastStream$0: function() {
    return this;
  },
  get$isBroadcast: function() {
    return true;
  },
  listen$4$onDone$onError$unsubscribeOnError: function(onData, onDone, onError, unsubscribeOnError) {
    return $._EventStreamSubscription$(this._target, this._eventType, onData, this._useCapture);
  },
  listen$1: function(onData) {
    return this.listen$4$onDone$onError$unsubscribeOnError(onData, null, null, null);
  },
  listen$3$onDone$onError: function(onData, onDone, onError) {
    return this.listen$4$onDone$onError$unsubscribeOnError(onData, onDone, onError, null);
  },
  $asStream: null
};

$$._EventStreamSubscription = {"": "StreamSubscription;_pauseCount,_target,_eventType,_onData,_useCapture",
  cancel$0: function() {
    if (this.get$_canceled() === true)
      throw $.$$throw($.StateError$("Subscription has been canceled."));
    var t1 = this._onData;
    if (t1 != null)
      $.$$dom_removeEventListener$3$x(this._target, this._eventType, t1, this._useCapture);
    this._target = null;
    this._onData = null;
  },
  get$_canceled: function() {
    return this._target == null;
  },
  onError$1: function(_, handleError) {
  },
  get$onError: function(receiver) {
    return new $.BoundClosure$i1(this, "onError$1", receiver);
  },
  pause$1: function(_, resumeSignal) {
    var t1;
    if (this.get$_canceled() === true)
      throw $.$$throw($.StateError$("Subscription has been canceled."));
    this._pauseCount = this._pauseCount + 1;
    t1 = this._onData;
    if (t1 != null)
      $.$$dom_removeEventListener$3$x(this._target, this._eventType, t1, this._useCapture);
    if (resumeSignal != null)
      resumeSignal.whenComplete$1(this.get$resume());
  },
  pause$0: function($receiver) {
    return this.pause$1($receiver, null);
  },
  get$_paused: function() {
    return this._pauseCount > 0;
  },
  resume$0: function() {
    if (this.get$_canceled() === true)
      throw $.$$throw($.StateError$("Subscription has been canceled."));
    if (!this.get$_paused())
      throw $.$$throw($.StateError$("Subscription is not paused."));
    this._pauseCount = this._pauseCount - 1;
    this._tryResume$0();
  },
  get$resume: function() {
    return new $.BoundClosure$0(this, "resume$0");
  },
  _tryResume$0: function() {
    if (this._onData != null && !this.get$_paused())
      $.$$dom_addEventListener$3$x(this._target, this._eventType, this._onData, this._useCapture);
  },
  _EventStreamSubscription$4: function(_target, _eventType, _onData, _useCapture) {
    this._tryResume$0();
  }
};

$$.EventStreamProvider = {"": "Object0;_eventType",
  forTarget$2$useCapture: function(e, useCapture) {
    return $._EventStream$(e, this._eventType, useCapture, null);
  },
  forTarget$1: function(e) {
    return this.forTarget$2$useCapture(e, false);
  }
};

$$._CustomEventStreamProvider = {"": "Object0;_eventTypeGetter",
  _eventTypeGetter$1: function(arg0) {
    return this._eventTypeGetter.call$1(arg0);
  },
  forTarget$2$useCapture: function(e, useCapture) {
    return $._EventStream$(e, this._eventTypeGetter$1(e), useCapture, null);
  },
  forTarget$1: function(e) {
    return this.forTarget$2$useCapture(e, false);
  }
};

$$.Point0 = {"": "Object0;x>,y>",
  toString$0: function(_) {
    return "(" + $.S(this.x) + ", " + $.S(this.y) + ")";
  },
  $eq: function(_, other) {
    if (other == null)
      return false;
    if (!(typeof other === "object" && other !== null && !!other.$isPoint0))
      return false;
    return $.$eq(this.x, other.x) === true && $.$eq(this.y, other.y) === true;
  },
  $add: function(_, other) {
    var t1 = $.getInterceptor$x(other);
    return $.Point$0($.$add$ns(this.x, t1.get$x(other)), $.$add$ns(this.y, t1.get$y(other)));
  },
  $sub: function(_, other) {
    var t1 = $.getInterceptor$x(other);
    return $.Point$0($.$sub$n(this.x, t1.get$x(other)), $.$sub$n(this.y, t1.get$y(other)));
  },
  $mul: function(_, factor) {
    return $.Point$0($.$mul$n(this.x, factor), $.$mul$n(this.y, factor));
  },
  ceil$0: function(_) {
    return $.Point$0($.ceil$0$nx(this.x), $.ceil$0$nx(this.y));
  },
  toInt$0: function(_) {
    return $.Point$0($.toInt$0$nx(this.x), $.toInt$0$nx(this.y));
  },
  $isPoint0: true
};

$$.Rect = {"": "Object0;left>,top>,width>,height>",
  get$right: function(_) {
    return $.$add$ns(this.left, this.width);
  },
  get$bottom: function(_) {
    return $.$add$ns(this.top, this.height);
  },
  toString$0: function(_) {
    return "(" + $.S(this.left) + ", " + $.S(this.top) + ", " + $.S(this.width) + ", " + $.S(this.height) + ")";
  },
  $eq: function(_, other) {
    var t1, t2, t3;
    if (other == null)
      return false;
    if (!(typeof other === "object" && other !== null && other.$isRect()))
      return false;
    t1 = this.left;
    t2 = $.getInterceptor$x(other);
    t3 = t2.get$left(other);
    if (t1 == null ? t3 == null : t1 === t3) {
      t1 = this.top;
      t3 = t2.get$top(other);
      t1 = (t1 == null ? t3 == null : t1 === t3) && $.$eq(this.width, t2.get$width(other)) === true && $.$eq(this.height, t2.get$height(other)) === true;
    } else
      t1 = false;
    return t1;
  },
  union$1: function(_, rect) {
    var t1, t2, right, t3, bottom, left, $top;
    t1 = this.left;
    t2 = $.getInterceptor$x(rect);
    right = $.max($.$add$ns(t1, this.width), $.$add$ns(t2.get$left(rect), t2.get$width(rect)));
    t3 = this.top;
    bottom = $.max($.$add$ns(t3, this.height), $.$add$ns(t2.get$top(rect), t2.get$height(rect)));
    left = $.min(t1, t2.get$left(rect));
    $top = $.min(t3, t2.get$top(rect));
    return $.Rect$(left, $top, right - left, bottom - $top);
  },
  ceil$0: function(_) {
    return $.Rect$($.ceil$0$nx(this.left), $.ceil$0$nx(this.top), $.ceil$0$nx(this.width), $.ceil$0$nx(this.height));
  },
  toInt$0: function(_) {
    return $.Rect$($.toInt$0$nx(this.left), $.toInt$0$nx(this.top), $.toInt$0$nx(this.width), $.toInt$0$nx(this.height));
  },
  $isRect: function() {
    return true;
  },
  $asRect: function() {
    return null;
  }
};

$$._DOMWindowCrossFrame = {"": "Object0;_window",
  get$parent: function(_) {
    return $._DOMWindowCrossFrame__createSafe(this._window.parent);
  },
  get$top: function(_) {
    return $._DOMWindowCrossFrame__createSafe(this._window.top);
  }
};

$$.FixedSizeListIterator = {"": "Object0;_array,_liblib$_length,_position,_liblib$_current",
  moveNext$0: function() {
    var nextPosition, t1;
    nextPosition = this._position + 1;
    t1 = this._liblib$_length;
    if (nextPosition < t1) {
      this._liblib$_current = $.$index$asx(this._array, nextPosition);
      this._position = nextPosition;
      return true;
    }
    this._liblib$_current = null;
    this._position = t1;
    return false;
  },
  get$current: function() {
    return this._liblib$_current;
  }
};

$$.convertDartToNative_Dictionary_anon = {"": "Closure;object_0",
  call$2: function(key, value) {
    this.object_0[key] = value;
  }
};

$$.FilteredElementList = {"": "Object0;_node,_childNodes",
  get$_filtered: function() {
    var t1 = this._childNodes;
    return $.List_List$from(t1.where$1(t1, new $.FilteredElementList__filtered_anon()), true, $.Element);
  },
  forEach$1: function(_, f) {
    $.JSArray_methods.forEach$1(this.get$_filtered(), f);
  },
  $indexSet: function(_, index, value) {
    var t1 = this.get$_filtered();
    if (index !== (index | 0))
      throw $.iae(index);
    if (index < 0 || index >= t1.length)
      throw $.ioore(index);
    $.replaceWith$1$x(t1[index], value);
  },
  add$1: function(_, value) {
    var t1 = this._childNodes;
    t1.add$1(t1, value);
  },
  addAll$1: function(_, iterable) {
    var t1, t2;
    for (t1 = $.get$iterator$ax(iterable), t2 = this._childNodes; t1.moveNext$0();)
      t2.add$1(t2, t1.get$current());
  },
  contains$1: function(_, element) {
    var t1;
    if (typeof element === "object" && element !== null && element.$isElement()) {
      t1 = this._childNodes;
      t1 = t1.contains$1(t1, element);
    } else
      t1 = false;
    return t1;
  },
  get$contains: function(receiver) {
    return new $.BoundClosure$i1(this, "contains$1", receiver);
  },
  clear$0: function(_) {
    var t1 = this._childNodes;
    t1.clear$0(t1);
  },
  removeLast$0: function(_) {
    var result = this.get$last(this);
    if (result != null)
      $.remove$0$ax(result);
    return result;
  },
  remove$1: function(_, element) {
    var i, t1, indexElement;
    if (!(typeof element === "object" && element !== null && element.$isElement()))
      return;
    for (i = 0; i < this.get$length(this); ++i) {
      t1 = this.get$_filtered();
      if (i >= t1.length)
        throw $.ioore(i);
      indexElement = t1[i];
      if (indexElement === element) {
        $.remove$0$ax(indexElement);
        return;
      }
    }
  },
  elementAt$1: function(_, index) {
    var t1 = this.get$_filtered();
    if (index !== (index | 0))
      throw $.iae(index);
    if (index < 0 || index >= t1.length)
      throw $.ioore(index);
    return t1[index];
  },
  get$isEmpty: function(_) {
    return $.JSArray_methods.get$isEmpty(this.get$_filtered());
  },
  get$length: function(_) {
    return this.get$_filtered().length;
  },
  $index: function(_, index) {
    var t1 = this.get$_filtered();
    if (index !== (index | 0))
      throw $.iae(index);
    if (index < 0 || index >= t1.length)
      throw $.ioore(index);
    return t1[index];
  },
  get$iterator: function(_) {
    return $.JSArray_methods.get$iterator(this.get$_filtered());
  },
  sublist$2: function(_, start, end) {
    return $.JSArray_methods.sublist$2(this.get$_filtered(), start, end);
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  indexOf$2: function(_, element, start) {
    return $.JSArray_methods.indexOf$2(this.get$_filtered(), element, start);
  },
  indexOf$1: function($receiver, element) {
    return this.indexOf$2($receiver, element, 0);
  },
  get$last: function(_) {
    return $.JSArray_methods.get$last(this.get$_filtered());
  },
  $isList: function() {
    return true;
  },
  $asList: function() {
    return function () { return [null]; };
  },
  $isCollection: function() {
    return true;
  },
  $asCollection: function() {
    return function () { return [null]; };
  }
};

$$.FilteredElementList__filtered_anon = {"": "Closure;",
  call$1: function(n) {
    return typeof n === "object" && n !== null && n.$isElement();
  }
};

$$.main_anon = {"": "Closure;renderLoop_0",
  call$1: function(res) {
    var game;
    $.Grafix_resourceManager = $.resourceManager;
    game = $.Game$($.stage, this.renderLoop_0.get$juggler());
    $.stage.addChild$1(game);
    game.start$0(game);
  }
};

$$.main_anon0 = {"": "Closure;",
  call$1: function(error) {
    var t1, t2, t3;
    for (t1 = $.JSArray_methods.get$iterator($.resourceManager.get$failedResources()); t1.moveNext$0();) {
      t2 = t1.get$current();
      t3 = $.getInterceptor$x(t2);
      $.Primitives_printString("Loading resource " + $.S(t3.get$kind(t2)) + " " + $.S(t3.get$name(t2)) + " failed: " + $.S(t3.get$error(t2)));
    }
  }
};

$$.Animation = {"": "Object0;frames<,currentIndex,duration>,obj,cb",
  setCbOnFinish$1: function(cb) {
    this.cb = cb;
  },
  start$0: function(_) {
    var t1, t2;
    t1 = this.obj;
    t2 = this.frames;
    if (0 >= t2.length)
      throw $.ioore(0);
    t1.addChild$1(t2[0].get$bitmap());
    this.currentIndex = 0;
    this.duration = 0;
  },
  stop$0: function(_) {
    var t1, t2, t3;
    t1 = this.obj;
    t2 = this.frames;
    t3 = this.currentIndex;
    if (t3 !== (t3 | 0))
      throw $.iae(t3);
    if (t3 < 0 || t3 >= t2.length)
      throw $.ioore(t3);
    t1.removeChild$1(t2[t3].get$bitmap());
  },
  addFrame$1: function(frame) {
    this.frames.push(frame);
  },
  update$1: function(time) {
    var t1, t2, t3, frame, x, y, t4, shouldCallCb;
    this.duration = $.$add$ns(this.duration, time);
    t1 = this.frames;
    t2 = t1.length;
    if (t2 === 0)
      return;
    t3 = this.currentIndex;
    if (t3 !== (t3 | 0))
      throw $.iae(t3);
    if (t3 < 0 || t3 >= t2)
      throw $.ioore(t3);
    frame = t1[t3];
    t2 = $.getInterceptor$x(frame);
    if ($.$eq(t2.get$duration(frame), $.Animation_FOREVER) === true)
      return;
    if ($.$ge$n(this.duration, t2.get$duration(frame)) === true) {
      t3 = this.currentIndex;
      if (t3 !== (t3 | 0))
        throw $.iae(t3);
      if (t3 < 0 || t3 >= t1.length)
        throw $.ioore(t3);
      t3 = t1[t3].get$bitmap();
      x = t3.get$x(t3);
      t3 = this.currentIndex;
      if (t3 !== (t3 | 0))
        throw $.iae(t3);
      if (t3 < 0 || t3 >= t1.length)
        throw $.ioore(t3);
      t3 = t1[t3].get$bitmap();
      y = t3.get$y(t3);
      t3 = this.obj;
      t4 = this.currentIndex;
      if (t4 !== (t4 | 0))
        throw $.iae(t4);
      if (t4 < 0 || t4 >= t1.length)
        throw $.ioore(t4);
      t3.removeChild$1(t1[t4].get$bitmap());
      if ($.$eq($.$add$ns(this.currentIndex, 1), t1.length) === true) {
        this.currentIndex = 0;
        shouldCallCb = true;
      } else {
        this.currentIndex = $.$add$ns(this.currentIndex, 1);
        shouldCallCb = false;
      }
      t3 = this.currentIndex;
      if (t3 !== (t3 | 0))
        throw $.iae(t3);
      if (t3 < 0 || t3 >= t1.length)
        throw $.ioore(t3);
      t3 = t1[t3].get$bitmap();
      t3.set$x(t3, x);
      t3 = this.currentIndex;
      if (t3 !== (t3 | 0))
        throw $.iae(t3);
      if (t3 < 0 || t3 >= t1.length)
        throw $.ioore(t3);
      t3 = t1[t3].get$bitmap();
      t3.set$y(t3, y);
      t3 = this.obj;
      t4 = this.currentIndex;
      if (t4 !== (t4 | 0))
        throw $.iae(t4);
      if (t4 < 0 || t4 >= t1.length)
        throw $.ioore(t4);
      t3.addChild$1(t1[t4].get$bitmap());
      this.duration = $.$sub$n(this.duration, t2.get$duration(frame));
    } else
      shouldCallCb = false;
    if (shouldCallCb) {
      t1 = this.cb;
      if (t1 != null) {
        this.cb = null;
        t1.call$0();
      }
    }
  },
  getBitmap$0: function() {
    var t1, t2;
    t1 = this.frames;
    t2 = this.currentIndex;
    if (t2 !== (t2 | 0))
      throw $.iae(t2);
    if (t2 < 0 || t2 >= t1.length)
      throw $.ioore(t2);
    return t1[t2].get$bitmap();
  },
  Animation$1: function(obj) {
    this.currentIndex = 0;
    this.duration = 0;
    this.obj = obj;
  }
};

$$.AnimationFrame = {"": "Object0;bitmap<,duration>",
  AnimationFrame$2: function(bitmapName, duration) {
    this.bitmap = $.Bitmap$($.Grafix_resourceManager.getBitmapData$1(bitmapName), "auto");
    this.duration = duration;
  }
};

$$.Bird = {"": "Object;left_run<,right_run<,left_bleed,right_bleed,current<,speedX@,speedY<,isDead<,max_width,max_height,random,shouldTurnAround,lastFireTimestamp,x,y,width,height,lib4$Object$speedX,lib4$Object$speedY,direction,buttonMode,useHandCursor,hitArea,_graphics,_dropTarget,_children,_mouseChildren,_tabChildren,doubleClickEnabled,mouseEnabled,tabEnabled,tabIndex,_liblib3$_id,_x,_y,_pivotX,_pivotY,_scaleX,_scaleY,_skewX,_skewY,_rotation,_alpha,_visible,_off,_mask,_cache,_name,_parent,_tmpMatrix,_transformationMatrixPrivate,_transformationMatrixRefresh,_eventStreams",
  isDead$0: function() {
    return this.isDead.call$0();
  },
  get$height: function(_) {
    return this.max_height;
  },
  get$width: function(_) {
    return this.max_width;
  },
  setCurrentAnimation$1: function(animation) {
    var t1, t2;
    t1 = this.current;
    if (t1 == null ? animation == null : t1 === animation)
      return;
    if (this.isDead) {
      t2 = this.left_bleed;
      if (animation == null ? t2 != null : animation !== t2) {
        t2 = this.right_bleed;
        t2 = animation == null ? t2 != null : animation !== t2;
      } else
        t2 = false;
      if (t2)
        return;
    }
    if (t1 != null)
      t1.stop$0(t1);
    this.current = animation;
    t1 = this.current;
    t1.start$0(t1);
    if (this.x != null) {
      t1 = this.current.getBitmap$0();
      t1.set$x(t1, $.$sub$n(this.x, $.get$x$x($.Game_displayWindow)));
    }
    t1 = this.y;
    if (t1 != null) {
      this.y = $.min(t1, $.$sub$n($.WorldMap_fixedLeastHeight, this.get$height(this)));
      t1 = this.current.getBitmap$0();
      t1.set$y(t1, this.y);
    }
  },
  destroy$0: function() {
    $.remove$1$ax($.juggler, this);
  },
  advanceTime$1: function(time) {
    var t1;
    this.current.update$1(time);
    $.Collision_hasSomethingToStandOn(this);
    this.x = $.$add$ns(this.x, $.$mul$n(this.speedX, time));
    if ($.$lt$n(this.x, 0) === true)
      this.x = 0;
    t1 = this.current.getBitmap$0();
    t1.set$x(t1, $.$sub$n(this.x, $.get$x$x($.Game_displayWindow)));
    t1 = this.current.getBitmap$0();
    t1.set$y(t1, this.y);
    this.checkIfNeedFire$0();
  },
  Bleed$1: function(cb) {
    this.y = $.$sub$n(this.y, 50);
    if ($.$gt$n(this.speedX, 0) === true) {
      this.right_bleed.setCbOnFinish$1(cb);
      this.setCurrentAnimation$1(this.right_bleed);
    } else {
      this.left_bleed.setCbOnFinish$1(cb);
      this.setCurrentAnimation$1(this.left_bleed);
    }
  },
  checkIfNeedFire$0: function() {
    var now, t1;
    now = $.DateTime$_now();
    t1 = this.lastFireTimestamp;
    if (t1 != null && $.$lt$n($.$sub$n(now.millisecondsSinceEpoch, t1.millisecondsSinceEpoch), 400) === true)
      return;
    this.lastFireTimestamp = now;
    if ($.$gt$n($.$sub$n(this.x, $.get$x$x($.Game_player)), -50) === true && $.$lt$n($.$sub$n(this.x, $.get$x$x($.Game_player)), 400) === true && this.random.nextDouble$0() > 0.8) {
      $.Game_bulletManager.birdFire$1(this);
      $.Sounds_playSoundEffect("robot_fire");
    }
  },
  setDead$0: function() {
    this.isDead = true;
    $.Game_hudManager.oneBirdKilled$0();
    $.Sounds_playSoundEffect("explosion");
  },
  Bird$2: function(x, y) {
    var t1, t2, t3, t4, t5;
    this.left_run = $.Animation$(this);
    this.right_run = $.Animation$(this);
    this.left_bleed = $.Animation$(this);
    this.right_bleed = $.Animation$(this);
    this.left_run.addFrame$1($.AnimationFrame$("robot_leftmove1", 0.2));
    this.left_run.addFrame$1($.AnimationFrame$("robot_leftmove2", 0.2));
    this.left_run.addFrame$1($.AnimationFrame$("robot_leftmove3", 0.2));
    this.left_run.addFrame$1($.AnimationFrame$("robot_leftmove2", 0.2));
    this.right_run.addFrame$1($.AnimationFrame$("helicopter1", 0.05));
    this.right_run.addFrame$1($.AnimationFrame$("helicopter2", 0.05));
    this.right_run.addFrame$1($.AnimationFrame$("helicopter1", 0.05));
    this.right_run.addFrame$1($.AnimationFrame$("helicopter3", 0.05));
    this.right_run.addFrame$1($.AnimationFrame$("helicopter1", 0.05));
    this.right_run.addFrame$1($.AnimationFrame$("helicopter4", 0.05));
    this.left_bleed.addFrame$1($.AnimationFrame$("robot_leftblood1", 0.1));
    this.left_bleed.addFrame$1($.AnimationFrame$("robot_leftblood2", 0.1));
    this.left_bleed.addFrame$1($.AnimationFrame$("robot_leftblood3", 0.1));
    this.right_bleed.addFrame$1($.AnimationFrame$("explosion1", 0.1));
    this.right_bleed.addFrame$1($.AnimationFrame$("explosion2", 0.1));
    this.right_bleed.addFrame$1($.AnimationFrame$("explosion3", 0.1));
    for (t1 = $.JSArray_methods.get$iterator([this.left_run, this.right_run]); t1.moveNext$0();)
      for (t2 = $.JSArray_methods.get$iterator(t1.get$current().get$frames()); t2.moveNext$0();) {
        t3 = t2.get$current();
        t4 = this.max_width;
        t5 = t3.get$bitmap();
        this.max_width = $.max(t4, t5.get$width(t5));
        t5 = this.max_height;
        t3 = t3.get$bitmap();
        this.max_height = $.max(t5, t3.get$height(t3));
      }
    this.x = x;
    this.y = y;
    this.speedX = 120;
    this.speedY = 0;
    this.setCurrentAnimation$1(this.right_run);
    $.add$1$ax($.juggler, this);
  }
};

$$.BirdManager = {"": "Object0;birds,layer>,lastCreateTimestamp,random",
  advanceTime$1: function(time) {
    if (this.random.nextDouble$0() > 0.995) {
      $.Primitives_printString("create one bird.");
      this.createNewBird$2($.$lt$n($.$sub$n($.get$x$x($.Game_displayWindow), 50), 0) === true ? 0 : $.$sub$n($.get$x$x($.Game_displayWindow), 50), 40);
    }
    this.destroyDeadRobot$0();
  },
  destroyDeadRobot$0: function() {
    var birdsToRemove, t1, t2;
    birdsToRemove = $.HashSet$($.Bird);
    for (t1 = $.JSArray_methods.get$iterator(this.birds); t1.moveNext$0();) {
      t2 = t1.get$current();
      if (t2.get$isDead() === true) {
        birdsToRemove.add$1(birdsToRemove, t2);
        t2.Bleed$1(new $.BirdManager_destroyDeadRobot_anon(this, t2));
      } else if ($.$gt$n($.get$x$x(t2), $.get$width$x($.Game_worldMap)) === true) {
        birdsToRemove.add$1(birdsToRemove, t2);
        t2.destroy$0();
      }
    }
    $.JSArray_methods.removeAll$1(this.birds, birdsToRemove);
  },
  getAllBirds$0: function() {
    return this.birds;
  },
  createNewBird$2: function(x, y) {
    var bird = $.Bird$(x, y);
    this.birds.push(bird);
    this.layer.addChild$1(bird);
  },
  BirdManager$1: function(layer) {
    var t1;
    this.layer = layer;
    t1 = $.List_List($, $.Bird);
    $.setRuntimeTypeInfo(t1, [$.Bird]);
    this.birds = t1;
  }
};

$$.BirdManager_destroyDeadRobot_anon = {"": "Closure;this_0,bird_1",
  call$0: function() {
    var t1, t2;
    t1 = $.get$layer$x(this.this_0);
    t2 = this.bird_1;
    t1.removeChild$1(t2);
    t2.destroy$0();
  }
};

$$.Bullet = {"": "Object;speedX@,speedY<,accelerationX,accelerationY,dead_,direction>,hostile<,duration>,bitmap<,type>,random,x,y,width,height,lib4$Object$speedX,lib4$Object$speedY,lib4$Object$direction,buttonMode,useHandCursor,hitArea,_graphics,_dropTarget,_children,_mouseChildren,_tabChildren,doubleClickEnabled,mouseEnabled,tabEnabled,tabIndex,_liblib3$_id,_x,_y,_pivotX,_pivotY,_scaleX,_scaleY,_skewX,_skewY,_rotation,_alpha,_visible,_off,_mask,_cache,_name,_parent,_tmpMatrix,_transformationMatrixPrivate,_transformationMatrixRefresh,_eventStreams",
  get$pivotX: function() {
    return this.bitmap.get$pivotX();
  },
  get$width: function(_) {
    var t1;
    if (this.type === 1 && this.hostile !== true)
      return 10;
    else {
      t1 = this.bitmap;
      return t1.get$width(t1);
    }
  },
  get$height: function(_) {
    var t1;
    if (this.type === 1 && this.hostile !== true)
      return 10;
    else {
      t1 = this.bitmap;
      return t1.get$height(t1);
    }
  },
  advanceTime$1: function(time) {
    var oldX, oldY, t1, t2;
    this.duration = $.$sub$n(this.duration, time);
    if ($.$le$n(this.duration, 0))
      this.set$dead(true);
    oldX = this.x;
    oldY = this.y;
    if (this.bitmap.get$scaleX() < 0.5) {
      t1 = this.bitmap;
      t1.set$scaleX(t1.get$scaleX() + 0.02);
      t1 = this.bitmap;
      t1.set$scaleY(t1.get$scaleY() + 0.02);
    }
    this.x = $.$add$ns(this.x, $.$mul$n(this.speedX, time));
    this.y = $.$add$ns(this.y, $.$mul$n(this.speedY, time));
    if (this.type === 1 && this.hostile !== true)
      this.y = $.$add$ns(this.y, 5 * this.random.nextDouble$0() - 2.5);
    this.speedX = $.$add$ns(this.speedX, $.$mul$n(this.accelerationX, time));
    this.speedY = $.$add$ns(this.speedY, $.$mul$n(this.accelerationY, time));
    t1 = this.direction;
    if (t1 !== ($.$ge$n(this.speedX, 0) === true ? 1 : -1))
      this.speedX = 0;
    this.bitmap.set$rotation(Math.atan($.checkNum($.$div$n(this.speedY, this.speedX))));
    t1 = this.bitmap;
    t1.set$x(t1, $.$sub$n(this.x, $.get$x$x($.Game_displayWindow)));
    t1 = this.bitmap;
    t1.set$y(t1, this.y);
    if (this.get$dead())
      return true;
    if (this.hostile === true) {
      t1 = $.Game_player;
      if (this.collisionXY$3(this.x, this.y, t1) > 0) {
        $.Game_player.hurt$1(10);
        this.set$dead(true);
      }
    } else {
      for (t1 = $.JSArray_methods.get$iterator($.Game_robotManager.getAllRobots$0()); t1.moveNext$0();) {
        t2 = t1.get$current();
        if (this.collisionXY$3(this.x, this.y, t2) > 0) {
          t2.hurt$0();
          if (this.type !== 0)
            this.set$dead(true);
          $.Primitives_printString("one robot killed.");
          break;
        }
      }
      for (t1 = $.JSArray_methods.get$iterator($.Game_birdManager.getAllBirds$0()); t1.moveNext$0();) {
        t2 = t1.get$current();
        if (this.collisionXY$3(this.x, this.y, t2) > 0) {
          t2.setDead$0();
          this.set$dead(true);
          $.Primitives_printString("one robot killed.");
          break;
        }
      }
      if (this.type === 0)
        for (t1 = $.Game_bulletManager.get$bullets(), t1 = t1.get$iterator(t1); t1.moveNext$0();) {
          t2 = t1.get$current();
          if (t2.get$hostile() === true && t2.collision$1(this) > 0)
            t2.set$dead(true);
        }
    }
    if ($.Collision_isCollidedWithTerrain(this, oldX, oldY) > 0)
      this.set$dead(true);
  },
  set$dead: function(d) {
    this.dead_ = d;
    $.remove$1$ax($.juggler, this);
  },
  get$dead: function() {
    return this.dead_;
  },
  isDead$0: function() {
    return $.$ge$n(this.y, 440) === true || this.get$dead();
  },
  get$isDead: function() {
    return new $.BoundClosure$0(this, "isDead$0");
  },
  Bullet$gun$8: function(x, y, speedX, speedY, accelerationX, accelerationY, hostile, duration) {
    var t1, t2, t3, theta, l;
    this.type = 1;
    t1 = $.getInterceptor$n(speedX);
    this.direction = t1.$ge(speedX, 0) === true ? 1 : -1;
    t2 = $.Grafix_resourceManager;
    if (hostile)
      this.bitmap = $.Bitmap$(t2.getBitmapData$1("bullet2"), "auto");
    else
      this.bitmap = $.Bitmap$(t2.getBitmapData$1(this.direction === 1 ? "bullet1Right" : "bullet1Left"), "auto");
    t2 = this.bitmap;
    t3 = $.getInterceptor$n(x);
    t2.set$x(t2, t3.$sub(x, $.get$x$x($.Game_displayWindow)));
    t2.set$y(t2, y);
    t2.set$scaleX(2);
    t2.set$scaleY(2);
    if (hostile) {
      this.bitmap.set$scaleX(1);
      this.bitmap.set$scaleY(1);
    }
    if (t1.$ge(speedX, 0) === true)
      t1 = 0;
    else {
      t1 = this.bitmap;
      t1 = t1.get$width(t1);
    }
    this.x = t3.$sub(x, t1);
    this.y = y;
    this.speedX = speedX;
    this.speedY = $.$negate$n(speedY);
    this.accelerationX = accelerationX;
    this.accelerationY = -accelerationY;
    this.hostile = hostile;
    this.duration = duration;
    t1 = !hostile;
    if (t1 && $.Game_keyboardHandler.isPressingUpKey$0()) {
      this.speedY = $.$sub$n(this.speedY, 500);
      if ($.$lt$n(this.speedX, 0) === true) {
        theta = $.atan($.$div$n(this.speedY, this.speedX));
        t2 = this.y;
        t3 = this.bitmap;
        this.y = $.$sub$n(t2, $.$mul$n(t3.get$width(t3), $.sin(theta)));
        t3 = this.bitmap;
        l = $.$mul$n(t3.get$width(t3), $.tan(theta));
        this.x = $.$add$ns(this.x, $.$div$n($.$mul$n(l, $.sin(theta)), 2));
      }
    }
    if (t1 && $.Game_keyboardHandler.isPressingDownKey$0()) {
      this.speedY = $.$add$ns(this.speedY, 300);
      if ($.$lt$n(this.speedX, 0) === true) {
        t1 = this.y;
        t2 = this.bitmap;
        this.y = $.$sub$n(t1, $.$mul$n(t2.get$width(t2), $.sin($.atan($.$div$n(this.speedY, this.speedX)))));
      }
    }
    this.addChild$1(this.bitmap);
    $.add$1$ax($.juggler, this);
    this.advanceTime$1(0.0001);
  },
  Bullet$8: function(x, y, speedX, speedY, accelerationX, accelerationY, hostile, duration) {
    var t1, t2, t3;
    this.type = 0;
    t1 = speedX >= 0;
    this.direction = t1 ? 1 : -1;
    t2 = $.Grafix_resourceManager;
    this.bitmap = $.Bitmap$(t2.getBitmapData$1(this.direction === 1 ? "bulletright" : "bulletleft"), "auto");
    t2 = this.bitmap;
    t3 = $.getInterceptor$n(x);
    t2.set$x(t2, t3.$sub(x, $.get$x$x($.Game_displayWindow)));
    t2.set$y(t2, y);
    t2.set$scaleX(0.15);
    t2.set$scaleY(0.15);
    if (t1)
      t1 = 0;
    else {
      t1 = this.bitmap;
      t1 = t1.get$width(t1);
    }
    this.x = t3.$sub(x, t1);
    this.y = y;
    this.speedX = speedX;
    this.speedY = -speedY;
    this.accelerationX = accelerationX;
    this.accelerationY = -accelerationY;
    this.hostile = hostile;
    this.duration = duration;
    t1 = !hostile;
    if (t1 && $.Game_keyboardHandler.isPressingUpKey$0())
      this.speedY = $.$sub$n(this.speedY, 500);
    if (t1 && $.Game_keyboardHandler.isPressingDownKey$0())
      this.speedY = $.$add$ns(this.speedY, 300);
    this.addChild$1(this.bitmap);
    $.add$1$ax($.juggler, this);
  }
};

$$.BulletManager = {"": "Object0;layer>,bullets<,playerLastBombTimestamp,playerLastFireTimestamp,random",
  advanceTime$1: function(time) {
    var bulletsToRemove, t1, t2, now;
    bulletsToRemove = $.HashSet$($.Bullet);
    for (t1 = this.bullets, t1 = t1.get$iterator(t1); t1.moveNext$0();) {
      t2 = t1.get$current();
      if (t2.isDead$0() === true) {
        this.layer.removeChild$1(t2);
        bulletsToRemove.add$1(bulletsToRemove, t2);
        $.remove$1$ax($.juggler, t2);
      }
    }
    t1 = this.bullets;
    t1.removeAll$1(t1, bulletsToRemove);
    now = $.DateTime$_now();
    t1 = this.playerLastBombTimestamp;
    if (t1 == null || $.$gt$n($.$sub$n(now.millisecondsSinceEpoch, t1.millisecondsSinceEpoch), 2000) === true)
      $.Game_hudManager.setBombStatus$1(false);
  },
  robotFired$1: function(robot) {
    var t1, speedX, speedY, t2, t3, ratio, direction, bullet;
    t1 = $.getInterceptor$x(robot);
    speedX = $.$sub$n(t1.get$x(robot), $.get$x$x($.Game_player));
    speedY = $.$sub$n(t1.get$y(robot), $.get$y$x($.Game_player));
    t2 = $.getInterceptor$n(speedX);
    t3 = $.getInterceptor$n(speedY);
    ratio = 100 / Math.sqrt($.checkNum($.$add$ns(t2.$mul(speedX, speedX), t3.$mul(speedY, speedY))));
    speedX = $.$mul$n(t2.$mul(speedX, ratio), -1);
    speedY = t3.$mul(speedY, ratio);
    direction = t1.get$direction(robot);
    t2 = $.$eq(direction, 1) ? $.$add$ns($.$add$ns(t1.get$x(robot), t1.get$width(robot)), 15) : $.$sub$n(t1.get$x(robot), 5);
    t1 = $.$add$ns(t1.get$y(robot), $.$mul$n(t1.get$height(robot), 0.2));
    if (typeof direction !== "number")
      throw $.iae(direction);
    bullet = $.Bullet$gun(t2, t1, speedX, speedY, 0 * direction, 0, true, 5);
    t1 = this.bullets;
    t1.add$1(t1, bullet);
    this.layer.addChild$1(bullet);
  },
  birdFire$1: function(bird) {
    var speedY, t1, t2, ratio, bullet;
    speedY = $.$sub$n(bird.y, $.get$y$x($.Game_player));
    t1 = $.getInterceptor$n(speedY);
    t2 = t1.$mul(speedY, speedY);
    if (typeof t2 !== "number")
      throw $.iae(t2);
    ratio = 100 / Math.sqrt($.checkNum(0 + t2));
    speedY = t1.$mul(speedY, ratio);
    bullet = $.Bullet$gun($.$add$ns(bird.x, $.$div$n(bird.get$width(bird), 2)), $.$add$ns(bird.y, $.$div$n(bird.get$height(bird), 3)), 0 * ratio * -1, speedY, 0, 10, true, 5);
    t1 = this.bullets;
    t1.add$1(t1, bullet);
    this.layer.addChild$1(bullet);
  },
  playerFired$1: function(player) {
    var now, t1, t2, t3, t4, bullet;
    now = $.DateTime$_now();
    t1 = this.playerLastFireTimestamp;
    if (t1 != null && $.$lt$n($.$sub$n(now.millisecondsSinceEpoch, t1.millisecondsSinceEpoch), 200) === true)
      return;
    this.playerLastFireTimestamp = now;
    t1 = player.direction;
    t2 = player.x;
    t1 = t1 === 1 ? $.$add$ns(t2, player.get$width(player)) : t2;
    t2 = $.$add$ns(player.y, $.$mul$n(player.get$height(player), 0.2));
    t3 = player.direction;
    if (typeof t3 !== "number")
      throw $.iae(t3);
    t4 = player.speedX;
    if (typeof t4 !== "number")
      throw $.iae(t4);
    bullet = $.Bullet$gun(t1, t2, 500 * t3 + t4, 0, -10 * t3, 0, false, 5);
    t3 = this.bullets;
    t3.add$1(t3, bullet);
    this.layer.addChild$1(bullet);
  },
  playerBombed$1: function(player) {
    var now, t1, t2, t3, t4, bullet;
    now = $.DateTime$_now();
    t1 = this.playerLastBombTimestamp;
    if (t1 != null && $.$lt$n($.$sub$n(now.millisecondsSinceEpoch, t1.millisecondsSinceEpoch), 2000) === true)
      return;
    $.Game_hudManager.setBombStatus$1(true);
    $.Sounds_playSoundEffect("bomb");
    this.playerLastBombTimestamp = now;
    t1 = player.direction;
    t2 = player.x;
    t1 = t1 === 1 ? $.$add$ns(t2, player.get$width(player)) : t2;
    t2 = $.$add$ns(player.y, $.$mul$n(player.get$height(player), 0.2));
    t3 = player.direction;
    if (typeof t3 !== "number")
      throw $.iae(t3);
    t4 = player.speedX;
    if (typeof t4 !== "number")
      throw $.iae(t4);
    bullet = $.Bullet$(t1, t2, 500 * t3 + t4, 200, -100 * t3, -1000, false, 100);
    t3 = this.bullets;
    t3.add$1(t3, bullet);
    this.layer.addChild$1(bullet);
  },
  BulletManager$1: function(layer) {
    this.layer = layer;
    this.bullets = $.HashSet$($.Bullet);
  }
};

$$.DisplayWindow = {"": "Object0;width*,height*,x*,y*",
  updateAbosultePos$1: function(player) {
    var worldMap, t1, t2, t3;
    worldMap = $.Game_worldMap;
    if ($.$gt$n($.$sub$n(player.x, this.x), $.$div$n($.$mul$n(this.width, 3), 5)) === true) {
      t1 = $.$sub$n($.get$width$x(worldMap), this.width);
      t2 = player.x;
      t3 = this.width;
      if (typeof t3 !== "number")
        throw $.iae(t3);
      this.x = $.min(t1, $.$sub$n(t2, 3 * t3 / 5));
    } else if ($.$lt$n($.$sub$n(player.x, this.x), $.$div$n($.$mul$n(this.width, 2), 5)) === true)
      this.x = $.max(0, $.$sub$n(player.x, $.$div$n($.$mul$n(this.width, 2), 5)));
  },
  DisplayWindow$0: function() {
    this.width = $.Statics_BACKGROUND_WIDTH;
    this.height = 480;
    this.x = 0;
    this.y = 0;
  }
};

$$.Game = {"": "Sprite;_gameLayer,_backgroundLayer,_interfaceLayer,started,juggler<,stage<,buttonMode,useHandCursor,hitArea,_graphics,_dropTarget,_children,_mouseChildren,_tabChildren,doubleClickEnabled,mouseEnabled,tabEnabled,tabIndex,_liblib3$_id,_x,_y,_pivotX,_pivotY,_scaleX,_scaleY,_skewX,_skewY,_rotation,_alpha,_visible,_off,_mask,_cache,_name,_parent,_tmpMatrix,_transformationMatrixPrivate,_transformationMatrixRefresh,_eventStreams",
  start$0: function(_) {
    var t1;
    $.Primitives_printString("start");
    if (this.started)
      return;
    this.started = true;
    $.Game_displayWindow = $.DisplayWindow$();
    $.Primitives_printString("displayWindow created");
    $.Game_worldMap = $.WorldMap$();
    $.Primitives_printString("worldMap created.");
    this._backgroundLayer.addChild$1($.Game_worldMap);
    $.Game_player = $.Player$();
    $.Primitives_printString("player create");
    this._gameLayer.addChild$1($.Game_player);
    t1 = this.juggler;
    t1.add$1(t1, $.Game_player);
    $.Game_robotManager = $.RobotManager$(this._gameLayer);
    $.Game_birdManager = $.BirdManager$(this._gameLayer);
    $.Game_bulletManager = $.BulletManager$(this._gameLayer);
    $.Game_keyboardHandler = $.KeyboardHandler$($.Game_player);
    $.Game_hudManager = $.HUDManager$(this._interfaceLayer);
    $.Game_touchManager = $.TouchManager$();
    t1 = this.juggler;
    t1.add$1(t1, $.Game_robotManager);
    t1 = this.juggler;
    t1.add$1(t1, $.Game_birdManager);
    t1 = this.juggler;
    t1.add$1(t1, $.Game_worldMap);
    t1 = this.juggler;
    t1.add$1(t1, $.Game_robotManager);
    t1 = this.juggler;
    t1.add$1(t1, $.Game_bulletManager);
    t1 = this.juggler;
    t1.add$1(t1, $.Game_player);
    t1 = this.juggler;
    t1.add$1(t1, $.Game_keyboardHandler);
    $.Sounds_playBackground();
    $.Game_touchManager.initEventHandler$0();
  },
  Game$2: function(stage, juggler) {
    this.started = false;
    this.juggler = juggler;
    this.stage = stage;
    this._backgroundLayer = $.Sprite$();
    this._gameLayer = $.Sprite$();
    this._interfaceLayer = $.Sprite$();
    this.addChild$1(this._backgroundLayer);
    this.addChild$1(this._gameLayer);
    this.addChild$1(this._interfaceLayer);
  }
};

$$.HUDManager = {"": "Object0;tf,scoreField,blood_background,blood_real,layer>,score,bloodLeft,bloodRight",
  oneBirdKilled$0: function() {
    this.score = this.score + 30;
    var t1 = this.scoreField;
    t1.set$text(t1, $.JSNumber_methods.toString$0(this.score));
  },
  oneRobotKilled$0: function() {
    this.score = this.score + 20;
    var t1 = this.scoreField;
    t1.set$text(t1, $.JSNumber_methods.toString$0(this.score));
  },
  updateBloodStrip$1: function(player) {
    var scale = player.hp / 100;
    if (scale < 0)
      scale = 0;
    this.blood_real.set$scaleX(scale);
  },
  setBombStatus$1: function(charging) {
    var t1 = this.tf;
    if (charging) {
      t1.set$text(t1, "Bomb Charging");
      this.tf.set$textColor(4294901760);
    } else {
      t1.set$text(t1, "Bomb Ready!");
      this.tf.set$textColor(4278222848);
    }
  },
  showEnd$1: function(win) {
    var t = $.TextField$();
    t.set$x(t, 440);
    t.set$y(t, 200);
    t.set$width(t, 700);
    if (win) {
      t.set$defaultTextFormat($.TextFormat$("Helvetica,Arial", 80, 4291979550, "left", false, 0, false, 0, 0, 0, false));
      t.set$text(t, "YOU WIN!");
    } else {
      t.set$defaultTextFormat($.TextFormat$("Helvetica,Arial", 80, 4294901760, "left", false, 0, false, 0, 0, 0, false));
      t.set$text(t, "GAME OVER!");
    }
    this.layer.addChild$1(t);
  },
  HUDManager$1: function(layer) {
    var t1, t2;
    this.layer = layer;
    this.tf = $.TextField$();
    t1 = this.tf;
    t1.set$x(t1, 20);
    t1 = this.tf;
    t1.set$y(t1, 10);
    layer.addChild$1(this.tf);
    this.scoreField = $.TextField$();
    this.scoreField.set$defaultTextFormat($.TextFormat$("Helvetica,Arial", 16, 4278190080, "left", false, 0, false, 0, 0, 0, false));
    t1 = this.scoreField;
    t1.set$x(t1, $.$sub$n($.Statics_BACKGROUND_WIDTH, 60));
    t1 = this.scoreField;
    t1.set$y(t1, 10);
    layer.addChild$1(this.scoreField);
    t1 = this.scoreField;
    t1.set$text(t1, $.JSNumber_methods.toString$0(this.score));
    $.print("in HudManager");
    this.blood_background = $.Bitmap$($.BitmapData$(300, 15, false, 4294901760), "auto");
    this.blood_real = $.Bitmap$($.BitmapData$(300, 15, false, 4278222848), "auto");
    t1 = this.blood_background;
    t2 = this.blood_real;
    t2.set$x(t2, 340);
    t1.set$x(t1, 340);
    t1 = this.blood_background;
    t2 = this.blood_real;
    t2.set$y(t2, 10);
    t1.set$y(t1, 10);
    layer.addChild$1(this.blood_background);
    layer.addChild$1(this.blood_real);
  }
};

$$.KeyboardHandler = {"": "Object0;keyCodes<,player",
  advanceTime$1: function(time) {
    var t1, t2, t3, t4;
    for (t1 = this.keyCodes, t2 = t1.get$iterator(t1); t2.moveNext$0();) {
      t3 = t2.get$current();
      switch (t3) {
        case 65:
          this.player.onFire$0();
          break;
        case 70:
          this.player.onBomb$0();
          break;
        case 37:
        case 39:
          if (t1.contains$1(t1, 37) && t1.contains$1(t1, 39))
            break;
          t3 = $.$eq(t3, 37);
          t4 = this.player;
          if (t3 === true)
            t4.onLeft$0();
          else
            t4.onRight$0();
          break;
        case 40:
          this.player.onCrouch$0();
          break;
        case 32:
          this.player.onJump$0();
          break;
      }
    }
  },
  isPressingUpKey$0: function() {
    var t1 = this.keyCodes;
    return t1.contains$1(t1, 38);
  },
  isPressingDownKey$0: function() {
    var t1 = this.keyCodes;
    return t1.contains$1(t1, 40);
  },
  KeyboardHandler$1: function(player) {
    this.player = player;
    $.get$onKeyDown$x($.window()).listen$1(new $.anon0(this));
    $.get$onKeyUp$x($.window()).listen$1(new $.anon1(this, player));
  }
};

$$.anon0 = {"": "Closure;this_0",
  call$1: function(e) {
    var t1 = this.this_0.get$keyCodes();
    t1.add$1(t1, $.get$keyCode$x(e));
  }
};

$$.anon1 = {"": "Closure;this_1,player_2",
  call$1: function(e) {
    var t1, t2, t3;
    t1 = this.this_1;
    t2 = t1.get$keyCodes();
    t3 = $.getInterceptor$x(e);
    t2.remove$1(t2, t3.get$keyCode(e));
    switch (t3.get$keyCode(e)) {
      case 37:
      case 39:
      case 40:
      case 32:
        t2 = t1.get$keyCodes();
        if (!t2.contains$1(t2, 37)) {
          t2 = t1.get$keyCodes();
          if (!t2.contains$1(t2, 39)) {
            t1 = t1.get$keyCodes();
            t1 = t1.contains$1(t1, 32);
          } else
            t1 = true;
        } else
          t1 = true;
        if (t1)
          break;
        this.player_2.onStand$0();
        break;
    }
  }
};

$$.Object = {"": "Sprite;x*,y*,width*,height*,speedX@,speedY<,direction>",
  collisionWithDirection$3: function(other, oldX, oldY) {
    var xAxis = this.collisionXY$3(this.x, oldY, other) !== 0 ? 1 : 0;
    return xAxis + (this.collisionXY$3(oldX, this.y, other) !== 0 ? 2 : 0);
  },
  collision$1: function(other) {
    return this.collisionXY$3(this.x, this.y, other);
  },
  collisionXY$3: function(x, y, other) {
    var t1, t2;
    t1 = $.getInterceptor$x(other);
    t2 = $.getInterceptor$n(x);
    if (t2.$lt(x, $.$add$ns(t1.get$x(other), t1.get$width(other))) === true)
      if ($.$gt$n(t2.$add(x, this.get$width(this)), t1.get$x(other)) === true) {
        t2 = $.getInterceptor$n(y);
        t1 = t2.$lt(y, $.$add$ns(t1.get$y(other), t1.get$height(other))) === true && $.$gt$n(t2.$add(y, this.get$height(this)), t1.get$y(other)) === true;
      } else
        t1 = false;
    else
      t1 = false;
    return t1 ? 1 : 0;
  },
  toString$0: function(_) {
    return $.JSString_methods.$add($.JSString_methods.$add($.JSString_methods.$add($.JSString_methods.$add($.JSString_methods.$add($.JSString_methods.$add($.JSString_methods.$add($.JSString_methods.$add($.JSString_methods.$add($.JSString_methods.$add($.JSString_methods.$add($.JSString_methods.$add("{X: ", $.toStringAsFixed$1$n(this.x, 2)), ", Y: "), $.toStringAsFixed$1$n(this.y, 2)), ", width: "), $.toStringAsFixed$1$n(this.get$width(this), 2)), ", height: "), $.toStringAsFixed$1$n(this.get$height(this), 2)), ", speedX: "), $.toStringAsFixed$1$n(this.get$speedX(), 2)), ", speedY: "), $.toStringAsFixed$1$n(this.get$speedY(), 2)), "}");
  }
};

$$.Player = {"": "Object;left_stand,right_stand,left_crouch,right_crouch,left_run<,right_run<,left_die,right_die,left_jump,right_jump,current<,hp,state,isDead<,max_width,max_height,x,y,width,height,speedX,speedY,direction,buttonMode,useHandCursor,hitArea,_graphics,_dropTarget,_children,_mouseChildren,_tabChildren,doubleClickEnabled,mouseEnabled,tabEnabled,tabIndex,_liblib3$_id,_x,_y,_pivotX,_pivotY,_scaleX,_scaleY,_skewX,_skewY,_rotation,_alpha,_visible,_off,_mask,_cache,_name,_parent,_tmpMatrix,_transformationMatrixPrivate,_transformationMatrixRefresh,_eventStreams",
  isDead$0: function() {
    return this.isDead.call$0();
  },
  get$width: function(_) {
    var t1 = this.max_width;
    if (typeof t1 !== "number")
      return this.get$width$bailout2(1, t1);
    return t1 - 40;
  },
  get$width$bailout2: function(state0, t1) {
    return $.$sub$n(t1, 40);
  },
  get$height: function(_) {
    var t1 = this.max_height;
    if (typeof t1 !== "number")
      return this.get$height$bailout2(1, t1);
    return t1 - 0;
  },
  get$height$bailout2: function(state0, t1) {
    return $.$sub$n(t1, 0);
  },
  setCurrentAnimation$1: function(animation) {
    var t1 = this.current;
    if (t1 == null ? animation == null : t1 === animation)
      return;
    if (t1 != null)
      t1.stop$0(t1);
    this.current = animation;
    t1 = this.current;
    t1.start$0(t1);
    if (this.x != null) {
      t1 = this.current.getBitmap$0();
      t1.set$x(t1, $.$sub$n($.$sub$n(this.x, $.get$x$x($.Game_displayWindow)), 20));
    }
    t1 = this.y;
    if (t1 != null) {
      this.y = $.min(t1, $.$sub$n($.WorldMap_fixedLeastHeight, this.get$height(this)));
      t1 = this.current.getBitmap$0();
      t1.set$y(t1, $.$sub$n(this.y, 0));
    }
  },
  advanceTime$1: function(time) {
    var oldX, oldY, somethingToStandOn, deltaX, deltaY, attempt, attempt0, collision, t1, t2;
    oldX = this.x;
    if (typeof oldX !== "number")
      return this.advanceTime$1$bailout(1, time, oldX);
    oldY = this.y;
    if (typeof oldY !== "number")
      return this.advanceTime$1$bailout(2, time, oldX, oldY);
    this.current.update$1(time);
    somethingToStandOn = $.Collision_hasSomethingToStandOn(this);
    if (this.state === 1) {
      this.x = $.$add$ns(this.x, $.$mul$n(this.speedX, time));
      if ($.$lt$n(this.x, 0) === true)
        this.x = 0;
      if ($.$gt$n(this.x, $.$sub$n($.get$width$x($.Game_worldMap), this.get$width(this))) === true)
        this.x = $.$sub$n($.get$width$x($.Game_worldMap), this.get$width(this));
    }
    if (somethingToStandOn == null) {
      this.speedY = $.$add$ns(this.speedY, 1);
      this.y = $.$add$ns(this.y, this.speedY);
      if ($.$gt$n(this.y, $.$sub$n($.WorldMap_fixedLeastHeight, this.get$height(this))) === true) {
        this.speedY = 0;
        this.y = $.$sub$n($.WorldMap_fixedLeastHeight, this.get$height(this));
      }
    } else if ($.$gt$n(this.speedY, 0)) {
      this.speedY = 0;
      this.y = $.$sub$n($.get$y$x(somethingToStandOn), this.get$height(this));
    } else if ($.$lt$n(this.speedY, 0))
      this.y = $.$add$ns(this.y, this.speedY);
    deltaX = $.$sub$n(this.x, oldX);
    if (typeof deltaX !== "number")
      return this.advanceTime$1$bailout(3, 0, oldX, oldY, deltaX);
    deltaY = $.$sub$n(this.y, oldY);
    if (typeof deltaY !== "number")
      return this.advanceTime$1$bailout(4, 0, oldX, oldY, deltaX, deltaY);
    for (attempt = 3; attempt0 = attempt - 1, attempt >= 0; attempt = attempt0) {
      collision = $.Collision_isCollidedWithTerrain(this, oldX, oldY);
      if (collision === 1 || collision === 3) {
        this.x = $.$sub$n(this.x, deltaX);
        oldX -= deltaX;
      }
      if (collision >= 2) {
        this.speedY = 0;
        this.y = $.$sub$n(this.y, deltaY);
        oldY -= deltaY;
      }
      if (collision === 0)
        break;
    }
    for (t1 = $.JSArray_methods.get$iterator($.Game_robotManager.getAllRobots$0()); t1.moveNext$0();) {
      t2 = t1.get$current();
      if (this.collisionXY$3(this.x, this.y, t2) > 0) {
        this.hurt$1(1);
        break;
      }
    }
    t1 = this.current.getBitmap$0();
    t1.set$x(t1, $.$sub$n($.$sub$n(this.x, $.get$x$x($.Game_displayWindow)), 20));
    t1 = this.current.getBitmap$0();
    t1.set$y(t1, $.$sub$n(this.y, 0));
    $.Game_displayWindow.updateAbosultePos$1(this);
    if ($.Collision_reachedEnd(this)) {
      $.Game_hudManager.showEnd$1(true);
      $.juggler.purge$0();
    }
  },
  advanceTime$1$bailout: function(state0, time, oldX, oldY, deltaX, deltaY) {
    switch (state0) {
      case 0:
        oldX = this.x;
      case 1:
        state0 = 0;
        oldY = this.y;
      case 2:
        state0 = 0;
        this.current.update$1(time);
        somethingToStandOn = $.Collision_hasSomethingToStandOn(this);
        if (this.state === 1) {
          this.x = $.$add$ns(this.x, $.$mul$n(this.speedX, time));
          if ($.$lt$n(this.x, 0) === true)
            this.x = 0;
          if ($.$gt$n(this.x, $.$sub$n($.get$width$x($.Game_worldMap), this.get$width(this))) === true)
            this.x = $.$sub$n($.get$width$x($.Game_worldMap), this.get$width(this));
        }
        if (somethingToStandOn == null) {
          this.speedY = $.$add$ns(this.speedY, 1);
          this.y = $.$add$ns(this.y, this.speedY);
          if ($.$gt$n(this.y, $.$sub$n($.WorldMap_fixedLeastHeight, this.get$height(this))) === true) {
            this.speedY = 0;
            this.y = $.$sub$n($.WorldMap_fixedLeastHeight, this.get$height(this));
          }
        } else if ($.$gt$n(this.speedY, 0)) {
          this.speedY = 0;
          this.y = $.$sub$n($.get$y$x(somethingToStandOn), this.get$height(this));
        } else if ($.$lt$n(this.speedY, 0))
          this.y = $.$add$ns(this.y, this.speedY);
        deltaX = $.$sub$n(this.x, oldX);
      case 3:
        state0 = 0;
        deltaY = $.$sub$n(this.y, oldY);
      case 4:
        var somethingToStandOn, attempt, attempt0, collision, t1, t2;
        state0 = 0;
        for (attempt = 3; attempt0 = attempt - 1, attempt >= 0; attempt = attempt0) {
          collision = $.Collision_isCollidedWithTerrain(this, oldX, oldY);
          if (collision === 1 || collision === 3) {
            this.x = $.$sub$n(this.x, deltaX);
            oldX = $.$sub$n(oldX, deltaX);
          }
          if (collision >= 2) {
            this.speedY = 0;
            this.y = $.$sub$n(this.y, deltaY);
            oldY = $.$sub$n(oldY, deltaY);
          }
          if (collision === 0)
            break;
        }
        for (t1 = $.JSArray_methods.get$iterator($.Game_robotManager.getAllRobots$0()); t1.moveNext$0();) {
          t2 = t1.get$current();
          if (this.collisionXY$3(this.x, this.y, t2) > 0) {
            this.hurt$1(1);
            break;
          }
        }
        t1 = this.current.getBitmap$0();
        t1.set$x(t1, $.$sub$n($.$sub$n(this.x, $.get$x$x($.Game_displayWindow)), 20));
        t1 = this.current.getBitmap$0();
        t1.set$y(t1, $.$sub$n(this.y, 0));
        $.Game_displayWindow.updateAbosultePos$1(this);
        if ($.Collision_reachedEnd(this)) {
          $.Game_hudManager.showEnd$1(true);
          $.juggler.purge$0();
        }
    }
  },
  onLeft$0: function() {
    var t1;
    if (this.state === 4)
      return;
    this.direction = -1;
    if (this.state === 3)
      return;
    t1 = this.speedX;
    if (typeof t1 !== "number")
      return this.onLeft$0$bailout(1, t1);
    if (t1 >= 0)
      this.speedX = -280;
    else {
      this.speedX = t1 - 3;
      t1 = this.speedX;
      if (typeof t1 !== "number")
        return this.onLeft$0$bailout(3, t1);
      if (t1 < -450)
        this.speedX = -450;
    }
    this.state = 1;
    this.setCurrentAnimation$1(this.left_run);
  },
  onLeft$0$bailout: function(state0, t1) {
    switch (state0) {
      case 0:
        if (this.state === 4)
          return;
        this.direction = -1;
        if (this.state === 3)
          return;
        t1 = this.speedX;
      case 1:
        state0 = 0;
      default:
        if (state0 === 0 && $.$ge$n(t1, 0) === true)
          this.speedX = -280;
        else
          switch (state0) {
            case 0:
              t1 = this.speedX;
            case 2:
              state0 = 0;
              this.speedX = $.$sub$n(t1, 3);
              t1 = this.speedX;
            case 3:
              state0 = 0;
              if ($.$lt$n(t1, -450) === true)
                this.speedX = -450;
          }
        this.state = 1;
        this.setCurrentAnimation$1(this.left_run);
    }
  },
  onRight$0: function() {
    var t1;
    if (this.state === 4)
      return;
    this.direction = 1;
    if (this.state === 3)
      return;
    t1 = this.speedX;
    if (typeof t1 !== "number")
      return this.onRight$0$bailout(1, t1);
    if (t1 <= 0)
      this.speedX = 280;
    else {
      this.speedX = t1 + 3;
      t1 = this.speedX;
      if (typeof t1 !== "number")
        return this.onRight$0$bailout(3, t1);
      if (t1 > 450)
        this.speedX = 450;
    }
    this.state = 1;
    this.setCurrentAnimation$1(this.right_run);
  },
  onRight$0$bailout: function(state0, t1) {
    switch (state0) {
      case 0:
        if (this.state === 4)
          return;
        this.direction = 1;
        if (this.state === 3)
          return;
        t1 = this.speedX;
      case 1:
        state0 = 0;
      default:
        if (state0 === 0 && $.$le$n(t1, 0) === true)
          this.speedX = 280;
        else
          switch (state0) {
            case 0:
              t1 = this.speedX;
            case 2:
              state0 = 0;
              this.speedX = $.$add$ns(t1, 3);
              t1 = this.speedX;
            case 3:
              state0 = 0;
              if ($.$gt$n(t1, 450) === true)
                this.speedX = 450;
          }
        this.state = 1;
        this.setCurrentAnimation$1(this.right_run);
    }
  },
  onJump$0: function() {
    var t1, sX;
    if (this.state === 4)
      return;
    if ($.Collision_hasSomethingToStandOn(this) == null || this.state === 3)
      return;
    t1 = this.speedX;
    if (typeof t1 !== "number")
      return this.onJump$0$bailout(1, t1);
    if (t1 === 0)
      sX = 280;
    else if (t1 > 0)
      sX = t1;
    else {
      t1 = -t1;
      sX = t1;
    }
    this.speedY = -15 - (sX - 280) * 0.029411765;
    $.Primitives_printString("speedY : " + $.S(this.speedY));
    if (this.state !== 1)
      this.state = 2;
  },
  onJump$0$bailout: function(state0, t1, t3) {
    switch (state0) {
      case 0:
        if (this.state === 4)
          return;
        if ($.Collision_hasSomethingToStandOn(this) == null || this.state === 3)
          return;
        t1 = this.speedX;
      case 1:
        state0 = 0;
      default:
        var sX;
        if (state0 === 0 && $.$eq(t1, 0) === true)
          sX = 280;
        else
          switch (state0) {
            case 0:
              t1 = this.speedX;
            case 2:
              state0 = 0;
              t1 = $.$gt$n(t1, 0) === true;
              t3 = this.speedX;
            case 3:
              state0 = 0;
              sX = t1 ? t3 : $.$negate$n(t3);
          }
        t1 = $.$mul$n($.$sub$n(sX, 280), 0.029411765);
        if (typeof t1 !== "number")
          throw $.iae(t1);
        this.speedY = -15 - t1;
        $.Primitives_printString("speedY : " + $.S(this.speedY));
        if (this.state !== 1)
          this.state = 2;
    }
  },
  onStand$0: function() {
    if (this.state === 4)
      return;
    this.speedX = 0;
    if (this.direction === -1)
      this.setCurrentAnimation$1(this.left_stand);
    else
      this.setCurrentAnimation$1(this.right_stand);
    this.state = 0;
    $.Sounds_playSoundEffect("clip_change");
  },
  onCrouch$0: function() {
  },
  onFire$0: function() {
    if (this.state === 4)
      return;
    $.Game_bulletManager.playerFired$1(this);
    $.Sounds_playSoundEffect("rifle");
  },
  onBomb$0: function() {
    if (this.state === 4)
      return;
    $.Game_bulletManager.playerBombed$1(this);
  },
  hurt$1: function(v) {
    if (this.isDead)
      return;
    this.hp = this.hp - v;
    if (this.hp <= 0)
      this.setDead$0();
    $.Game_hudManager.updateBloodStrip$1(this);
  },
  setDead$0: function() {
    $.Game_hudManager.showEnd$1(false);
    this.state = 4;
    if (this.direction === -1)
      this.setCurrentAnimation$1(this.left_die);
    else
      this.setCurrentAnimation$1(this.right_die);
    this.isDead = true;
    $.Sounds_playSoundEffect("player_dead");
  },
  toString$0: function(_) {
    return $.JSString_methods.$add("Player: ", $.Object.prototype.toString$0.call(this, this));
  },
  Player$0: function() {
    var t1, t2, t3, t4, t5;
    this.left_stand = $.Animation$(this);
    this.right_stand = $.Animation$(this);
    this.left_crouch = $.Animation$(this);
    this.right_crouch = $.Animation$(this);
    this.left_run = $.Animation$(this);
    this.right_run = $.Animation$(this);
    this.left_die = $.Animation$(this);
    this.right_die = $.Animation$(this);
    this.left_jump = $.Animation$(this);
    this.right_jump = $.Animation$(this);
    $.print("here");
    this.left_stand.addFrame$1($.AnimationFrame$("player_leftstand", $.Animation_FOREVER));
    this.right_stand.addFrame$1($.AnimationFrame$("player_rightstand", $.Animation_FOREVER));
    this.left_crouch.addFrame$1($.AnimationFrame$("player_leftcrouch", $.Animation_FOREVER));
    this.right_crouch.addFrame$1($.AnimationFrame$("player_rightcrouch", $.Animation_FOREVER));
    this.left_run.addFrame$1($.AnimationFrame$("player_leftrun1", 0.2));
    this.left_run.addFrame$1($.AnimationFrame$("player_leftrun2", 0.2));
    this.left_run.addFrame$1($.AnimationFrame$("player_leftrun3", 0.2));
    this.left_run.addFrame$1($.AnimationFrame$("player_leftrun2", 0.2));
    this.right_run.addFrame$1($.AnimationFrame$("player_rightrun1", 0.2));
    this.right_run.addFrame$1($.AnimationFrame$("player_rightrun2", 0.2));
    this.right_run.addFrame$1($.AnimationFrame$("player_rightrun3", 0.2));
    this.right_run.addFrame$1($.AnimationFrame$("player_rightrun2", 0.2));
    this.left_die.addFrame$1($.AnimationFrame$("player_leftdie", $.Animation_FOREVER));
    this.right_die.addFrame$1($.AnimationFrame$("player_rightdie", $.Animation_FOREVER));
    this.left_jump.addFrame$1($.AnimationFrame$("player_leftjump", $.Animation_FOREVER));
    this.right_jump.addFrame$1($.AnimationFrame$("player_rightjump", $.Animation_FOREVER));
    for (t1 = $.JSArray_methods.get$iterator([this.left_stand, this.right_stand, this.left_crouch, this.right_crouch, this.left_run, this.right_run, this.left_die, this.right_die, this.left_jump, this.right_jump]); t1.moveNext$0();)
      for (t2 = $.JSArray_methods.get$iterator(t1.get$current().get$frames()); t2.moveNext$0();) {
        t3 = t2.get$current();
        t4 = this.max_width;
        t5 = t3.get$bitmap();
        this.max_width = $.max(t4, t5.get$width(t5));
        t5 = this.max_height;
        t3 = t3.get$bitmap();
        this.max_height = $.max(t5, t3.get$height(t3));
      }
    this.setCurrentAnimation$1(this.right_stand);
    this.x = 100;
    this.y = 0;
    t1 = this.current.getBitmap$0();
    t1.set$x(t1, $.$sub$n(this.x, 20));
    t1 = this.current.getBitmap$0();
    t1.set$y(t1, $.$sub$n(this.y, 0));
    this.speedX = 0;
    this.speedY = 0;
    this.direction = 1;
    this.state = 0;
  }
};

$$.Robot = {"": "Object;hp,left_run<,right_run<,left_bleed,right_bleed,left_fire<,right_fire<,left_hurt,right_hurt,current<,speedX@,speedY<,isDead<,max_width,max_height,random,shouldTurnAround,lastFireTimestamp,x,y,width,height,lib4$Object$speedX,lib4$Object$speedY,direction,buttonMode,useHandCursor,hitArea,_graphics,_dropTarget,_children,_mouseChildren,_tabChildren,doubleClickEnabled,mouseEnabled,tabEnabled,tabIndex,_liblib3$_id,_x,_y,_pivotX,_pivotY,_scaleX,_scaleY,_skewX,_skewY,_rotation,_alpha,_visible,_off,_mask,_cache,_name,_parent,_tmpMatrix,_transformationMatrixPrivate,_transformationMatrixRefresh,_eventStreams",
  isDead$0: function() {
    return this.isDead.call$0();
  },
  hurt$0: function() {
    var oldAnimation, t1, newAnimation;
    this.hp = this.hp - 1;
    if (this.hp <= 0) {
      this.isDead = true;
      $.Game_hudManager.oneRobotKilled$0();
      $.Sounds_playSoundEffect("robot_dead");
    } else {
      $.Sounds_playSoundEffect("robot_dead");
      oldAnimation = this.current;
      t1 = $.getInterceptor(oldAnimation);
      if (!(t1.$eq(oldAnimation, this.right_hurt) === true || t1.$eq(oldAnimation, this.left_hurt) === true)) {
        newAnimation = this.direction === 1 ? this.right_hurt : this.left_hurt;
        this.setCurrentAnimationWithCb$2(newAnimation, new $.Robot_hurt_anon(this, oldAnimation));
      }
    }
  },
  changeDirection$1: function(directioin) {
    if (this.direction === 0) {
      this.speedX = 50;
      this.direction = 1;
      this.setCurrentAnimation$1(this.right_run);
    } else {
      this.speedX = -50;
      this.direction = -1;
      this.setCurrentAnimation$1(this.left_run);
    }
  },
  get$height: function(_) {
    return this.max_height;
  },
  get$width: function(_) {
    return this.max_width;
  },
  setCurrentAnimationWithCb$2: function(animation, cb) {
    animation.setCbOnFinish$1(cb);
    this.setCurrentAnimation$1(animation);
  },
  setCurrentAnimation$1: function(animation) {
    var t1;
    if ($.$eq(this.current, animation) === true)
      return;
    if (this.isDead) {
      t1 = $.getInterceptor(animation);
      if (t1.$eq(animation, this.left_bleed) !== true && t1.$eq(animation, this.right_bleed) !== true)
        return;
    }
    t1 = this.current;
    if (t1 != null)
      $.stop$0$x(t1);
    this.current = animation;
    $.start$0$x(this.current);
    if (this.x != null) {
      t1 = this.current.getBitmap$0();
      t1.set$x(t1, $.$sub$n(this.x, $.get$x$x($.Game_displayWindow)));
    }
    t1 = this.y;
    if (t1 != null) {
      this.y = $.min(t1, $.$sub$n($.WorldMap_fixedLeastHeight, this.get$height(this)));
      t1 = this.current.getBitmap$0();
      t1.set$y(t1, this.y);
    }
  },
  destroy$0: function() {
    $.remove$1$ax($.juggler, this);
  },
  checkIfNeedFire$0: function() {
    var now, t1, oldSpeedX;
    now = $.DateTime$_now();
    t1 = this.lastFireTimestamp;
    if (t1 != null && $.$lt$n($.$sub$n(now.millisecondsSinceEpoch, t1.millisecondsSinceEpoch), 1000) === true)
      return;
    this.lastFireTimestamp = now;
    if (!($.$gt$n($.$sub$n(this.x, $.get$x$x($.Game_player)), 0) === true && $.$lt$n($.$sub$n(this.x, $.get$x$x($.Game_player)), 400) === true && $.$lt$n(this.speedX, 0) === true))
      t1 = $.$lt$n($.$sub$n(this.x, $.get$x$x($.Game_player)), 0) === true && $.$gt$n($.$sub$n(this.x, $.get$x$x($.Game_player)), -400) === true && $.$gt$n(this.speedX, 0) === true;
    else
      t1 = true;
    if (t1 && this.random.nextDouble$0() > 0.5) {
      oldSpeedX = this.speedX;
      this.speedX = 0;
      t1 = $.$ge$n(oldSpeedX, 0) === true ? this.right_fire : this.left_fire;
      this.setCurrentAnimationWithCb$2(t1, new $.Robot_checkIfNeedFire_anon(this, oldSpeedX));
    }
  },
  advanceTime$1: function(time) {
    var oldX, oldY, somethingToStandOn, collision, t1;
    oldX = this.x;
    oldY = this.y;
    this.current.update$1(time);
    this.checkIfNeedFire$0();
    somethingToStandOn = $.Collision_hasSomethingToStandOn(this);
    this.x = $.$add$ns(this.x, $.$mul$n(this.speedX, time));
    if ($.$lt$n(this.x, 0) === true)
      this.x = 0;
    if ($.$gt$n(this.x, $.$sub$n($.get$width$x($.Game_worldMap), this.get$width(this))) === true)
      this.x = $.$sub$n($.get$width$x($.Game_worldMap), this.get$width(this));
    if (somethingToStandOn == null) {
      this.speedY = $.$add$ns(this.speedY, 1);
      this.y = $.$add$ns(this.y, this.speedY);
      if ($.$gt$n(this.y, $.$sub$n($.WorldMap_fixedLeastHeight, this.get$height(this))) === true) {
        this.speedY = 0;
        this.y = $.$sub$n($.WorldMap_fixedLeastHeight, this.get$height(this));
      }
    } else if ($.$gt$n(this.speedY, 0)) {
      this.speedY = 0;
      this.y = $.$sub$n($.get$y$x(somethingToStandOn), this.get$height(this));
    } else if ($.$lt$n(this.speedY, 0))
      this.y = $.$add$ns(this.y, this.speedY);
    collision = $.Collision_isCollidedWithTerrain(this, oldX, oldY);
    if (collision === 1 || collision === 3 || $.$le$n(this.x, 0) === true || $.$ge$n(this.x, $.$sub$n($.get$width$x($.Game_worldMap), this.get$width(this))) === true) {
      this.x = oldX;
      this.speedX = $.$negate$n(this.speedX);
      this.direction = $.$negate$n(this.direction);
      if ($.$gt$n(this.speedX, 0) === true)
        this.setCurrentAnimation$1(this.right_run);
      else
        this.setCurrentAnimation$1(this.left_run);
    }
    if (collision >= 2) {
      this.speedY = 0;
      this.y = oldY;
    }
    t1 = this.current.getBitmap$0();
    t1.set$x(t1, $.$sub$n(this.x, $.get$x$x($.Game_displayWindow)));
    t1 = this.current.getBitmap$0();
    t1.set$y(t1, this.y);
  },
  Bleed$1: function(cb) {
    if ($.$gt$n(this.speedX, 0) === true) {
      this.right_bleed.setCbOnFinish$1(cb);
      this.setCurrentAnimation$1(this.right_bleed);
    } else {
      this.left_bleed.setCbOnFinish$1(cb);
      this.setCurrentAnimation$1(this.left_bleed);
    }
  },
  setDead$0: function() {
    this.isDead = true;
    $.Game_hudManager.oneRobotKilled$0();
    $.Sounds_playSoundEffect("robot_dead");
  },
  Robot$2: function(x, y) {
    var t1, t2, t3, t4, t5;
    this.left_run = $.Animation$(this);
    this.right_run = $.Animation$(this);
    this.left_bleed = $.Animation$(this);
    this.right_bleed = $.Animation$(this);
    this.left_fire = $.Animation$(this);
    this.right_fire = $.Animation$(this);
    this.left_hurt = $.Animation$(this);
    this.right_hurt = $.Animation$(this);
    this.left_run.addFrame$1($.AnimationFrame$("robot_leftmove1", 0.2));
    this.left_run.addFrame$1($.AnimationFrame$("robot_leftmove2", 0.2));
    this.left_run.addFrame$1($.AnimationFrame$("robot_leftmove3", 0.2));
    this.left_run.addFrame$1($.AnimationFrame$("robot_leftmove2", 0.2));
    this.right_run.addFrame$1($.AnimationFrame$("robot_rightmove1", 0.2));
    this.right_run.addFrame$1($.AnimationFrame$("robot_rightmove2", 0.2));
    this.right_run.addFrame$1($.AnimationFrame$("robot_rightmove3", 0.2));
    this.right_run.addFrame$1($.AnimationFrame$("robot_rightmove2", 0.2));
    this.left_bleed.addFrame$1($.AnimationFrame$("robot_leftblood1", 0.1));
    this.left_bleed.addFrame$1($.AnimationFrame$("robot_leftblood2", 0.1));
    this.left_bleed.addFrame$1($.AnimationFrame$("robot_leftblood3", 0.1));
    this.right_bleed.addFrame$1($.AnimationFrame$("robot_rightblood1", 0.1));
    this.right_bleed.addFrame$1($.AnimationFrame$("robot_rightblood2", 0.1));
    this.right_bleed.addFrame$1($.AnimationFrame$("robot_rightblood3", 0.1));
    this.left_fire.addFrame$1($.AnimationFrame$("robot_leftstand", 0.5));
    this.right_fire.addFrame$1($.AnimationFrame$("robot_rightstand", 0.5));
    this.left_hurt.addFrame$1($.AnimationFrame$("robot_leftblood1", 0.1));
    this.right_hurt.addFrame$1($.AnimationFrame$("robot_rightblood1", 0.1));
    for (t1 = $.JSArray_methods.get$iterator([this.left_run, this.right_run]); t1.moveNext$0();)
      for (t2 = $.JSArray_methods.get$iterator(t1.get$current().get$frames()); t2.moveNext$0();) {
        t3 = t2.get$current();
        t4 = this.max_width;
        t5 = t3.get$bitmap();
        this.max_width = $.max(t4, t5.get$width(t5));
        t5 = this.max_height;
        t3 = t3.get$bitmap();
        this.max_height = $.max(t5, t3.get$height(t3));
      }
    this.x = x;
    this.y = y;
    this.speedX = 50;
    this.speedY = 0;
    this.direction = 1;
    this.setCurrentAnimation$1(this.right_run);
    $.add$1$ax($.juggler, this);
  }
};

$$.Robot_hurt_anon = {"": "Closure;this_0,oldAnimation_1",
  call$0: function() {
    this.this_0.setCurrentAnimation$1(this.oldAnimation_1);
  }
};

$$.Robot_checkIfNeedFire_anon = {"": "Closure;this_0,oldSpeedX_1",
  call$0: function() {
    var t1, t2, t3;
    t1 = $.Game_bulletManager;
    t2 = this.this_0;
    t1.robotFired$1(t2);
    $.Sounds_playSoundEffect("robot_fire");
    t1 = this.oldSpeedX_1;
    t3 = $.$ge$n(t1, 0) === true ? t2.get$right_fire() : t2.get$left_fire();
    t2.setCurrentAnimationWithCb$2(t3, new $.Robot_checkIfNeedFire__anon(t2, t1));
  }
};

$$.Robot_checkIfNeedFire__anon = {"": "Closure;this_2,oldSpeedX_3",
  call$0: function() {
    var t1, t2;
    t1 = this.this_2;
    t2 = this.oldSpeedX_3;
    t1.setCurrentAnimation$1($.$ge$n(t2, 0) === true ? t1.get$right_run() : t1.get$left_run());
    t1.set$speedX(t2);
  }
};

$$.RobotManager = {"": "Object0;robots,layer>,lastCreateTimestamp,random",
  advanceTime$1: function(time) {
    var t1 = this.random;
    if (t1.nextDouble$0() > 0.995)
      ;
    if (t1.nextDouble$0() < 0.005)
      ;
    this.destroyDeadRobot$0();
  },
  destroyDeadRobot$0: function() {
    var robotsToRemove, t1, t2;
    robotsToRemove = $.HashSet$($.Robot);
    for (t1 = $.JSArray_methods.get$iterator(this.robots); t1.moveNext$0();) {
      t2 = t1.get$current();
      if (t2.get$isDead() === true) {
        robotsToRemove.add$1(robotsToRemove, t2);
        t2.Bleed$1(new $.RobotManager_destroyDeadRobot_anon(this, t2));
      }
    }
    $.JSArray_methods.removeAll$1(this.robots, robotsToRemove);
  },
  getAllRobots$0: function() {
    return this.robots;
  },
  createNewRobot$3: function(x, y, direction) {
    var robot = $.Robot$(x, y);
    robot.changeDirection$1(direction);
    this.robots.push(robot);
    this.layer.addChild$1(robot);
  },
  RobotManager$1: function(layer) {
    var t1;
    this.layer = layer;
    t1 = $.List_List($, $.Robot);
    $.setRuntimeTypeInfo(t1, [$.Robot]);
    this.robots = t1;
  }
};

$$.RobotManager_destroyDeadRobot_anon = {"": "Closure;this_0,robot_1",
  call$0: function() {
    var exception;
    try {
      $.get$layer$x(this.this_0).removeChild$1(this.robot_1);
    } catch (exception) {
      $.unwrapException(exception);
    }

    try {
      this.robot_1.destroy$0();
    } catch (exception) {
      $.unwrapException(exception);
    }

  }
};

$$.Tile = {"": "Object;bitmap<,x,y,width,height,speedX,speedY,direction,buttonMode,useHandCursor,hitArea,_graphics,_dropTarget,_children,_mouseChildren,_tabChildren,doubleClickEnabled,mouseEnabled,tabEnabled,tabIndex,_liblib3$_id,_x,_y,_pivotX,_pivotY,_scaleX,_scaleY,_skewX,_skewY,_rotation,_alpha,_visible,_off,_mask,_cache,_name,_parent,_tmpMatrix,_transformationMatrixPrivate,_transformationMatrixRefresh,_eventStreams",
  advanceTime$1: function(time) {
    var t1 = this.bitmap;
    t1.set$x(t1, $.$sub$n(this.x, $.get$x$x($.Game_displayWindow)));
    t1 = this.bitmap;
    t1.set$y(t1, this.y);
  },
  toString$0: function(_) {
    return $.JSString_methods.$add("Tile: ", $.Object.prototype.toString$0.call(this, this));
  },
  Tile$brick$2: function(i, j) {
    var t1;
    this.x = i * 40;
    this.y = j * 40;
    this.width = 40;
    this.height = 40;
    this.speedX = 0;
    this.speedY = 0;
    this.bitmap = $.Bitmap$($.Grafix_resourceManager.getBitmapData$1("brick"), "auto");
    this.addChild$1(this.bitmap);
    t1 = this.bitmap;
    t1.set$x(t1, $.$sub$n(this.x, $.get$x$x($.Game_displayWindow)));
    t1.set$y(t1, this.y);
    $.add$1$ax($.juggler, this);
  },
  Tile$transparentBrick$2: function(i, j) {
    var t1;
    this.x = i * 40;
    this.y = j * 40;
    this.width = 40;
    this.height = 40;
    this.speedX = 0;
    this.speedY = 0;
    this.bitmap = $.Bitmap$($.BitmapData$(40, 40, true, 16777215), "auto");
    this.addChild$1(this.bitmap);
    t1 = this.bitmap;
    t1.set$x(t1, $.$sub$n(this.x, $.get$x$x($.Game_displayWindow)));
    t1.set$y(t1, this.y);
    $.add$1$ax($.juggler, this);
  }
};

$$.TouchManager = {"": "Object0;",
  initEventHandler$0: function() {
    if ($.get$Multitouch__supportsTouchEvents() === true) {
      $.Multitouch_inputMode("touchPoint");
      var glass = $.GlassPlate$($.Statics_BACKGROUND_WIDTH, 480);
      glass.addTo$1($.stage);
      glass.addEventListener$2("touchBegin", this.get$onTouchBegin());
      glass.addEventListener$2("touchEnd", this.get$onTouchEnd(this));
      glass.addEventListener$2("touchCancel", this.get$onTouchCancel(this));
      glass.addEventListener$2("touchMove", this.get$onTouchMove(this));
      glass.addEventListener$2("touchOut", this.get$onTouchOut());
      glass.addEventListener$2("touchOver", this.get$onTouchOver());
    }
  },
  onTouchBegin$1: function(touchEvent) {
    var t1, t2;
    for (t1 = $.JSArray_methods.get$iterator($.Game_birdManager.getAllBirds$0()); t1.moveNext$0();) {
      t2 = t1.get$current();
      if (this.isTouched$2(touchEvent, t2))
        t2.setDead$0();
    }
    for (t1 = $.Game_bulletManager.get$bullets(), t1 = t1.get$iterator(t1); t1.moveNext$0();) {
      t2 = t1.get$current();
      if (this.isTouched$2(touchEvent, t2))
        t2.set$dead(true);
    }
  },
  get$onTouchBegin: function() {
    return new $.BoundClosure$1(this, "onTouchBegin$1");
  },
  isTouched$2: function(touchEvent, object) {
    var displayWindow, t1, t3, t4, x, y, t2;
    displayWindow = $.Game_displayWindow;
    t1 = touchEvent.get$stageX();
    if (typeof t1 !== "number")
      return this.isTouched$2$bailout(1, touchEvent, object, displayWindow, t1);
    t3 = $.getInterceptor$x(displayWindow);
    t4 = t3.get$x(displayWindow);
    if (typeof t4 !== "number")
      return this.isTouched$2$bailout(2, touchEvent, object, displayWindow, t1, t3, t4);
    x = t1 + t4;
    t4 = touchEvent.get$stageY();
    if (typeof t4 !== "number")
      return this.isTouched$2$bailout(3, 0, object, displayWindow, 0, t3, t4, x);
    t3 = t3.get$y(displayWindow);
    if (typeof t3 !== "number")
      return this.isTouched$2$bailout(4, 0, object, 0, 0, t3, t4, x);
    y = t4 + t3;
    t1 = $.getInterceptor$x(object);
    t2 = t1.get$x(object);
    if (typeof t2 !== "number")
      return this.isTouched$2$bailout(5, 0, object, 0, t1, 0, 0, x, y, t2);
    if (x > t2) {
      t2 = t1.get$x(object);
      if (typeof t2 !== "number")
        return this.isTouched$2$bailout(6, 0, object, 0, t1, 0, $.JSNumber_methods, x, y, t2);
      t4 = t1.get$width(object);
      if (typeof t4 !== "number")
        return this.isTouched$2$bailout(7, 0, object, 0, t1, 0, $.JSNumber_methods, x, y, t2, t4);
      if (x < t2 + t4) {
        t2 = t1.get$y(object);
        if (typeof t2 !== "number")
          return this.isTouched$2$bailout(8, 0, object, 0, t1, 0, 0, 0, y, t2);
        if (y > t2) {
          t1 = t1.get$height(object);
          if (typeof t1 !== "number")
            return this.isTouched$2$bailout(9, 0, 0, 0, t1, 0, $.JSNumber_methods, 0, y);
          t1 = y < t1;
        } else
          t1 = false;
      } else
        t1 = false;
    } else
      t1 = false;
    return t1;
  },
  isTouched$2$bailout: function(state0, touchEvent, object, displayWindow, t1, t3, t4, x, y, t2, t5) {
    switch (state0) {
      case 0:
        displayWindow = $.Game_displayWindow;
        t1 = touchEvent.get$stageX();
      case 1:
        state0 = 0;
        t3 = $.getInterceptor$x(displayWindow);
        t4 = t3.get$x(displayWindow);
      case 2:
        state0 = 0;
        x = $.$add$ns(t1, t4);
        t4 = touchEvent.get$stageY();
      case 3:
        state0 = 0;
        t3 = t3.get$y(displayWindow);
      case 4:
        state0 = 0;
        y = $.$add$ns(t4, t3);
        t1 = $.getInterceptor$x(object);
        t2 = t1.get$x(object);
      case 5:
        state0 = 0;
        t4 = $.getInterceptor$n(x);
      default:
        if (state0 === 9 || state0 === 8 || state0 === 7 || state0 === 6 || state0 === 0 && t4.$gt(x, t2) === true)
          switch (state0) {
            case 0:
              t2 = t1.get$x(object);
            case 6:
              state0 = 0;
              t5 = t1.get$width(object);
            case 7:
              state0 = 0;
            default:
              if (state0 === 9 || state0 === 8 || state0 === 0 && t4.$lt(x, $.$add$ns(t2, t5)) === true)
                switch (state0) {
                  case 0:
                    t2 = t1.get$y(object);
                  case 8:
                    state0 = 0;
                    t4 = $.getInterceptor$n(y);
                  case 9:
                    if (state0 === 9 || state0 === 0 && t4.$gt(y, t2) === true)
                      switch (state0) {
                        case 0:
                          t1 = t1.get$height(object);
                        case 9:
                          state0 = 0;
                          t1 = t4.$lt(y, t1) === true;
                      }
                    else
                      t1 = false;
                }
              else
                t1 = false;
          }
        else
          t1 = false;
        return t1;
    }
  },
  onTouchEnd$1: function(_, touchEvent) {
  },
  get$onTouchEnd: function(receiver) {
    return new $.BoundClosure$i1(this, "onTouchEnd$1", receiver);
  },
  onTouchCancel$1: function(_, touchEvent) {
  },
  get$onTouchCancel: function(receiver) {
    return new $.BoundClosure$i1(this, "onTouchCancel$1", receiver);
  },
  onTouchMove$1: function(_, touchEvent) {
  },
  get$onTouchMove: function(receiver) {
    return new $.BoundClosure$i1(this, "onTouchMove$1", receiver);
  },
  onTouchOut$1: function(touchEvent) {
  },
  get$onTouchOut: function() {
    return new $.BoundClosure$1(this, "onTouchOut$1");
  },
  onTouchOver$1: function(touchEvent) {
  },
  get$onTouchOver: function() {
    return new $.BoundClosure$1(this, "onTouchOver$1");
  }
};

$$.WorldMap = {"": "Object;skyBitmap,skyBitmap2,cloudMovingSpeed,duration>,terrainHeights,tileDirts,tileOceans,terrain@,bricks<,ends<,x,y,width,height,speedX,speedY,direction,buttonMode,useHandCursor,hitArea,_graphics,_dropTarget,_children,_mouseChildren,_tabChildren,doubleClickEnabled,mouseEnabled,tabEnabled,tabIndex,_liblib3$_id,_x,_y,_pivotX,_pivotY,_scaleX,_scaleY,_skewX,_skewY,_rotation,_alpha,_visible,_off,_mask,_cache,_name,_parent,_tmpMatrix,_transformationMatrixPrivate,_transformationMatrixRefresh,_eventStreams",
  loadMap$0: function() {
    $.HttpRequest_getString("map.json", null, null).then$1(new $.WorldMap_loadMap_anon(this));
  },
  addBird$2: function(i, j) {
    var e, exception, t1;
    try {
      $.Primitives_printString("try to add bird");
      $.Game_birdManager.createNewBird$2($.$mul$n(i, 40), $.$mul$n(j, 40));
    } catch (exception) {
      t1 = $.unwrapException(exception);
      e = t1;
      $.Primitives_printString($.JSString_methods.$add("Error in create robot", $.toString$0(e)));
    }

  },
  addDestinationTile$2: function(i, j) {
    var brick = $.Tile$transparentBrick(i, j);
    this.addChild$1(brick);
    this.ends.push(brick);
  },
  createRobot_$2: function(i, j) {
    var e, exception, t1;
    try {
      $.Game_robotManager.createNewRobot$3($.$mul$n(i, 40), $.$mul$n(j, 40), 0);
    } catch (exception) {
      t1 = $.unwrapException(exception);
      e = t1;
      $.Primitives_printString("Error in create robot " + $.S(e));
    }

  },
  addTransparentBrick_$2: function(i, j) {
    var brick = $.Tile$transparentBrick(i, j);
    this.addChild$1(brick);
    $.add$1$ax(this.bricks, brick);
  },
  advanceTime$1: function(time) {
    var t1, t2, t3, tmp, offset, i;
    this.duration = $.$add$ns(this.duration, time);
    if ($.$gt$n(this.duration, 0.01)) {
      t1 = this.duration;
      if (typeof t1 !== "number")
        throw $.iae(t1);
      t2 = this.skyBitmap;
      t2.set$pivotX($.$add$ns(t2.get$pivotX(), this.cloudMovingSpeed * t1));
      t1 = this.skyBitmap2;
      t2 = $.$negate$n($.get$width$x(this.skyBitmap));
      t3 = this.skyBitmap.get$pivotX();
      if (typeof t3 !== "number")
        throw $.iae(t3);
      t1.set$pivotX(t2 + t3);
      if ($.$gt$n(this.skyBitmap2.get$pivotX(), 0) === true) {
        tmp = this.skyBitmap;
        this.skyBitmap = this.skyBitmap2;
        this.skyBitmap2 = tmp;
      }
      this.duration = 0;
    }
    offset = $.$negate$n($.get$x$x($.Game_displayWindow)) + $.JSNumber_methods.toInt$0($.$div$n($.get$x$x($.Game_displayWindow), 40)) * 40;
    for (t1 = this.tileDirts, t2 = this.tileOceans, i = 0; i < $.$div$n($.Statics_BACKGROUND_WIDTH, 40) + 2; ++i) {
      $.set$x$x($.JSArray_methods.elementAt$1(t1, i), offset);
      $.set$x$x($.JSArray_methods.elementAt$1(t2, i), offset);
      offset += 40;
    }
    return true;
  },
  WorldMap$0: function() {
    var t1, t2, t3, i, tileDirt, tileOcean;
    $.print("before add assign window.");
    this.width = 10000;
    $.print("after add assign width.");
    this.height = 480;
    $.print("before add skybitmap");
    this.skyBitmap = $.Bitmap$($.Grafix_resourceManager.getBitmapData$1("background"), "auto");
    this.skyBitmap2 = $.Bitmap$($.Grafix_resourceManager.getBitmapData$1("background"), "auto");
    this.addChild$1(this.skyBitmap);
    t1 = this.skyBitmap2;
    t2 = $.$negate$n($.get$width$x(this.skyBitmap));
    t3 = this.skyBitmap.get$pivotX();
    if (typeof t3 !== "number")
      throw $.iae(t3);
    t1.set$pivotX(t2 + t3);
    this.addChild$1(this.skyBitmap2);
    for (t1 = this.tileDirts, t2 = this.tileOceans, i = 0; i < $.$div$n($.Statics_BACKGROUND_WIDTH, 40) + 20; ++i) {
      tileDirt = $.Bitmap$($.Grafix_resourceManager.getBitmapData$1("tiledirt"), "auto");
      t3 = i * 40;
      tileDirt.set$x(tileDirt, t3);
      tileDirt.set$y(tileDirt, 440);
      this.addChild$1(tileDirt);
      t1.push(tileDirt);
      tileOcean = $.Bitmap$($.Grafix_resourceManager.getBitmapData$1("tileocean"), "auto");
      tileOcean.set$x(tileOcean, t3);
      tileOcean.set$y(tileOcean, 400);
      this.addChild$1(tileOcean);
      t2.push(tileOcean);
    }
    this.duration = 0;
    t1 = $.List_List($, $.Tile);
    $.setRuntimeTypeInfo(t1, [$.Tile]);
    this.bricks = t1;
    this.loadMap$0();
  }
};

$$.WorldMap_loadMap_anon = {"": "Closure;this_0",
  call$1: function(mapAsJson) {
    var parsedMap, t1, t2, i, j, brick;
    parsedMap = $.parse(mapAsJson, null);
    t1 = $.getInterceptor$asx(parsedMap);
    $.Primitives_printString($.toString$0($.$index$asx(t1.$index(parsedMap, "terrain"), "width")));
    t2 = this.this_0;
    t2.set$terrain(t1.$index(parsedMap, "terrain"));
    $.set$width$x(t2, $.$mul$n($.$index$asx(t2.get$terrain(), "width"), 40));
    for (i = 0; $.JSNumber_methods.$lt(i, $.$index$asx(t2.get$terrain(), "width")); ++i)
      for (j = 0; $.JSNumber_methods.$lt(j, $.$index$asx(t2.get$terrain(), "height")); ++j)
        switch ($.$index$asx($.$index$asx($.$index$asx(t2.get$terrain(), "tiles"), j), i)) {
          case "0":
            break;
          case "1":
            brick = $.Tile$brick(i, j);
            t2.addChild$1(brick);
            $.add$1$ax(t2.get$bricks(), brick);
            break;
          case "2":
            t2.createRobot_$2(i, j);
            break;
          case "3":
            t2.addTransparentBrick_$2(i, j);
            break;
          case "4":
            t2.addDestinationTile$2(i, j);
            break;
          case "5":
            t2.addBird$2(i, j);
            break;
        }
  }
};

$$.Juggler = {"": "Object0;_animatables,_animatablesCount,_elapsedTime",
  add$1: function(_, animatable) {
    var t1, t2, t3;
    if (animatable == null)
      return;
    if (this.contains$1(this, animatable))
      return;
    t1 = this._animatablesCount;
    t2 = this._animatables;
    t3 = t2.length;
    if (t1 === t3)
      t2.push(animatable);
    else {
      if (t1 !== (t1 | 0))
        throw $.iae(t1);
      if (t1 < 0 || t1 >= t3)
        throw $.ioore(t1);
      t2[t1] = animatable;
    }
    this._animatablesCount = this._animatablesCount + 1;
  },
  remove$1: function(_, animatable) {
    var t1, i;
    if (animatable == null)
      return;
    for (t1 = this._animatables, i = 0; i < this._animatablesCount; ++i) {
      if (i >= t1.length)
        throw $.ioore(i);
      if ($.$eq(t1[i], animatable) === true) {
        if (i >= t1.length)
          throw $.ioore(i);
        t1[i] = null;
        break;
      }
    }
  },
  contains$1: function(_, animatable) {
    var t1, i;
    if (animatable == null)
      return false;
    for (t1 = this._animatables, i = 0; i < this._animatablesCount; ++i) {
      if (i >= t1.length)
        throw $.ioore(i);
      if ($.$eq(t1[i], animatable) === true)
        return true;
    }
    return false;
  },
  get$contains: function(receiver) {
    return new $.BoundClosure$i1(this, "contains$1", receiver);
  },
  purge$0: function() {
    var t1, t2, i;
    for (t1 = this._animatables, t2 = t1.length, i = 0; i < this._animatablesCount; ++i) {
      if (i >= t2)
        throw $.ioore(i);
      t1[i] = null;
    }
    this._animatablesCount = 0;
  },
  advanceTime$1: function(time) {
    var animatablesCount, t1, tail, head, animatable, t2, tail0, t3;
    this._elapsedTime = this._elapsedTime + time;
    animatablesCount = this._animatablesCount;
    if (animatablesCount !== (animatablesCount | 0))
      return this.advanceTime$1$bailout(1, time, animatablesCount);
    for (t1 = this._animatables, tail = 0, head = 0; head < animatablesCount; ++head) {
      if (head >= t1.length)
        throw $.ioore(head);
      animatable = t1[head];
      if (animatable == null)
        continue;
      if (animatable.advanceTime$1(time) === false) {
        if (head >= t1.length)
          throw $.ioore(head);
        t1[head] = null;
        continue;
      }
      if (tail !== head) {
        t2 = t1.length;
        if (tail >= t2)
          throw $.ioore(tail);
        t1[tail] = animatable;
        if (head >= t2)
          throw $.ioore(head);
        t1[head] = null;
      }
      ++tail;
    }
    if (tail !== animatablesCount) {
      for (t2 = t1.length, head = animatablesCount; head < this._animatablesCount; ++head, tail = tail0) {
        tail0 = tail + 1;
        if (head < 0 || head >= t2)
          throw $.ioore(head);
        t3 = t1[head];
        if (tail >= t2)
          throw $.ioore(tail);
        t1[tail] = t3;
        t1[head] = null;
      }
      this._animatablesCount = tail;
    }
    return true;
  },
  advanceTime$1$bailout: function(state0, time, animatablesCount) {
    var t1, tail, head, animatable, t2, tail0, t3;
    for (t1 = this._animatables, tail = 0, head = 0; head < animatablesCount; ++head) {
      if (head >= t1.length)
        throw $.ioore(head);
      animatable = t1[head];
      if (animatable == null)
        continue;
      if (animatable.advanceTime$1(time) === false) {
        if (head >= t1.length)
          throw $.ioore(head);
        t1[head] = null;
        continue;
      }
      if (tail !== head) {
        t2 = t1.length;
        if (tail >= t2)
          throw $.ioore(tail);
        t1[tail] = animatable;
        if (head >= t2)
          throw $.ioore(head);
        t1[head] = null;
      }
      ++tail;
    }
    if (tail !== animatablesCount) {
      for (t2 = t1.length, head = animatablesCount; head < this._animatablesCount; ++head, tail = tail0) {
        tail0 = tail + 1;
        if (head !== (head | 0))
          throw $.iae(head);
        if (head < 0 || head >= t2)
          throw $.ioore(head);
        t3 = t1[head];
        if (tail >= t2)
          throw $.ioore(tail);
        t1[tail] = t3;
        t1[head] = null;
      }
      this._animatablesCount = tail;
    }
    return true;
  }
};

$$.Bitmap = {"": "DisplayObject;bitmapData,pixelSnapping,clipRectangle,_liblib3$_id,_x,_y,_pivotX,_pivotY,_scaleX,_scaleY,_skewX,_skewY,_rotation,_alpha,_visible,_off,_mask,_cache,_name,_parent,_tmpMatrix,_transformationMatrixPrivate,_transformationMatrixRefresh,_eventStreams",
  getBoundsTransformed$2: function(matrix, returnRectangle) {
    var t1, t2, width, height;
    t1 = this.bitmapData;
    t2 = t1 != null;
    width = t2 ? $.get$width$x(t1) : 0;
    height = t2 ? $.get$height$x(t1) : 0;
    return $._getBoundsTransformedHelper(matrix, width, height, returnRectangle);
  },
  getBoundsTransformed$1: function(matrix) {
    return this.getBoundsTransformed$2(matrix, null);
  },
  hitTestInput$2: function(localX, localY) {
    var t1, t2, t3;
    t1 = this.bitmapData;
    if (t1 != null) {
      t2 = $.getInterceptor$n(localX);
      if (t2.$ge(localX, 0) === true) {
        t3 = $.getInterceptor$n(localY);
        t1 = t3.$ge(localY, 0) === true && t2.$lt(localX, $.get$width$x(t1)) === true && t3.$lt(localY, $.get$height$x(t1)) === true;
      } else
        t1 = false;
    } else
      t1 = false;
    if (t1)
      return this;
    return;
  },
  render$1: function(renderState) {
    var t1, t2;
    t1 = this.bitmapData;
    if (t1 != null) {
      t2 = this.clipRectangle;
      if (t2 == null)
        t1.render$1(renderState);
      else
        t1.renderClipped$2(renderState, t2);
    }
  },
  Bitmap$2: function(bitmapData, pixelSnapping) {
    this.clipRectangle = null;
  }
};

$$.BitmapData = {"": "Object0;_width,_height,_transparent,_liblib3$_source,_context,_frameMode,_frameOffsetX,_frameOffsetY,_frameX,_frameY,_frameWidth,_frameHeight",
  get$width: function(_) {
    return this._width;
  },
  get$height: function(_) {
    return this._height;
  },
  render$1: function(renderState) {
    var renderStateContext, t1, t2, t3, t4;
    renderStateContext = renderState.get$context(renderState);
    switch (this._frameMode) {
      case 0:
        $.drawImage$3$x(renderStateContext, this._liblib3$_source, this._frameOffsetX, this._frameOffsetY);
        break;
      case 1:
        t1 = this._frameWidth;
        t2 = this._frameHeight;
        $.drawImageScaledFromSource$9$x(renderStateContext, this._liblib3$_source, this._frameX, this._frameY, t1, t2, this._frameOffsetX, this._frameOffsetY, t1, t2);
        break;
      case 2:
        t1 = this._frameOffsetX;
        t2 = this._frameOffsetY;
        t3 = this._frameHeight;
        if (typeof t3 !== "number")
          throw $.iae(t3);
        t4 = $.getInterceptor$x(renderStateContext);
        t4.transform$6(renderStateContext, 0, -1, 1, 0, t1, t2 + t3);
        t2 = this._frameWidth;
        t4.drawImageScaledFromSource$9(renderStateContext, this._liblib3$_source, this._frameX, this._frameY, t3, t2, 0, 0, t3, t2);
        break;
    }
  },
  renderClipped$2: function(renderState, clipRectangle) {
    var renderStateContext, fLeft, fTop, fRight, fBottom, cLeft, cTop, cRight, cBottom, iLeft, iTop, iRight, iBottom, t1, t2, iWidth, iHeight, t3;
    renderStateContext = renderState.get$context(renderState);
    if ($.$le$n($.JSNull_methods.get$width(clipRectangle), 0) === true || $.$le$n($.JSNull_methods.get$height(clipRectangle), 0) === true)
      return;
    switch (this._frameMode) {
      case 0:
        $.drawImageScaledFromSource$9$x(renderStateContext, this._liblib3$_source, $.$sub$n($.JSNull_methods.get$x(clipRectangle), this._frameOffsetX), $.$sub$n($.JSNull_methods.get$y(clipRectangle), this._frameOffsetY), $.JSNull_methods.get$width(clipRectangle), $.JSNull_methods.get$height(clipRectangle), $.$add$ns($.JSNull_methods.get$x(clipRectangle), this._frameOffsetX), $.$add$ns($.JSNull_methods.get$y(clipRectangle), this._frameOffsetY), $.JSNull_methods.get$width(clipRectangle), $.JSNull_methods.get$height(clipRectangle));
        break;
      case 1:
        fLeft = this._frameX;
        fTop = this._frameY;
        fRight = $.JSNull_methods.$add(fLeft, this._frameWidth);
        fBottom = $.JSNull_methods.$add(fTop, this._frameHeight);
        cLeft = $.$add$ns($.JSNull_methods.$sub(fLeft, this._frameOffsetX), $.JSNull_methods.get$x(clipRectangle));
        cTop = $.$add$ns($.JSNull_methods.$sub(fTop, this._frameOffsetY), $.JSNull_methods.get$y(clipRectangle));
        cRight = $.$add$ns(cLeft, $.JSNull_methods.get$width(clipRectangle));
        cBottom = $.$add$ns(cTop, $.JSNull_methods.get$height(clipRectangle));
        iLeft = $.JSNull_methods.$gt(fLeft, cLeft) ? fLeft : cLeft;
        iTop = $.JSNull_methods.$gt(fTop, cTop) ? fTop : cTop;
        iRight = $.$lt$n(fRight, cRight) === true ? fRight : cRight;
        iBottom = $.$lt$n(fBottom, cBottom) === true ? fBottom : cBottom;
        t1 = this._frameOffsetX;
        if (typeof fLeft !== "number")
          throw $.iae(fLeft);
        if (typeof iLeft !== "number")
          throw $.iae(iLeft);
        t2 = this._frameOffsetY;
        if (typeof fTop !== "number")
          throw $.iae(fTop);
        if (typeof iTop !== "number")
          throw $.iae(iTop);
        iWidth = $.$sub$n(iRight, iLeft);
        iHeight = $.$sub$n(iBottom, iTop);
        if ($.$gt$n(iWidth, 0) === true && $.$gt$n(iHeight, 0) === true)
          $.drawImageScaledFromSource$9$x(renderStateContext, this._liblib3$_source, iLeft, iTop, iWidth, iHeight, t1 - fLeft + iLeft, t2 - fTop + iTop, iWidth, iHeight);
        break;
      case 2:
        fLeft = this._frameX;
        fTop = this._frameY;
        t1 = this._frameHeight;
        fRight = $.JSNull_methods.$add(fLeft, t1);
        fBottom = $.JSNull_methods.$add(fTop, this._frameWidth);
        cLeft = $.$sub$n($.$add$ns($.$sub$n($.JSNull_methods.$add(fLeft, this._frameOffsetY), $.JSNull_methods.get$y(clipRectangle)), t1), $.JSNull_methods.get$height(clipRectangle));
        cTop = $.$add$ns($.JSNull_methods.$sub(fTop, this._frameOffsetX), $.JSNull_methods.get$x(clipRectangle));
        cRight = $.$add$ns(cLeft, $.JSNull_methods.get$height(clipRectangle));
        cBottom = $.$add$ns(cTop, $.JSNull_methods.get$width(clipRectangle));
        iLeft = $.JSNull_methods.$gt(fLeft, cLeft) ? fLeft : cLeft;
        iTop = $.JSNull_methods.$gt(fTop, cTop) ? fTop : cTop;
        iRight = $.$lt$n(fRight, cRight) === true ? fRight : cRight;
        iBottom = $.$lt$n(fBottom, cBottom) === true ? fBottom : cBottom;
        t1 = this._frameOffsetX;
        if (typeof fTop !== "number")
          throw $.iae(fTop);
        if (typeof iTop !== "number")
          throw $.iae(iTop);
        t2 = this._frameOffsetY;
        if (typeof fRight !== "number")
          throw $.iae(fRight);
        if (typeof iRight !== "number")
          throw $.iae(iRight);
        iWidth = $.$sub$n(iBottom, iTop);
        if (typeof iLeft !== "number")
          throw $.iae(iLeft);
        iHeight = iRight - iLeft;
        if ($.$gt$n(iWidth, 0) === true && iHeight > 0) {
          t3 = $.getInterceptor$x(renderStateContext);
          t3.transform$6(renderStateContext, 0, -1, 1, 0, t1 - fTop + iTop, t2 + fRight - iRight + iHeight);
          t3.drawImageScaledFromSource$9(renderStateContext, this._liblib3$_source, iLeft, iTop, iHeight, iWidth, 0, 0, iHeight, iWidth);
        }
        break;
    }
  },
  BitmapData$4: function(width, height, transparent, fillColor) {
    var t1, canvas;
    this._width = width;
    this._height = height;
    this._transparent = transparent;
    t1 = this._width;
    canvas = $.CanvasElement_CanvasElement(this._height, t1);
    this._context = $.get$context2d$x(canvas);
    t1 = this._context;
    $.set$fillStyle$x(t1, this._transparent ? $._color2rgba(fillColor) : $._color2rgb(fillColor));
    $.fillRect$4$x(this._context, 0, 0, width, height);
    this._liblib3$_source = canvas;
    this._frameMode = 0;
    this._frameOffsetX = 0;
    this._frameOffsetY = 0;
  },
  BitmapData$fromImageElement$1: function(imageElement) {
    var t1 = $.getInterceptor(imageElement);
    if (imageElement == null)
      throw $.$$throw($.ArgumentError$(null));
    this._width = t1.get$naturalWidth(imageElement);
    this._height = t1.get$naturalHeight(imageElement);
    this._transparent = true;
    this._liblib3$_source = imageElement;
    this._frameMode = 0;
    this._frameOffsetX = 0;
    this._frameOffsetY = 0;
  }
};

$$.BitmapData_load_anon = {"": "Closure;completer_0,image_1",
  call$1: function($event) {
    var t1 = this.completer_0;
    return t1.complete$1(t1, $.BitmapData$fromImageElement(this.image_1));
  }
};

$$.BitmapData_load_anon0 = {"": "Closure;completer_2",
  call$1: function($event) {
    return this.completer_2.completeError$1($.StateError$("Error loading image."));
  }
};

$$.anon = {"": "Closure;",
  call$0: function() {
    var t1 = $.List_List($, $.DisplayObject);
    $.setRuntimeTypeInfo(t1, [$.DisplayObject]);
    return t1;
  }
};

$$.DisplayObject = {"": "EventDispatcher;_alpha<,_off<,_mask<,_cache<,_parent<",
  get$x: function(_) {
    return this._x;
  },
  get$y: function(_) {
    return this._y;
  },
  get$pivotX: function() {
    return this._pivotX;
  },
  get$scaleX: function() {
    return this._scaleX;
  },
  get$scaleY: function() {
    return this._scaleY;
  },
  get$visible: function() {
    return this._visible;
  },
  get$name: function(_) {
    return this._name;
  },
  get$parent: function(_) {
    return this._parent;
  },
  get$mousePosition: function() {
    var stage = this.get$stage();
    return stage != null ? this.globalToLocal$1(stage.get$_mousePosition()) : null;
  },
  get$mouseX: function() {
    var mp = this.get$mousePosition();
    return mp != null ? mp.get$x(mp) : 0;
  },
  get$mouseY: function() {
    var mp = this.get$mousePosition();
    return mp != null ? mp.get$y(mp) : 0;
  },
  get$root: function() {
    var currentObject, currentObject0;
    for (currentObject = this; currentObject0 = currentObject._parent, currentObject0 != null; currentObject = currentObject0)
      ;
    return currentObject;
  },
  get$stage: function() {
    var root = this.get$root();
    if (typeof root === "object" && root !== null && !!root.$isStage)
      return root;
    return;
  },
  set$x: function(_, value) {
    this._x = $.toDouble$0$n(value);
    this._transformationMatrixRefresh = true;
  },
  set$y: function(_, value) {
    this._y = $.toDouble$0$n(value);
    this._transformationMatrixRefresh = true;
  },
  set$pivotX: function(value) {
    this._pivotX = $.toDouble$0$n(value);
    this._transformationMatrixRefresh = true;
  },
  set$scaleX: function(value) {
    this._scaleX = $.JSNumber_methods.toDouble$0(value);
    this._transformationMatrixRefresh = true;
  },
  set$scaleY: function(value) {
    this._scaleY = $.JSNumber_methods.toDouble$0(value);
    this._transformationMatrixRefresh = true;
  },
  set$rotation: function(value) {
    this._rotation = $.JSDouble_methods.toDouble$0(value);
    this._transformationMatrixRefresh = true;
  },
  set$visible: function(value) {
    this._visible = value;
    this._transformationMatrixRefresh = true;
  },
  get$width: function(_) {
    return $.get$width$x(this.getBoundsTransformed$1(this.get$_transformationMatrix()));
  },
  get$height: function(_) {
    return $.get$height$x(this.getBoundsTransformed$1(this.get$_transformationMatrix()));
  },
  set$width: function(_, value) {
    var normalWidth;
    this.set$scaleX(1);
    normalWidth = this.get$width(this);
    this.set$scaleX($.$eq(normalWidth, 0) !== true ? $.$div$n(value, normalWidth) : 1);
  },
  set$height: function(_, value) {
    var normalHeight;
    this.set$scaleY(1);
    normalHeight = this.get$height(this);
    this.set$scaleY($.$eq(normalHeight, 0) !== true ? $.$div$n(value, normalHeight) : 1);
  },
  addTo$1: function($parent) {
    $parent.addChild$1(this);
  },
  removeFromParent$0: function() {
    var t1 = this._parent;
    if (t1 != null)
      t1.removeChild$1(this);
  },
  get$_transformationMatrix: function() {
    var t1, t2, skewXrotation, skewYrotation, cosX, sinX, a, b, c, d, t3;
    if (this._transformationMatrixRefresh) {
      this._transformationMatrixRefresh = false;
      t1 = this._skewX;
      t2 = this._rotation;
      skewXrotation = t1 + t2;
      skewYrotation = this._skewY + t2;
      if (skewXrotation === 0 && skewYrotation === 0) {
        t1 = this._scaleX;
        t2 = this._scaleY;
        this._transformationMatrixPrivate.setTo$6(t1, 0, 0, t2, this._x - this._pivotX * t1, this._y - this._pivotY * t2);
      } else {
        cosX = $.cos(skewXrotation);
        sinX = $.sin(skewXrotation);
        t1 = this._scaleX;
        if (skewXrotation === skewYrotation) {
          a = t1 * cosX;
          b = t1 * sinX;
          t1 = this._scaleY;
          c = -t1 * sinX;
          d = t1 * cosX;
        } else {
          a = t1 * $.cos(skewYrotation);
          b = this._scaleX * $.sin(skewYrotation);
          t1 = this._scaleY;
          c = -t1 * sinX;
          d = t1 * cosX;
        }
        t1 = this._x;
        t2 = this._pivotX;
        t3 = this._pivotY;
        this._transformationMatrixPrivate.setTo$6(a, b, c, d, t1 - (t2 * a + t3 * c), this._y - (t2 * b + t3 * d));
      }
    }
    return this._transformationMatrixPrivate;
  },
  transformationMatrixTo$1: function(targetSpace) {
    var t1, resultMatrix, resultObject, targetMatrix, targetObject;
    t1 = this._parent;
    if (targetSpace == null ? t1 == null : targetSpace === t1) {
      t1 = this.get$_transformationMatrix();
      return t1.clone$0(t1);
    }
    if ($.$eq(targetSpace.get$_parent(), this) === true)
      return targetSpace.get$_transformationMatrix().cloneInvert$0();
    resultMatrix = $.Matrix$fromIdentity();
    resultObject = this;
    while (true) {
      if (!((resultObject == null ? targetSpace != null : resultObject !== targetSpace) && resultObject._parent != null))
        break;
      resultMatrix.concat$1(resultMatrix, resultObject.get$_transformationMatrix());
      resultObject = resultObject._parent;
    }
    if (targetSpace == null && resultObject != null) {
      resultMatrix.concat$1(resultMatrix, resultObject.get$_transformationMatrix());
      resultObject = null;
    }
    if (resultObject == null ? targetSpace == null : resultObject === targetSpace)
      return resultMatrix;
    targetMatrix = $.Matrix$fromIdentity();
    targetObject = targetSpace;
    while (true) {
      t1 = targetObject === this;
      if (!(!t1 && targetObject._parent != null))
        break;
      targetMatrix.concat$1(targetMatrix, targetObject.get$_transformationMatrix());
      targetObject = targetObject._parent;
    }
    targetMatrix.invert$0();
    if (t1)
      return targetMatrix;
    if (targetObject == null ? resultObject != null : targetObject !== resultObject)
      return;
    resultMatrix.concat$1(resultMatrix, targetMatrix);
    return resultMatrix;
  },
  getBoundsTransformed$2: function(matrix, returnRectangle) {
    var t1;
    if (returnRectangle == null)
      returnRectangle = $.Rectangle$zero();
    t1 = $.getInterceptor$x(returnRectangle);
    t1.set$x(returnRectangle, matrix.get$tx());
    t1.set$y(returnRectangle, matrix.get$ty());
    t1.set$width(returnRectangle, 0);
    t1.set$height(returnRectangle, 0);
    return returnRectangle;
  },
  getBoundsTransformed$1: function(matrix) {
    return this.getBoundsTransformed$2(matrix, null);
  },
  hitTestInput$2: function(localX, localY) {
    if ($.contains$2$asx(this.getBoundsTransformed$1($.get$_identityMatrix()), localX, localY))
      return this;
    return;
  },
  globalToLocal$1: function(globalPoint) {
    var t1, displayObject;
    t1 = this._tmpMatrix;
    t1.identity$0();
    for (displayObject = this; displayObject != null; displayObject = displayObject._parent)
      t1.concat$1(t1, displayObject.get$_transformationMatrix());
    t1.invert$0();
    return t1.transformPoint$1(globalPoint);
  },
  dispatchEvent$1: function(_, $event) {
    var ancestor, ancestors, t1, i;
    if ($event.get$captures() || $event.get$bubbles($event) === true) {
      for (ancestor = this._parent, ancestors = null; ancestor != null; ancestor = ancestor._parent)
        if (ancestor.hasEventListener$1($event.get$type($event))) {
          if (ancestors == null)
            ancestors = $.listTypeCast($.get$_displayObjectListPool().pop$0());
          $.add$1$ax(ancestors, ancestor);
        }
    } else
      ancestors = null;
    if ($event.get$captures() && ancestors != null) {
      t1 = $.getInterceptor$asx(ancestors);
      i = $.$sub$n(t1.get$length(ancestors), 1);
      if (typeof i !== "number")
        return this.dispatchEvent$1$bailout1(1, $event, t1, i, ancestors);
      for (; i >= 0; --i)
        if ($event.get$stopsPropagation() === false)
          t1.$index(ancestors, i)._dispatchEventInternal$4($event, this, t1.$index(ancestors, i), 1);
    }
    if ($event.get$stopsPropagation() === false)
      this._dispatchEventInternal$4($event, this, this, 2);
    if ($event.get$bubbles($event) === true && ancestors != null)
      for (t1 = $.getInterceptor$asx(ancestors), i = 0; $.JSNumber_methods.$lt(i, t1.get$length(ancestors)); ++i)
        if ($event.get$stopsPropagation() === false)
          t1.$index(ancestors, i)._dispatchEventInternal$4($event, this, t1.$index(ancestors, i), 3);
    if (ancestors != null) {
      $.clear$0$ax(ancestors);
      $.get$_displayObjectListPool().push$1(ancestors);
    }
  },
  dispatchEvent$1$bailout1: function(state0, $event, t1, i, ancestors) {
    switch (state0) {
      case 0:
        if ($event.get$captures() || $event.get$bubbles($event) === true) {
          for (ancestor = this._parent, ancestors = null; ancestor != null; ancestor = ancestor._parent)
            if (ancestor.hasEventListener$1($event.get$type($event))) {
              if (ancestors == null)
                ancestors = $.listTypeCast($.get$_displayObjectListPool().pop$0());
              $.add$1$ax(ancestors, ancestor);
            }
        } else
          ancestors = null;
      case 1:
        var ancestor, t2;
        if (state0 === 1 || state0 === 0 && $event.get$captures() && ancestors != null)
          switch (state0) {
            case 0:
              t1 = $.getInterceptor$asx(ancestors);
              i = $.$sub$n(t1.get$length(ancestors), 1);
            case 1:
              state0 = 0;
              for (; t2 = $.getInterceptor$n(i), t2.$ge(i, 0) === true; i = t2.$sub(i, 1))
                if ($event.get$stopsPropagation() === false)
                  t1.$index(ancestors, i)._dispatchEventInternal$4($event, this, t1.$index(ancestors, i), 1);
          }
        if ($event.get$stopsPropagation() === false)
          this._dispatchEventInternal$4($event, this, this, 2);
        if ($event.get$bubbles($event) === true && ancestors != null)
          for (t1 = $.getInterceptor$asx(ancestors), i = 0; $.JSNumber_methods.$lt(i, t1.get$length(ancestors)); ++i)
            if ($event.get$stopsPropagation() === false)
              t1.$index(ancestors, i)._dispatchEventInternal$4($event, this, t1.$index(ancestors, i), 3);
        if (ancestors != null) {
          $.clear$0$ax(ancestors);
          $.get$_displayObjectListPool().push$1(ancestors);
        }
    }
  },
  _setParent$1: function(value) {
    var ancestor;
    for (ancestor = value; ancestor != null; ancestor = ancestor._parent)
      if (ancestor === this)
        throw $.$$throw($.ArgumentError$("Error #2150: An object cannot be added as a child to one of it's children (or children's children, etc.)."));
    this._parent = value;
  }
};

$$.DisplayObjectContainer = {"": "InteractiveObject;",
  addChild$1: function(child) {
    var t1 = this._children;
    if ($.$eq($.get$parent$x(child), this) === true) {
      $.JSArray_methods.removeAt$1(t1, $.JSArray_methods.indexOf$1(t1, child));
      t1.push(child);
    } else
      this.addChildAt$2(child, t1.length);
  },
  addChildAt$2: function(child, index) {
    var t1, t2;
    if (index < 0 || index > this._children.length)
      throw $.$$throw($.ArgumentError$("Error #2006: The supplied index is out of bounds."));
    t1 = $.getInterceptor(child);
    if (t1.$eq(child, this) === true)
      throw $.$$throw($.ArgumentError$("Error #2024: An object cannot be added as a child of itself."));
    t2 = this._children;
    if ($.$eq(t1.get$parent(child), this) === true) {
      $.JSArray_methods.removeAt$1(t2, $.JSArray_methods.indexOf$1(t2, child));
      $.JSArray_methods.insert$2(t2, index > t2.length ? index - 1 : index, child);
    } else {
      child.removeFromParent$0();
      child._setParent$1(this);
      $.JSArray_methods.insert$2(t2, index, child);
      t1.dispatchEvent$1(child, $.Event$("added", true));
      if (this.get$stage() != null)
        this._dispatchEventOnChildren$2(child, $.Event$("addedToStage", false));
    }
  },
  removeChild$1: function(child) {
    var childIndex = $.JSArray_methods.indexOf$1(this._children, child);
    if (typeof childIndex !== "number")
      return this.removeChild$1$bailout(1, childIndex);
    if (childIndex === -1)
      throw $.$$throw($.ArgumentError$("Error #2025: The supplied DisplayObject must be a child of the caller."));
    this.removeChildAt$1(childIndex);
  },
  removeChild$1$bailout: function(state0, childIndex) {
    if ($.$eq(childIndex, -1) === true)
      throw $.$$throw($.ArgumentError$("Error #2025: The supplied DisplayObject must be a child of the caller."));
    this.removeChildAt$1(childIndex);
  },
  removeChildAt$1: function(index) {
    var t1, child;
    t1 = $.getInterceptor$n(index);
    if (t1.$lt(index, 0) === true || t1.$ge(index, this._children.length) === true)
      throw $.$$throw($.ArgumentError$("Error #2006: The supplied index is out of bounds."));
    t1 = this._children;
    if (index !== (index | 0))
      throw $.iae(index);
    if (index < 0 || index >= t1.length)
      throw $.ioore(index);
    child = t1[index];
    $.dispatchEvent$1$x(child, $.Event$("removed", true));
    if (this.get$stage() != null)
      this._dispatchEventOnChildren$2(child, $.Event$("removedFromStage", false));
    child._setParent$1(null);
    $.JSArray_methods.removeAt$1(t1, index);
  },
  contains$1: function(_, child) {
    for (; child != null; child = child.get$_parent())
      if ($.$eq(child, this) === true)
        return true;
    return false;
  },
  get$contains: function(receiver) {
    return new $.BoundClosure$i1(this, "contains$1", receiver);
  },
  getBoundsTransformed$2: function(matrix, returnRectangle) {
    var t1, t2, left, $top, right, bottom, i, child, rectangle, t3;
    if (returnRectangle == null)
      returnRectangle = $.Rectangle$zero();
    t1 = this._children;
    if (t1.length === 0)
      return $.DisplayObject.prototype.getBoundsTransformed$2.call(this, matrix, returnRectangle);
    for (t2 = this._tmpMatrix, left = (1/0), $top = (1/0), right = (-1/0), bottom = (-1/0), i = 0; i < t1.length; ++i) {
      child = t1[i];
      t2.copyFromAndConcat$2(child.get$_transformationMatrix(), matrix);
      rectangle = child.getBoundsTransformed$2(t2, returnRectangle);
      t3 = $.getInterceptor$x(rectangle);
      if ($.$lt$n(t3.get$left(rectangle), left) === true)
        left = t3.get$left(rectangle);
      if ($.$lt$n(t3.get$top(rectangle), $top) === true)
        $top = t3.get$top(rectangle);
      if ($.$gt$n(t3.get$right(rectangle), right) === true)
        right = t3.get$right(rectangle);
      if ($.$gt$n(t3.get$bottom(rectangle), bottom) === true)
        bottom = t3.get$bottom(rectangle);
    }
    t1 = $.getInterceptor$x(returnRectangle);
    t1.set$x(returnRectangle, left);
    t1.set$y(returnRectangle, $top);
    t1.set$width(returnRectangle, $.$sub$n(right, left));
    t1.set$height(returnRectangle, $.$sub$n(bottom, $top));
    return returnRectangle;
  },
  getBoundsTransformed$1: function(matrix) {
    return this.getBoundsTransformed$2(matrix, null);
  },
  hitTestInput$2: function(localX, localY) {
    var t1, i, hit, child, matrix, deltaX, deltaY, displayObject;
    if (typeof localX !== "number")
      return this.hitTestInput$2$bailout1(1, localX, localY);
    if (typeof localY !== "number")
      return this.hitTestInput$2$bailout1(1, localX, localY);
    for (t1 = this._children, i = t1.length - 1, hit = null; i >= 0; --i) {
      if (i >= t1.length)
        throw $.ioore(i);
      child = t1[i];
      if (child.get$visible() === true) {
        matrix = child.get$_transformationMatrix();
        deltaX = localX - matrix.get$tx();
        deltaY = localY - matrix.get$ty();
        displayObject = child.hitTestInput$2((matrix.get$d() * deltaX - matrix.get$c() * deltaY) / matrix.get$det(), (matrix.get$a() * deltaY - matrix.get$b() * deltaX) / matrix.get$det());
        if (displayObject != null) {
          if (typeof displayObject === "object" && displayObject !== null && !!displayObject.$isInteractiveObject)
            if (displayObject.mouseEnabled)
              return this._mouseChildren ? displayObject : this;
          hit = this;
        }
      }
    }
    return hit;
  },
  hitTestInput$2$bailout1: function(state0, localX, localY) {
    var t1, i, t2, t3, hit, child, matrix, deltaX, deltaY, t4, t5, displayObject;
    for (t1 = this._children, i = t1.length - 1, t2 = $.getInterceptor$n(localX), t3 = $.getInterceptor$n(localY), hit = null; i >= 0; --i) {
      if (i >= t1.length)
        throw $.ioore(i);
      child = t1[i];
      if (child.get$visible() === true) {
        matrix = child.get$_transformationMatrix();
        deltaX = t2.$sub(localX, matrix.get$tx());
        deltaY = t3.$sub(localY, matrix.get$ty());
        t4 = matrix.get$d();
        if (typeof deltaX !== "number")
          throw $.iae(deltaX);
        t5 = matrix.get$c();
        if (typeof deltaY !== "number")
          throw $.iae(deltaY);
        displayObject = child.hitTestInput$2((t4 * deltaX - t5 * deltaY) / matrix.get$det(), (matrix.get$a() * deltaY - matrix.get$b() * deltaX) / matrix.get$det());
        if (displayObject != null) {
          if (typeof displayObject === "object" && displayObject !== null && !!displayObject.$isInteractiveObject)
            if (displayObject.mouseEnabled)
              return this._mouseChildren ? displayObject : this;
          hit = this;
        }
      }
    }
    return hit;
  },
  render$1: function(renderState) {
    var t1, i, child;
    for (t1 = this._children, i = 0; i < t1.length; ++i) {
      child = t1[i];
      if (!child.get$_off() && child.get$visible() === true)
        renderState.renderDisplayObject$1(child);
    }
  },
  _dispatchEventOnChildren$2: function(displayObject, $event) {
    var children, i;
    $.dispatchEvent$1$x(displayObject, $event);
    if (typeof displayObject === "object" && displayObject !== null && !!displayObject.$isDisplayObjectContainer) {
      children = $.List_List$from(displayObject._children, false, $.DisplayObject);
      if (typeof children !== "string" && (typeof children !== "object" || children === null || children.constructor !== Array && !children.$isJavaScriptIndexingBehavior()))
        return this._dispatchEventOnChildren$2$bailout(1, $event, children);
      for (i = 0; i < children.length; ++i)
        this._dispatchEventOnChildren$2(children[i], $event);
    }
  },
  _dispatchEventOnChildren$2$bailout: function(state0, $event, children) {
    switch (state0) {
      case 0:
        $.dispatchEvent$1$x(displayObject, $event);
      case 1:
        var t1, i;
        if (state0 === 1 || state0 === 0 && typeof displayObject === "object" && displayObject !== null && !!displayObject.$isDisplayObjectContainer)
          switch (state0) {
            case 0:
              children = $.List_List$from(displayObject._children, false, $.DisplayObject);
            case 1:
              state0 = 0;
              for (t1 = $.getInterceptor$asx(children), i = 0; $.JSNumber_methods.$lt(i, t1.get$length(children)); ++i)
                this._dispatchEventOnChildren$2(t1.$index(children, i), $event);
          }
    }
  },
  $isDisplayObjectContainer: true
};

$$.InteractiveObject = {"": "DisplayObject;",
  get$onKeyUp: function(_) {
    return $.EventStreamProvider_keyUp.forTarget$1(this);
  },
  get$onKeyDown: function(_) {
    return $.EventStreamProvider_keyDown.forTarget$1(this);
  },
  $isInteractiveObject: true
};

$$.Sprite = {"": "DisplayObjectContainer;buttonMode,useHandCursor,hitArea,_graphics,_dropTarget,_children,_mouseChildren,_tabChildren,doubleClickEnabled,mouseEnabled,tabEnabled,tabIndex,_liblib3$_id,_x,_y,_pivotX,_pivotY,_scaleX,_scaleY,_skewX,_skewY,_rotation,_alpha,_visible,_off,_mask,_cache,_name,_parent,_tmpMatrix,_transformationMatrixPrivate,_transformationMatrixRefresh,_eventStreams",
  _updateDrag$0: function() {
    var mp, stage, visible, bounds, t1, mpParent, pivot, $location;
    mp = this.get$mousePosition();
    stage = this.get$stage();
    visible = this.get$visible();
    if (mp != null && this.get$stage() != null) {
      bounds = $.Mouse__dragSpriteBounds;
      t1 = $.getInterceptor(bounds);
      if (bounds != null) {
        mpParent = this.get$_transformationMatrix().transformPoint$1(mp);
        if ($.$lt$n(mpParent.get$x(mpParent), t1.get$left(bounds)) === true)
          mpParent.set$x(mpParent, t1.get$left(bounds));
        if ($.$gt$n(mpParent.get$x(mpParent), t1.get$right(bounds)) === true)
          mpParent.set$x(mpParent, t1.get$right(bounds));
        if ($.$lt$n(mpParent.get$y(mpParent), t1.get$top(bounds)) === true)
          mpParent.set$y(mpParent, t1.get$top(bounds));
        if ($.$gt$n(mpParent.get$y(mpParent), t1.get$bottom(bounds)) === true)
          mpParent.set$y(mpParent, t1.get$bottom(bounds));
        mp = this.get$_transformationMatrix().cloneInvert$0().transformPoint$1(mpParent);
      }
      t1 = $.Point$(this._pivotX, this._pivotY);
      pivot = t1.add$1(t1, mp).subtract$1($.Mouse__dragSpriteCenter);
      $location = this.get$_transformationMatrix().transformPoint$1(pivot);
      this.set$visible(false);
      this._dropTarget = stage.hitTestInput$2(stage.get$mouseX(), stage.get$mouseY());
      this.set$x(this, $location.get$x($location));
      this.set$y(this, $location.get$y($location));
      this.set$visible(visible);
    }
  },
  getBoundsTransformed$2: function(matrix, returnRectangle) {
    var t1;
    if (returnRectangle == null)
      returnRectangle = $.Rectangle$zero();
    $.DisplayObjectContainer.prototype.getBoundsTransformed$2.call(this, matrix, returnRectangle);
    t1 = this._graphics;
    return t1 != null ? $.union$1$x(t1._getBoundsTransformed$1(matrix), returnRectangle) : returnRectangle;
  },
  getBoundsTransformed$1: function(matrix) {
    return this.getBoundsTransformed$2(matrix, null);
  },
  hitTestInput$2: function(localX, localY) {
    var t1, matrix, t2, t3, target;
    t1 = this.hitArea;
    if (t1 != null) {
      matrix = this.transformationMatrixTo$1(t1);
      if (matrix != null) {
        t2 = $.getInterceptor$n(localX);
        t3 = $.getInterceptor$n(localY);
        target = t1.hitTestInput$2($.$add$ns($.$add$ns(t2.$mul(localX, matrix.get$a()), t3.$mul(localY, matrix.get$c())), matrix.get$tx()), $.$add$ns($.$add$ns(t2.$mul(localX, matrix.get$b()), t3.$mul(localY, matrix.get$d())), matrix.get$ty())) != null ? this : null;
      } else
        target = null;
    } else {
      target = $.DisplayObjectContainer.prototype.hitTestInput$2.call(this, localX, localY);
      if (target == null && this._graphics != null)
        target = this._graphics._hitTestInput$2(localX, localY) === true ? this : target;
    }
    return target;
  },
  render$1: function(renderState) {
    var t1 = this._graphics;
    if (t1 != null)
      t1.render$1(renderState);
    $.DisplayObjectContainer.prototype.render$1.call(this, renderState);
  },
  $isSprite: true
};

$$._MouseButton = {"": "Object0;target*,buttonDown@,clickTime@,clickCount@,mouseDownEventType<,mouseUpEventType<,mouseClickEventType<,mouseDoubleClickEventType<"};

$$._Touch = {"": "Object0;touchPointID<,target*,primaryTouchPoint<"};

$$.Stage = {"": "DisplayObjectContainer;_canvas,_context,_defaultWidth,_defaultHeight,_canvasWidth,_canvasHeight,_clientWidth,_clientHeight,_clientTransformation,_stageTransformation,_renderLoop?,_juggler,_focus,_renderState,_stageRenderMode,_stageScaleMode,_stageAlign,_mouseCursor,_mousePosition<,_mouseTarget,_mouseButtons,_touches,_mouseEvent,_keyboardEvent,_touchEvent,_touchEventSubscriptions,_children,_mouseChildren,_tabChildren,doubleClickEnabled,mouseEnabled,tabEnabled,tabIndex,_liblib3$_id,_x,_y,_pivotX,_pivotY,_scaleX,_scaleY,_skewX,_skewY,_rotation,_alpha,_visible,_off,_mask,_cache,_name,_parent,_tmpMatrix,_transformationMatrixPrivate,_transformationMatrixRefresh,_eventStreams",
  get$renderLoop: function() {
    return this._renderLoop;
  },
  get$juggler: function() {
    return this._juggler;
  },
  get$mousePosition: function() {
    return this._mousePosition;
  },
  _throwStageException$0: function() {
    throw $.$$throw($.UnsupportedError$("Error #2071: The Stage class does not implement this property or method."));
  },
  set$x: function(_, value) {
    this._throwStageException$0();
  },
  set$y: function(_, value) {
    this._throwStageException$0();
  },
  set$pivotX: function(value) {
    this._throwStageException$0();
  },
  set$scaleX: function(value) {
    this._throwStageException$0();
  },
  set$scaleY: function(value) {
    this._throwStageException$0();
  },
  set$width: function(_, value) {
    this._throwStageException$0();
  },
  set$height: function(_, value) {
    this._throwStageException$0();
  },
  materialize$2: function(currentTime, deltaTime) {
    var t1 = this._stageRenderMode;
    if (t1 === "auto" || t1 === "once") {
      this._updateCanvasSize$0();
      t1 = this._renderState;
      t1.reset$3(t1, this._stageTransformation, currentTime, deltaTime);
      this.render$1(this._renderState);
      if (this._stageRenderMode === "once")
        this._stageRenderMode = "stop";
    }
  },
  _updateCanvasSize$0: function() {
    var client, t1, clientLeft, clientTop, clientWidth, clientHeight, canvasWidth, canvasHeight, canvasPivotX, canvasPivotY;
    client = this._canvas.getBoundingClientRect();
    t1 = $.getInterceptor$x(client);
    clientLeft = $.$add$ns(this._canvas.clientLeft, t1.get$left(client));
    clientTop = $.$add$ns(this._canvas.clientTop, t1.get$top(client));
    t1 = this._canvas;
    clientWidth = t1.clientWidth;
    clientHeight = t1.clientHeight;
    t1 = $.getInterceptor(clientWidth);
    if (clientWidth === 0 || clientHeight === 0)
      return;
    canvasWidth = this._defaultWidth;
    canvasHeight = this._defaultHeight;
    switch (this._stageScaleMode) {
      case "exactFit":
        break;
      case "noBorder":
        if (t1.$mul(clientWidth, canvasHeight) > $.$mul$n(clientHeight, this._defaultWidth))
          canvasHeight = $.$tdiv$n($.$mul$n(this._defaultWidth, clientHeight), clientWidth);
        else
          canvasWidth = $.$tdiv$n($.$mul$n(this._defaultHeight, clientWidth), clientHeight);
        break;
      case "noScale":
        canvasHeight = clientHeight;
        canvasWidth = clientWidth;
        break;
      case "showAll":
        if (t1.$mul(clientWidth, canvasHeight) > $.$mul$n(clientHeight, this._defaultWidth))
          canvasWidth = $.$tdiv$n($.$mul$n(this._defaultHeight, clientWidth), clientHeight);
        else
          canvasHeight = $.$tdiv$n($.$mul$n(this._defaultWidth, clientHeight), clientWidth);
        break;
    }
    canvasPivotX = 0;
    canvasPivotY = 0;
    switch (this._stageAlign) {
      case "B":
        canvasPivotX = $.$tdiv$n($.$add$ns($.$sub$n(this._defaultWidth, canvasWidth), 1), 2);
        canvasPivotY = $.$sub$n(this._defaultHeight, canvasHeight);
        break;
      case "BL":
        canvasPivotY = $.$sub$n(this._defaultHeight, canvasHeight);
        canvasPivotX = 0;
        break;
      case "BR":
        canvasPivotX = $.$sub$n(this._defaultWidth, canvasWidth);
        canvasPivotY = $.$sub$n(this._defaultHeight, canvasHeight);
        break;
      case "L":
        canvasPivotY = $.$tdiv$n($.$add$ns($.$sub$n(this._defaultHeight, canvasHeight), 1), 2);
        canvasPivotX = 0;
        break;
      case "R":
        canvasPivotX = $.$sub$n(this._defaultWidth, canvasWidth);
        canvasPivotY = $.$tdiv$n($.$add$ns($.$sub$n(this._defaultHeight, canvasHeight), 1), 2);
        break;
      case "T":
        canvasPivotX = $.$tdiv$n($.$add$ns($.$sub$n(this._defaultWidth, canvasWidth), 1), 2);
        canvasPivotY = 0;
        break;
      case "TL":
        canvasPivotX = 0;
        canvasPivotY = 0;
        break;
      case "TR":
        canvasPivotX = $.$add$ns($.$sub$n(this._defaultWidth, canvasWidth), 1);
        canvasPivotY = 0;
        break;
      case "":
        canvasPivotX = $.$tdiv$n($.$add$ns($.$sub$n(this._defaultWidth, canvasWidth), 1), 2);
        canvasPivotY = $.$tdiv$n($.$add$ns($.$sub$n(this._defaultHeight, canvasHeight), 1), 2);
        break;
    }
    t1 = this._stageTransformation;
    if (typeof canvasPivotX !== "number")
      throw $.iae(canvasPivotX);
    if (typeof canvasPivotY !== "number")
      throw $.iae(canvasPivotY);
    t1.setTo$6(1, 0, 0, 1, 0 - canvasPivotX, 0 - canvasPivotY);
    this._clientTransformation.setTo$6($.$div$n(canvasWidth, clientWidth), 0, 0, $.$div$n(canvasHeight, clientHeight), canvasPivotX - clientLeft, canvasPivotY - clientTop);
    if ($.$eq(this._canvasWidth, canvasWidth) !== true || $.$eq(this._canvasHeight, canvasHeight) !== true) {
      t1 = this._canvas;
      this._canvasWidth = canvasWidth;
      $.set$width$x(t1, canvasWidth);
      t1 = this._canvas;
      this._canvasHeight = canvasHeight;
      $.set$height$x(t1, canvasHeight);
    }
    t1 = this._clientWidth;
    if (t1 == null ? clientWidth == null : t1 === clientWidth) {
      t1 = this._clientHeight;
      t1 = t1 == null ? clientHeight != null : t1 !== clientHeight;
    } else
      t1 = true;
    if (t1) {
      this._clientWidth = clientWidth;
      this._clientHeight = clientHeight;
      this.dispatchEvent$1(this, $.Event$("resize", false));
    }
  },
  _onMouseCursorChanged$1: function(action) {
    $.set$cursor$x(this._canvas.style, $.Mouse__getCssStyle(this._mouseCursor));
  },
  get$_onMouseCursorChanged: function() {
    return new $.BoundClosure$1(this, "_onMouseCursorChanged$1");
  },
  _onMouseEvent$1: function($event) {
    var t1, time, button, stagePoint, t2, mouseButton, target, mouseCursor, t3, mouseEventType, t4, isClick, isDoubleClick, localPoint;
    t1 = $.getInterceptor$x($event);
    t1.preventDefault$0($event);
    time = $.DateTime$_now().millisecondsSinceEpoch;
    button = t1.get$button($event);
    stagePoint = this._clientTransformation._transformHtmlPoint$1(t1.get$client($event));
    t2 = $.getInterceptor$n(button);
    if (t2.$lt(button, 0) || t2.$gt(button, 2))
      return;
    if ($.$eq(t1.get$type($event), "mousemove") === true && this._mousePosition.equals$1(stagePoint))
      return;
    t2 = this._mouseButtons;
    if (button !== (button | 0))
      throw $.iae(button);
    if (button < 0 || button >= t2.length)
      throw $.ioore(button);
    mouseButton = t2[button];
    this._mousePosition = stagePoint;
    t2 = $.Mouse__dragSprite;
    if (t2 != null)
      t2._updateDrag$0();
    target = $.$eq(t1.get$type($event), "mouseout") !== true ? $.propertyTypeCast(this.hitTestInput$2(stagePoint.get$x(stagePoint), stagePoint.get$y(stagePoint)), "$isInteractiveObject") : null;
    mouseCursor = typeof target === "object" && target !== null && !!target.$isSprite ? target.useHandCursor ? "button" : "arrow" : "arrow";
    if (this._mouseCursor !== mouseCursor) {
      this._mouseCursor = mouseCursor;
      $.set$cursor$x(this._canvas.style, $.Mouse__getCssStyle(mouseCursor));
    }
    t2 = this._mouseTarget;
    if (t2 != null && $.$eq(t2, target) !== true) {
      t2 = this._mouseTarget;
      t3 = this._mouseEvent;
      t3._reset$2("mouseOut", true);
      t3.set$_localPoint(this._mouseTarget.get$stage() != null ? this._mouseTarget.globalToLocal$1(stagePoint) : $.Point$zero());
      t3.set$_stagePoint(stagePoint);
      t3._buttonDown = mouseButton.get$buttonDown();
      $.dispatchEvent$1$x(t2, t3);
      this._mouseTarget = null;
    }
    t2 = target != null;
    if (t2) {
      t3 = this._mouseTarget;
      t3 = target == null ? t3 != null : target !== t3;
    } else
      t3 = false;
    if (t3) {
      t3 = this._mouseEvent;
      t3._reset$2("mouseOver", true);
      t3.set$_localPoint(target.globalToLocal$1(stagePoint));
      t3.set$_stagePoint(stagePoint);
      t3._buttonDown = mouseButton.get$buttonDown();
      target.dispatchEvent$1(target, t3);
      this._mouseTarget = target;
    }
    if ($.$eq(t1.get$type($event), "mousedown") === true) {
      mouseEventType = mouseButton.get$mouseDownEventType();
      t3 = $.getInterceptor$x(mouseButton);
      t4 = t3.get$target(mouseButton);
      if ((target == null ? t4 != null : target !== t4) || $.$gt$n(time, $.$add$ns(mouseButton.get$clickTime(), 500)) === true)
        mouseButton.set$clickCount(0);
      mouseButton.set$buttonDown(true);
      t3.set$target(mouseButton, target);
      mouseButton.set$clickTime(time);
      mouseButton.set$clickCount($.$add$ns(mouseButton.get$clickCount(), 1));
    } else
      mouseEventType = null;
    if ($.$eq(t1.get$type($event), "mouseup") === true) {
      mouseEventType = mouseButton.get$mouseUpEventType();
      mouseButton.set$buttonDown(false);
      isClick = $.$eq($.get$target$x(mouseButton), target);
      isDoubleClick = isClick === true && $.get$isEven$i(mouseButton.get$clickCount()) && $.$lt$n(time, $.$add$ns(mouseButton.get$clickTime(), 500)) === true;
    } else {
      isClick = false;
      isDoubleClick = false;
    }
    if ($.$eq(t1.get$type($event), "mousemove") === true)
      mouseEventType = "mouseMove";
    if (mouseEventType != null && t2) {
      localPoint = target.globalToLocal$1(stagePoint);
      t1 = this._mouseEvent;
      t1._reset$2(mouseEventType, true);
      t1.set$_localPoint(localPoint);
      t1.set$_stagePoint(stagePoint);
      t1._buttonDown = mouseButton.get$buttonDown();
      t1._clickCount = mouseButton.get$clickCount();
      target.dispatchEvent$1(target, t1);
      if (isClick === true) {
        t1 = isDoubleClick && target.doubleClickEnabled;
        t2 = this._mouseEvent;
        if (t1) {
          t2._reset$2(mouseButton.get$mouseDoubleClickEventType(), true);
          t2.set$_localPoint(localPoint);
          t2.set$_stagePoint(stagePoint);
          t2._buttonDown = mouseButton.get$buttonDown();
          target.dispatchEvent$1(target, t2);
        } else {
          t2._reset$2(mouseButton.get$mouseClickEventType(), true);
          t2.set$_localPoint(localPoint);
          t2.set$_stagePoint(stagePoint);
          t2._buttonDown = mouseButton.get$buttonDown();
          target.dispatchEvent$1(target, t2);
        }
      }
    }
  },
  get$_onMouseEvent: function() {
    return new $.BoundClosure$1(this, "_onMouseEvent$1");
  },
  _onMouseWheelEvent$1: function($event) {
    var t1, stagePoint, target, t2;
    t1 = $.getInterceptor$x($event);
    stagePoint = this._clientTransformation._transformHtmlPoint$1(t1.get$client($event));
    target = $.propertyTypeCast(this.hitTestInput$2(stagePoint.get$x(stagePoint), stagePoint.get$y(stagePoint)), "$isInteractiveObject");
    if (target != null) {
      t2 = this._mouseEvent;
      t2._reset$2("mouseWheel", true);
      t2.set$_localPoint(target.globalToLocal$1(stagePoint));
      t2.set$_stagePoint(stagePoint);
      t2._deltaX = t1.get$deltaX($event);
      t2._deltaY = t1.get$deltaY($event);
      target.dispatchEvent$1(target, t2);
      if (this._mouseEvent.get$stopsPropagation() === true)
        t1.preventDefault$0($event);
    }
  },
  get$_onMouseWheelEvent: function() {
    return new $.BoundClosure$1(this, "_onMouseWheelEvent$1");
  },
  _onMultitouchInputModeChanged$1: function(inputMode) {
    $.JSArray_methods.forEach$1(this._touchEventSubscriptions, new $.Stage__onMultitouchInputModeChanged_anon());
    if ($.$eq($.Multitouch__inputMode, "touchPoint") === true)
      this._touchEventSubscriptions = [$.get$onTouchStart$x(this._canvas).listen$1(this.get$_onTouchEvent()), $.get$onTouchEnd$x(this._canvas).listen$1(this.get$_onTouchEvent()), $.get$onTouchMove$x(this._canvas).listen$1(this.get$_onTouchEvent()), $.get$onTouchEnter$x(this._canvas).listen$1(this.get$_onTouchEvent()), $.get$onTouchLeave$x(this._canvas).listen$1(this.get$_onTouchEvent()), $.get$onTouchCancel$x(this._canvas).listen$1(this.get$_onTouchEvent())];
  },
  get$_onMultitouchInputModeChanged: function() {
    return new $.BoundClosure$1(this, "_onMultitouchInputModeChanged$1");
  },
  _onTouchEvent$1: function($event) {
    var t1, t2, t3, t4, identifier, stagePoint, target, touch, t5, touchEventType;
    t1 = $.getInterceptor$x($event);
    t1.preventDefault$0($event);
    for (t2 = $.get$iterator$ax(t1.get$changedTouches($event)); t2.moveNext$0();) {
      t3 = t2.get$current();
      t4 = $.getInterceptor$x(t3);
      identifier = t4.get$identifier(t3);
      stagePoint = this._clientTransformation._transformHtmlPoint$1(t4.get$client(t3));
      target = $.propertyTypeCast(this.hitTestInput$2(stagePoint.get$x(stagePoint), stagePoint.get$y(stagePoint)), "$isInteractiveObject");
      t3 = this._touches.containsKey$1(identifier);
      t4 = this._touches;
      touch = t3 === true ? t4.$index(t4, identifier) : $._Touch$(target, t4.get$length(t4) === 0);
      t3 = $.getInterceptor$x(touch);
      if (t3.get$target(touch) != null && $.$eq(t3.get$target(touch), target) !== true) {
        t4 = t3.get$target(touch);
        t5 = this._touchEvent;
        t5._reset$2("touchOut", true);
        t5.set$_localPoint(t3.get$target(touch).get$stage() != null ? t3.get$target(touch).globalToLocal$1(stagePoint) : $.Point$zero());
        t5.set$_stagePoint(stagePoint);
        t5._touchPointID = touch.get$touchPointID();
        t5._isPrimaryTouchPoint = touch.get$primaryTouchPoint();
        $.dispatchEvent$1$x(t4, t5);
        t3.set$target(touch, null);
      }
      t4 = target != null;
      if (t4) {
        t5 = t3.get$target(touch);
        t5 = target == null ? t5 != null : target !== t5;
      } else
        t5 = false;
      if (t5) {
        t5 = this._touchEvent;
        t5._reset$2("touchOver", true);
        t5.set$_localPoint(target.globalToLocal$1(stagePoint));
        t5.set$_stagePoint(stagePoint);
        t5._touchPointID = touch.get$touchPointID();
        t5._isPrimaryTouchPoint = touch.get$primaryTouchPoint();
        target.dispatchEvent$1(target, t5);
        t3.set$target(touch, target);
      }
      if ($.$eq(t1.get$type($event), "touchstart") === true) {
        t3 = this._touches;
        t3.$indexSet(t3, identifier, touch);
        touchEventType = "touchBegin";
      } else
        touchEventType = null;
      if ($.$eq(t1.get$type($event), "touchend") === true) {
        t3 = this._touches;
        t3.remove$1(t3, identifier);
        touchEventType = "touchEnd";
      }
      if ($.$eq(t1.get$type($event), "touchcancel") === true) {
        t3 = this._touches;
        t3.remove$1(t3, identifier);
        touchEventType = "touchCancel";
      }
      if ($.$eq(t1.get$type($event), "touchmove") === true)
        touchEventType = "touchMove";
      if (touchEventType != null && t4) {
        t3 = this._touchEvent;
        t3._reset$2(touchEventType, true);
        t3.set$_localPoint(target.globalToLocal$1(stagePoint));
        t3.set$_stagePoint(stagePoint);
        t3._touchPointID = touch.get$touchPointID();
        t3._isPrimaryTouchPoint = touch.get$primaryTouchPoint();
        target.dispatchEvent$1(target, t3);
      }
    }
  },
  get$_onTouchEvent: function() {
    return new $.BoundClosure$1(this, "_onTouchEvent$1");
  },
  _onKeyEvent$1: function($event) {
    var t1, keyboardEventType, t2;
    t1 = $.getInterceptor$x($event);
    t1.preventDefault$0($event);
    keyboardEventType = $.$eq(t1.get$type($event), "keyup") === true ? "keyUp" : null;
    if ($.$eq(t1.get$type($event), "keydown") === true)
      keyboardEventType = "keyDown";
    t2 = this._keyboardEvent;
    t2._reset$2(keyboardEventType, true);
    t2._altKey = t1.get$altKey($event);
    t2._ctrlKey = t1.get$ctrlKey($event);
    t2._shiftKey = t1.get$shiftKey($event);
    t2._charCode = t1.get$charCode($event);
    t2._keyCode = t1.get$keyCode($event);
    t2._keyLocation = 0;
    if (t1.get$keyLocation($event) === 1)
      this._keyboardEvent._keyLocation = 1;
    if (t1.get$keyLocation($event) === 2)
      this._keyboardEvent._keyLocation = 2;
    if (t1.get$keyLocation($event) === 3)
      this._keyboardEvent._keyLocation = 3;
    if (t1.get$keyLocation($event) === 5)
      this._keyboardEvent._keyLocation = 4;
    if (t1.get$keyLocation($event) === 4)
      this._keyboardEvent._keyLocation = 4;
    t1 = this._focus;
    if (t1 != null)
      $.JSNull_methods.dispatchEvent$1(t1, this._keyboardEvent);
  },
  get$_onKeyEvent: function() {
    return new $.BoundClosure$1(this, "_onKeyEvent$1");
  },
  _onTextEvent$1: function($event) {
    var t1, charCode, textEvent;
    t1 = $.getInterceptor$x($event);
    charCode = $.$eq(t1.get$charCode($event), 0) !== true ? t1.get$charCode($event) : t1.get$keyCode($event);
    textEvent = $.TextEvent$("textInput", true);
    textEvent._text = $.String_String$fromCharCodes([charCode]);
    t1 = this._focus;
    if (t1 != null)
      $.JSNull_methods.dispatchEvent$1(t1, textEvent);
  },
  get$_onTextEvent: function() {
    return new $.BoundClosure$1(this, "_onTextEvent$1");
  },
  Stage$2: function($name, canvas) {
    var t1, t2;
    this._name = $name;
    this._canvas = canvas;
    this._canvas.focus();
    t1 = $.getInterceptor$x(canvas);
    this._context = t1.get$context2d(canvas);
    t2 = t1.get$width(canvas);
    this._defaultWidth = t2;
    this._canvasWidth = t2;
    t1 = t1.get$height(canvas);
    this._defaultHeight = t1;
    this._canvasHeight = t1;
    this._clientWidth = canvas.clientWidth;
    this._clientHeight = canvas.clientHeight;
    this._clientTransformation = $.Matrix$fromIdentity();
    this._stageTransformation = $.Matrix$fromIdentity();
    this._renderLoop = null;
    this._juggler = $.Juggler$();
    this._renderState = $.RenderState$fromCanvasRenderingContext2D(this._context, null);
    this._stageRenderMode = "auto";
    this._stageScaleMode = "showAll";
    this._stageAlign = "";
    this._mouseButtons = [$._MouseButton$("mouseDown", "mouseUp", "click", "doubleClick"), $._MouseButton$("middleMouseDown", "middleMouseUp", "middleClick", "middleClick"), $._MouseButton$("rightMouseDown", "rightMouseUp", "rightClick", "rightClick")];
    this._mouseCursor = "arrow";
    this._mouseTarget = null;
    this._mousePosition = $.Point$(0, 0);
    this._mouseEvent = $.MouseEvent$("click", true);
    $.get$Mouse__onMouseCursorChanged().listen$1(this.get$_onMouseCursorChanged());
    $.get$onMouseDown$x(this._canvas).listen$1(this.get$_onMouseEvent());
    $.get$onMouseUp$x(this._canvas).listen$1(this.get$_onMouseEvent());
    $.get$onMouseMove$x(this._canvas).listen$1(this.get$_onMouseEvent());
    $.get$onMouseOut$x(this._canvas).listen$1(this.get$_onMouseEvent());
    $.get$onMouseWheel$x(this._canvas).listen$1(this.get$_onMouseWheelEvent());
    this._touches = $.Map_Map($.$int, $._Touch);
    this._touchEvent = $.TouchEvent$("touchBegin", true);
    $.get$Multitouch__onInputModeChanged().listen$1(this.get$_onMultitouchInputModeChanged());
    this._onMultitouchInputModeChanged$1(null);
    this._keyboardEvent = $.KeyboardEvent$("keyDown", true);
    $.get$onKeyDown$x(this._canvas).listen$1(this.get$_onKeyEvent());
    $.get$onKeyUp$x(this._canvas).listen$1(this.get$_onKeyEvent());
    $.get$onKeyPress$x(this._canvas).listen$1(this.get$_onTextEvent());
  },
  $isStage: true
};

$$.Stage__onMultitouchInputModeChanged_anon = {"": "Closure;",
  call$1: function(s) {
    return s.cancel$0();
  }
};

$$.GlassPlate = {"": "InteractiveObject;width*,height*,doubleClickEnabled,mouseEnabled,tabEnabled,tabIndex,_liblib3$_id,_x,_y,_pivotX,_pivotY,_scaleX,_scaleY,_skewX,_skewY,_rotation,_alpha,_visible,_off,_mask,_cache,_name,_parent,_tmpMatrix,_transformationMatrixPrivate,_transformationMatrixRefresh,_eventStreams",
  getBoundsTransformed$2: function(matrix, returnRectangle) {
    return $._getBoundsTransformedHelper(matrix, this.width, this.height, returnRectangle);
  },
  getBoundsTransformed$1: function(matrix) {
    return this.getBoundsTransformed$2(matrix, null);
  },
  hitTestInput$2: function(localX, localY) {
    var t1, t2;
    t1 = $.getInterceptor$n(localX);
    if (t1.$ge(localX, 0) === true) {
      t2 = $.getInterceptor$n(localY);
      t1 = t2.$ge(localY, 0) === true && t1.$lt(localX, this.width) === true && t2.$lt(localY, this.height) === true;
    } else
      t1 = false;
    if (t1)
      return this;
    return;
  },
  render$1: function(renderState) {
  }
};

$$.RenderLoop = {"": "Object0;_juggler,_stages,_renderTime,_enterFrameIndex,_enterFrameEvent",
  get$juggler: function() {
    return this._juggler;
  },
  _onAnimationFrame$1: function(currentTime) {
    var t1, deltaTime, deltaTimeSec, currentTimeSec, i;
    if (typeof currentTime !== "number")
      return this._onAnimationFrame$1$bailout(1, currentTime);
    $.requestAnimationFrame$1$x(window, this.get$_onAnimationFrame());
    if ($.get$isNaN$n(this._renderTime))
      this._renderTime = currentTime;
    t1 = this._renderTime;
    if (typeof t1 !== "number")
      return this._onAnimationFrame$1$bailout(2, currentTime, t1);
    if (t1 > currentTime)
      this._renderTime = currentTime;
    t1 = this._renderTime;
    if (typeof t1 !== "number")
      return this._onAnimationFrame$1$bailout(3, currentTime, t1);
    deltaTime = currentTime - t1;
    deltaTimeSec = deltaTime / 1000;
    currentTimeSec = currentTime / 1000;
    if (deltaTime >= 1) {
      this._renderTime = currentTime;
      this._enterFrameEvent._passedTime = deltaTimeSec;
      this._enterFrameIndex._dispatchEvent$1(this._enterFrameEvent);
      this._juggler.advanceTime$1(deltaTimeSec);
      for (i = 0; t1 = this._stages, i < t1.length; ++i)
        t1[i].materialize$2(currentTimeSec, deltaTimeSec);
    }
  },
  _onAnimationFrame$1$bailout: function(state0, currentTime, t1) {
    switch (state0) {
      case 0:
      case 1:
        state0 = 0;
        $.requestAnimationFrame$1$x(window, this.get$_onAnimationFrame());
        if ($.get$isNaN$n(this._renderTime))
          this._renderTime = currentTime;
        t1 = this._renderTime;
      case 2:
        state0 = 0;
        if ($.$gt$n(t1, currentTime) === true)
          this._renderTime = currentTime;
        t1 = this._renderTime;
      case 3:
        var t3, deltaTime, deltaTimeSec, currentTimeSec, i;
        state0 = 0;
        t3 = $.getInterceptor$n(currentTime);
        deltaTime = t3.$sub(currentTime, t1);
        t1 = $.getInterceptor$n(deltaTime);
        deltaTimeSec = t1.$div(deltaTime, 1000);
        currentTimeSec = t3.$div(currentTime, 1000);
        if (t1.$ge(deltaTime, 1) === true) {
          this._renderTime = currentTime;
          this._enterFrameEvent._passedTime = deltaTimeSec;
          this._enterFrameIndex._dispatchEvent$1(this._enterFrameEvent);
          this._juggler.advanceTime$1(deltaTimeSec);
          for (i = 0; t1 = this._stages, i < t1.length; ++i)
            t1[i].materialize$2(currentTimeSec, deltaTimeSec);
        }
    }
  },
  get$_onAnimationFrame: function() {
    return new $.BoundClosure$1(this, "_onAnimationFrame$1");
  },
  addStage$1: function(stage) {
    var t1;
    if (stage.get$renderLoop() != null)
      stage.get$renderLoop().removeStage$1(stage);
    this._stages.push(stage);
    t1 = this._juggler;
    t1.add$1(t1, stage.get$juggler());
    stage.set$_renderLoop(this);
  },
  removeStage$1: function(stage) {
    var t1;
    if (stage.get$renderLoop() === this) {
      $.JSArray_methods.remove$1(this._stages, stage);
      t1 = this._juggler;
      t1.remove$1(t1, stage.get$juggler());
      stage.set$_renderLoop(null);
    }
  },
  RenderLoop$0: function() {
    this._juggler = $.Juggler$();
    var t1 = $.List_List($, $.Stage);
    $.setRuntimeTypeInfo(t1, [$.Stage]);
    this._stages = t1;
    this._renderTime = (0/0);
    this._enterFrameIndex = $.get$_EventStreamIndex_enterFrame();
    this._enterFrameEvent = $.EnterFrameEvent$(0);
    $.requestAnimationFrame$1$x($.window(), this.get$_onAnimationFrame());
  }
};

$$.RenderState = {"": "Object0;_context,_matrices,_alphas,_depth,_currentTime,_deltaTime",
  get$context: function(_) {
    return this._context;
  },
  reset$3: function(_, matrix, currentTime, deltaTime) {
    var t1, t2, t3, m, a;
    t1 = $ === currentTime;
    if (t1)
      currentTime = null;
    t2 = $ === deltaTime;
    if (t2)
      deltaTime = null;
    if (matrix != null) {
      t3 = this._matrices;
      if (0 >= t3.length)
        throw $.ioore(0);
      t3[0].copyFrom$1(matrix);
    }
    this._depth = 0;
    this._currentTime = !t1 ? currentTime : 0;
    this._deltaTime = !t2 ? deltaTime : 0;
    t1 = this._matrices;
    if (0 >= t1.length)
      throw $.ioore(0);
    m = t1[0];
    t1 = this._alphas;
    if (0 >= t1.length)
      throw $.ioore(0);
    a = t1[0];
    t1 = this._context;
    t2 = $.getInterceptor$x(t1);
    t2.setTransform$6(t1, m.get$a(), m.get$b(), m.get$c(), m.get$d(), m.get$tx(), m.get$ty());
    t2.set$globalAlpha(t1, a);
    t3 = t1.canvas;
    t2.clearRect$4(t1, 0, 0, t3.width, t3.height);
  },
  renderDisplayObject$1: function(displayObject) {
    var d1, d2, t1, t2, m1, m2, t3, a1, t4, a2, mask, cache;
    d1 = this._depth;
    d2 = d1 + 1;
    t1 = this._matrices;
    t2 = t1.length;
    if (d1 < 0 || d1 >= t2)
      throw $.ioore(d1);
    m1 = t1[d1];
    if (d2 < 0 || d2 >= t2)
      throw $.ioore(d2);
    m2 = t1[d2];
    t1 = this._alphas;
    t3 = t1.length;
    if (d1 >= t3)
      throw $.ioore(d1);
    a1 = t1[d1];
    t4 = displayObject.get$_alpha();
    if (typeof a1 !== "number")
      throw $.iae(a1);
    a2 = t4 * a1;
    if (d2 >= t3)
      throw $.ioore(d2);
    t1[d2] = a2;
    m2.copyFromAndConcat$2(displayObject.get$_transformationMatrix(), m1);
    t1 = this._context;
    t4 = $.getInterceptor$x(t1);
    t4.setTransform$6(t1, m2.get$a(), m2.get$b(), m2.get$c(), m2.get$d(), m2.get$tx(), m2.get$ty());
    t4.set$globalAlpha(t1, a2);
    this._depth = d2;
    mask = displayObject.get$_mask();
    cache = displayObject.get$_cache();
    t2 = mask != null;
    if (t2) {
      t4.save$0(t1);
      mask.render$1(this);
    }
    if (cache != null)
      cache.render$1(this);
    else
      displayObject.render$1(this);
    if (t2)
      t4.restore$0(t1);
    this._depth = d1;
  },
  RenderState$fromCanvasRenderingContext2D$2: function(context, matrix) {
    var t1, t2, t3, t4, i, t5, m, a;
    for (t1 = this._matrices, t2 = t1.length, t3 = this._alphas, t4 = t3.length, i = 0; i < 100; ++i) {
      t5 = $.Matrix$fromIdentity();
      if (i >= t2)
        throw $.ioore(i);
      t1[i] = t5;
      if (i >= t4)
        throw $.ioore(i);
      t3[i] = 1;
    }
    if (matrix != null) {
      if (0 >= t2)
        throw $.ioore(0);
      t1[0].copyFrom$1(matrix);
    }
    if (0 >= t2)
      throw $.ioore(0);
    m = t1[0];
    if (0 >= t4)
      throw $.ioore(0);
    a = t3[0];
    t1 = this._context;
    t3 = $.getInterceptor$x(t1);
    t3.setTransform$6(t1, m.get$a(), m.get$b(), m.get$c(), m.get$d(), m.get$tx(), m.get$ty());
    t3.set$globalAlpha(t1, a);
  }
};

$$.EnterFrameEvent = {"": "Event;_passedTime,_type,_bubbles,_eventPhase,_liblib3$_target,_currentTarget,_stopsPropagation,_stopsImmediatePropagation",
  get$captures: function() {
    return false;
  },
  EnterFrameEvent$1: function(passedTime) {
    this._passedTime = passedTime;
  }
};

$$.Event = {"": "Object0;_type,_bubbles,_eventPhase,_liblib3$_target<,_currentTarget,_stopsPropagation,_stopsImmediatePropagation",
  _reset$2: function(type, bubbles) {
    this._type = type;
    this._bubbles = bubbles;
    this._eventPhase = 2;
    this._liblib3$_target = null;
    this._currentTarget = null;
    this._stopsPropagation = false;
    this._stopsImmediatePropagation = false;
  },
  get$stopsPropagation: function() {
    return this._stopsPropagation;
  },
  get$type: function(_) {
    return this._type;
  },
  get$bubbles: function(_) {
    return this._bubbles;
  },
  get$captures: function() {
    return true;
  },
  get$target: function(_) {
    return this._liblib3$_target;
  },
  Event$2: function(type, bubbles) {
    this._reset$2(type, bubbles);
  }
};

$$.EventDispatcher = {"": "Object0;",
  hasEventListener$1: function(type) {
    var t1 = this._eventStreams;
    if (t1 != null)
      return t1.containsKey$1(type) === true || this._eventStreams.containsKey$1($.S(type) + "_CAPTURE") === true;
    else
      return false;
  },
  addEventListener$3$useCapture: function(eventType, eventListener, useCapture) {
    return this._getEventStream$2(eventType, useCapture).listen$1(eventListener);
  },
  addEventListener$2: function(eventType, eventListener) {
    return this.addEventListener$3$useCapture(eventType, eventListener, false);
  },
  dispatchEvent$1: function(_, $event) {
    this._dispatchEventInternal$4($event, this, this, 2);
  },
  _dispatchEventInternal$4: function($event, target, currentTarget, eventPhase) {
    var eventStreamKey, t1, eventStream;
    if (this._eventStreams != null) {
      eventStreamKey = eventPhase === 1 ? $.S($event.get$type($event)) + "_CAPTURE" : $event.get$type($event);
      t1 = this._eventStreams;
      eventStream = t1.$index(t1, eventStreamKey);
      if (eventStream != null) {
        $event._liblib3$_target = target;
        $event._currentTarget = currentTarget;
        $event._eventPhase = eventPhase;
        $event._stopsPropagation = false;
        $event._stopsImmediatePropagation = false;
        eventStream._dispatchEvent$1($event);
      }
    }
  },
  _getEventStream$2: function(eventType, useCapture) {
    var eventStreamKey, t1, eventStream;
    if (this._eventStreams == null)
      this._eventStreams = $.HashMap$($.String, $._EventStream0);
    eventStreamKey = useCapture ? eventType + "_CAPTURE" : eventType;
    t1 = this._eventStreams;
    eventStream = t1.$index(t1, eventStreamKey);
    if (eventStream == null) {
      t1 = this._eventStreams;
      eventStream = $._EventStream$0(this, eventType, useCapture, null);
      t1.$indexSet(t1, eventStreamKey, eventStream);
    }
    return eventStream;
  }
};

$$._EventStream0 = {"": "Stream;_liblib3$_target<,_liblib3$_eventType,_liblib3$_useCapture,_subscriptions,_subscriptionsCount<",
  get$isBroadcast: function() {
    return true;
  },
  asBroadcastStream$0: function() {
    return this;
  },
  listen$4$onDone$onError$unsubscribeOnError: function(onData, onDone, onError, unsubscribeOnError) {
    var subscription, t1, t2, t3;
    subscription = $._EventStreamSubscription$0(this, onData);
    t1 = this._subscriptionsCount;
    t2 = this._subscriptions;
    t3 = t2.length;
    if (t1 === t3)
      t2.push(subscription);
    else {
      if (t1 !== (t1 | 0))
        throw $.iae(t1);
      if (t1 < 0 || t1 >= t3)
        throw $.ioore(t1);
      t2[t1] = subscription;
    }
    this._subscriptionsCount = this._subscriptionsCount + 1;
    if (this._liblib3$_eventType === "enterFrame" && !this._liblib3$_useCapture)
      $.get$_EventStreamIndex_enterFrame()._addEventStream$1(this);
    return subscription;
  },
  listen$1: function(onData) {
    return this.listen$4$onDone$onError$unsubscribeOnError(onData, null, null, null);
  },
  listen$3$onDone$onError: function(onData, onDone, onError) {
    return this.listen$4$onDone$onError$unsubscribeOnError(onData, onDone, onError, null);
  },
  _onSubscriptionCancel$1: function(subscription) {
    var t1, i;
    for (t1 = this._subscriptions, i = 0; i < this._subscriptionsCount; ++i) {
      if (i >= t1.length)
        throw $.ioore(i);
      if ($.$eq(t1[i], subscription) === true) {
        if (i >= t1.length)
          throw $.ioore(i);
        t1[i] = null;
        break;
      }
    }
  },
  _dispatchEvent$1: function($event) {
    var subscriptionsCount, t1, tail, head, subscription, t2, tail0, t3;
    subscriptionsCount = this._subscriptionsCount;
    if (subscriptionsCount !== (subscriptionsCount | 0))
      return this._dispatchEvent$1$bailout(1, $event, subscriptionsCount);
    for (t1 = this._subscriptions, tail = 0, head = 0; head < subscriptionsCount; ++head) {
      if (head >= t1.length)
        throw $.ioore(head);
      subscription = t1[head];
      if (subscription == null)
        continue;
      subscription._liblib3$_onData$1($event);
      if (tail !== head) {
        t2 = t1.length;
        if (tail >= t2)
          throw $.ioore(tail);
        t1[tail] = subscription;
        if (head >= t2)
          throw $.ioore(head);
        t1[head] = null;
      }
      ++tail;
    }
    if (tail !== subscriptionsCount) {
      for (t2 = t1.length, head = subscriptionsCount; head < this._subscriptionsCount; ++head, tail = tail0) {
        tail0 = tail + 1;
        if (head < 0 || head >= t2)
          throw $.ioore(head);
        t3 = t1[head];
        if (tail >= t2)
          throw $.ioore(tail);
        t1[tail] = t3;
        t1[head] = null;
      }
      this._subscriptionsCount = tail;
    }
  },
  _dispatchEvent$1$bailout: function(state0, $event, subscriptionsCount) {
    var t1, tail, head, subscription, t2, tail0, t3;
    for (t1 = this._subscriptions, tail = 0, head = 0; head < subscriptionsCount; ++head) {
      if (head >= t1.length)
        throw $.ioore(head);
      subscription = t1[head];
      if (subscription == null)
        continue;
      subscription._liblib3$_onData$1($event);
      if (tail !== head) {
        t2 = t1.length;
        if (tail >= t2)
          throw $.ioore(tail);
        t1[tail] = subscription;
        if (head >= t2)
          throw $.ioore(head);
        t1[head] = null;
      }
      ++tail;
    }
    if (tail !== subscriptionsCount) {
      for (t2 = t1.length, head = subscriptionsCount; head < this._subscriptionsCount; ++head, tail = tail0) {
        tail0 = tail + 1;
        if (head !== (head | 0))
          throw $.iae(head);
        if (head < 0 || head >= t2)
          throw $.ioore(head);
        t3 = t1[head];
        if (tail >= t2)
          throw $.ioore(tail);
        t1[tail] = t3;
        t1[head] = null;
      }
      this._subscriptionsCount = tail;
    }
  },
  $asStream: null
};

$$._EventStreamIndex = {"": "Object0;_eventStreams,_eventStreamsCount",
  _addEventStream$1: function(eventStream) {
    var t1, i, t2, t3;
    for (t1 = this._eventStreams, i = 0; t2 = this._eventStreamsCount, i < t2; ++i) {
      if (i >= t1.length)
        throw $.ioore(i);
      if ($.$eq(t1[i], eventStream) === true)
        return;
    }
    t3 = t1.length;
    if (t2 === t3)
      t1.push(eventStream);
    else {
      if (t2 !== (t2 | 0))
        throw $.iae(t2);
      if (t2 < 0 || t2 >= t3)
        throw $.ioore(t2);
      t1[t2] = eventStream;
    }
    this._eventStreamsCount = this._eventStreamsCount + 1;
  },
  _dispatchEvent$1: function($event) {
    var eventStreamsCount, t1, tail, head, eventStream, t2, tail0, t3;
    $event._eventPhase = 2;
    $event._stopsPropagation = false;
    $event._stopsImmediatePropagation = false;
    eventStreamsCount = this._eventStreamsCount;
    if (eventStreamsCount !== (eventStreamsCount | 0))
      return this._dispatchEvent$1$bailout(1, $event, eventStreamsCount);
    for (t1 = this._eventStreams, tail = 0, head = 0; head < eventStreamsCount; ++head) {
      if (head >= t1.length)
        throw $.ioore(head);
      eventStream = t1[head];
      if (eventStream == null)
        continue;
      if (eventStream.get$_subscriptionsCount() === 0) {
        t1[head] = null;
        continue;
      }
      $event._liblib3$_target = eventStream.get$_liblib3$_target();
      $event._currentTarget = eventStream.get$_liblib3$_target();
      eventStream._dispatchEvent$1($event);
      if (tail !== head) {
        t2 = t1.length;
        if (tail >= t2)
          throw $.ioore(tail);
        t1[tail] = eventStream;
        if (head >= t2)
          throw $.ioore(head);
        t1[head] = null;
      }
      ++tail;
    }
    if (tail !== eventStreamsCount) {
      for (t2 = t1.length, head = eventStreamsCount; head < this._eventStreamsCount; ++head, tail = tail0) {
        tail0 = tail + 1;
        if (head < 0 || head >= t2)
          throw $.ioore(head);
        t3 = t1[head];
        if (tail >= t2)
          throw $.ioore(tail);
        t1[tail] = t3;
        t1[head] = null;
      }
      this._eventStreamsCount = tail;
    }
  },
  _dispatchEvent$1$bailout: function(state0, $event, eventStreamsCount) {
    var t1, tail, head, eventStream, t2, tail0, t3;
    for (t1 = this._eventStreams, tail = 0, head = 0; head < eventStreamsCount; ++head) {
      if (head >= t1.length)
        throw $.ioore(head);
      eventStream = t1[head];
      if (eventStream == null)
        continue;
      if (eventStream.get$_subscriptionsCount() === 0) {
        t1[head] = null;
        continue;
      }
      $event._liblib3$_target = eventStream.get$_liblib3$_target();
      $event._currentTarget = eventStream.get$_liblib3$_target();
      eventStream._dispatchEvent$1($event);
      if (tail !== head) {
        t2 = t1.length;
        if (tail >= t2)
          throw $.ioore(tail);
        t1[tail] = eventStream;
        if (head >= t2)
          throw $.ioore(head);
        t1[head] = null;
      }
      ++tail;
    }
    if (tail !== eventStreamsCount) {
      for (t2 = t1.length, head = eventStreamsCount; head < this._eventStreamsCount; ++head, tail = tail0) {
        tail0 = tail + 1;
        if (head !== (head | 0))
          throw $.iae(head);
        if (head < 0 || head >= t2)
          throw $.ioore(head);
        t3 = t1[head];
        if (tail >= t2)
          throw $.ioore(tail);
        t1[tail] = t3;
        t1[head] = null;
      }
      this._eventStreamsCount = tail;
    }
  }
};

$$.EventStreamProvider0 = {"": "Object0;_liblib3$_eventType",
  forTarget$2$useCapture: function(target, useCapture) {
    return target._getEventStream$2(this._liblib3$_eventType, useCapture);
  },
  forTarget$1: function(target) {
    return this.forTarget$2$useCapture(target, false);
  }
};

$$._EventStreamSubscription0 = {"": "StreamSubscription;_eventStream,_liblib3$_onData,_liblib3$_pauseCount,_liblib3$_canceled",
  _liblib3$_onData$1: function(arg0) {
    return this._liblib3$_onData.call$1(arg0);
  },
  cancel$0: function() {
    if (!this._liblib3$_canceled) {
      this._eventStream._onSubscriptionCancel$1(this);
      this._liblib3$_canceled = true;
      this._liblib3$_onData = null;
    }
  },
  onError$1: function(_, handleError) {
  },
  get$onError: function(receiver) {
    return new $.BoundClosure$i1(this, "onError$1", receiver);
  },
  get$_liblib3$_paused: function() {
    return this._liblib3$_pauseCount > 0;
  },
  pause$1: function(_, resumeSignal) {
    this._liblib3$_pauseCount = this._liblib3$_pauseCount + 1;
    if (resumeSignal != null)
      resumeSignal.whenComplete$1(this.get$resume());
  },
  pause$0: function($receiver) {
    return this.pause$1($receiver, null);
  },
  resume$0: function() {
    if (!this.get$_liblib3$_paused())
      throw $.$$throw($.StateError$("Subscription is not paused."));
    this._liblib3$_pauseCount = this._liblib3$_pauseCount - 1;
  },
  get$resume: function() {
    return new $.BoundClosure$0(this, "resume$0");
  },
  _liblib3$_EventStreamSubscription$2: function(_eventStream, _onData) {
    this._liblib3$_pauseCount = 0;
    this._liblib3$_canceled = false;
  }
};

$$.KeyboardEvent = {"": "Event;_altKey,_ctrlKey,_shiftKey,_commandKey,_controlKey,_charCode,_keyCode,_keyLocation,_type,_bubbles,_eventPhase,_liblib3$_target,_currentTarget,_stopsPropagation,_stopsImmediatePropagation",
  _reset$2: function(type, bubbles) {
    $.Event.prototype._reset$2.call(this, type, bubbles);
    this._altKey = false;
    this._ctrlKey = false;
    this._shiftKey = false;
    this._commandKey = false;
    this._controlKey = false;
    this._charCode = 0;
    this._keyCode = 0;
    this._keyLocation = 0;
  },
  get$altKey: function(_) {
    return this._altKey;
  },
  get$ctrlKey: function(_) {
    return this._ctrlKey;
  },
  get$shiftKey: function(_) {
    return this._shiftKey;
  },
  get$charCode: function(_) {
    return this._charCode;
  },
  get$keyCode: function(_) {
    return this._keyCode;
  },
  get$keyLocation: function(_) {
    return this._keyLocation;
  },
  KeyboardEvent$2: function(type, bubbles) {
    this._reset$2(type, bubbles);
  }
};

$$.MouseEvent = {"": "Event;_localX,_localY,_stageX,_stageY,_buttonDown,_altKey,_controlKey,_ctrlKey,_shiftKey,_clickCount,_deltaX,_deltaY,_type,_bubbles,_eventPhase,_liblib3$_target,_currentTarget,_stopsPropagation,_stopsImmediatePropagation",
  _reset$2: function(type, bubbles) {
    $.Event.prototype._reset$2.call(this, type, bubbles);
    this._localY = 0;
    this._localX = 0;
    this._stageY = 0;
    this._stageX = 0;
    this._buttonDown = false;
    this._altKey = false;
    this._controlKey = false;
    this._ctrlKey = false;
    this._shiftKey = false;
    this._clickCount = 0;
    this._deltaX = 0;
    this._deltaY = 0;
  },
  set$_localPoint: function(point) {
    this._localX = point.get$x(point);
    this._localY = point.get$y(point);
  },
  set$_stagePoint: function(point) {
    this._stageX = point.get$x(point);
    this._stageY = point.get$y(point);
  },
  get$stageX: function() {
    return this._stageX;
  },
  get$stageY: function() {
    return this._stageY;
  },
  get$buttonDown: function() {
    return this._buttonDown;
  },
  get$altKey: function(_) {
    return this._altKey;
  },
  get$ctrlKey: function(_) {
    return this._ctrlKey;
  },
  get$shiftKey: function(_) {
    return this._shiftKey;
  },
  get$clickCount: function() {
    return this._clickCount;
  },
  get$deltaX: function(_) {
    return this._deltaX;
  },
  get$deltaY: function(_) {
    return this._deltaY;
  },
  MouseEvent$2: function(type, bubbles) {
    this._reset$2(type, bubbles);
  }
};

$$.TextEvent = {"": "Event;_text,_type,_bubbles,_eventPhase,_liblib3$_target,_currentTarget,_stopsPropagation,_stopsImmediatePropagation"};

$$.TouchEvent = {"": "Event;_touchPointID,_isPrimaryTouchPoint,_localX,_localY,_stageX,_stageY,_altKey,_controlKey,_ctrlKey,_shiftKey,_pressure,_sizeX,_sizeY,_type,_bubbles,_eventPhase,_liblib3$_target,_currentTarget,_stopsPropagation,_stopsImmediatePropagation",
  _reset$2: function(type, bubbles) {
    $.Event.prototype._reset$2.call(this, type, bubbles);
    this._touchPointID = 0;
    this._isPrimaryTouchPoint = false;
    this._localY = 0;
    this._localX = 0;
    this._stageY = 0;
    this._stageX = 0;
    this._altKey = false;
    this._controlKey = false;
    this._ctrlKey = false;
    this._shiftKey = false;
    this._pressure = 1;
    this._sizeX = 0;
    this._sizeY = 0;
  },
  set$_localPoint: function(point) {
    this._localX = point.get$x(point);
    this._localY = point.get$y(point);
  },
  set$_stagePoint: function(point) {
    this._stageX = point.get$x(point);
    this._stageY = point.get$y(point);
  },
  get$touchPointID: function() {
    return this._touchPointID;
  },
  get$stageX: function() {
    return this._stageX;
  },
  get$stageY: function() {
    return this._stageY;
  },
  get$altKey: function(_) {
    return this._altKey;
  },
  get$ctrlKey: function(_) {
    return this._ctrlKey;
  },
  get$shiftKey: function(_) {
    return this._shiftKey;
  },
  TouchEvent$2: function(type, bubbles) {
    this._reset$2(type, bubbles);
  }
};

$$.Matrix = {"": "Object0;_a,_b,_c,_d,_tx,_ty,_det",
  clone$0: function(_) {
    return $.Matrix$(this._a, this._b, this._c, this._d, this._tx, this._ty);
  },
  cloneInvert$0: function() {
    var t1, t2, a, b, c, d;
    t1 = this._d;
    t2 = this._det;
    a = t1 / t2;
    b = -(this._b / t2);
    c = -(this._c / t2);
    d = this._a / t2;
    t2 = this._tx;
    t1 = this._ty;
    return $.Matrix$(a, b, c, d, -(a * t2 + c * t1), -(b * t2 + d * t1));
  },
  get$a: function() {
    return this._a;
  },
  get$b: function() {
    return this._b;
  },
  get$c: function() {
    return this._c;
  },
  get$d: function() {
    return this._d;
  },
  get$tx: function() {
    return this._tx;
  },
  get$ty: function() {
    return this._ty;
  },
  get$det: function() {
    return this._det;
  },
  transformPoint$1: function(p) {
    var x, y;
    x = $.toDouble$0$n(p.get$x(p));
    y = $.toDouble$0$n(p.get$y(p));
    return $.Point$(x * this._a + y * this._c + this._tx, x * this._b + y * this._d + this._ty);
  },
  _transformHtmlPoint$1: function(p) {
    var t1, x, y;
    t1 = $.getInterceptor$x(p);
    x = $.toDouble$0$n(t1.get$x(p));
    y = $.toDouble$0$n(t1.get$y(p));
    return $.Point$(x * this._a + y * this._c + this._tx, x * this._b + y * this._d + this._ty);
  },
  concat$1: function(_, matrix) {
    var a1, b1, c1, d1, tx1, ty1, det1, a2, b2, c2, d2, tx2, ty2, det2;
    a1 = this._a;
    b1 = this._b;
    c1 = this._c;
    d1 = this._d;
    tx1 = this._tx;
    ty1 = this._ty;
    det1 = this._det;
    a2 = matrix.get$a();
    b2 = matrix.get$b();
    c2 = matrix.get$c();
    d2 = matrix.get$d();
    tx2 = matrix.get$tx();
    ty2 = matrix.get$ty();
    det2 = matrix.get$det();
    this._a = $.JSNumber_methods.toDouble$0(a1 * a2 + b1 * c2);
    this._b = $.JSNumber_methods.toDouble$0(a1 * b2 + b1 * d2);
    this._c = $.JSNumber_methods.toDouble$0(c1 * a2 + d1 * c2);
    this._d = $.JSNumber_methods.toDouble$0(c1 * b2 + d1 * d2);
    this._tx = $.JSNumber_methods.toDouble$0(tx1 * a2 + ty1 * c2 + tx2);
    this._ty = $.JSNumber_methods.toDouble$0(tx1 * b2 + ty1 * d2 + ty2);
    this._det = $.JSNumber_methods.toDouble$0(det1 * det2);
  },
  identity$0: function() {
    this._a = 1;
    this._b = 0;
    this._c = 0;
    this._d = 1;
    this._tx = 0;
    this._ty = 0;
    this._det = 1;
  },
  invert$0: function() {
    var a, b, c, d, tx, ty, det;
    a = this._a;
    b = this._b;
    c = this._c;
    d = this._d;
    tx = this._tx;
    ty = this._ty;
    det = this._det;
    this._a = $.JSDouble_methods.toDouble$0(d / det);
    this._b = -$.JSDouble_methods.toDouble$0(b / det);
    this._c = -$.JSDouble_methods.toDouble$0(c / det);
    this._d = $.JSDouble_methods.toDouble$0(a / det);
    this._tx = -$.JSNumber_methods.toDouble$0(this._a * tx + this._c * ty);
    this._ty = -$.JSNumber_methods.toDouble$0(this._b * tx + this._d * ty);
    this._det = $.JSDouble_methods.toDouble$0(1 / det);
  },
  setTo$6: function(a, b, c, d, tx, ty) {
    this._a = $.JSNumber_methods.toDouble$0(a);
    this._b = $.JSNumber_methods.toDouble$0(b);
    this._c = $.JSNumber_methods.toDouble$0(c);
    this._d = $.JSNumber_methods.toDouble$0(d);
    this._tx = $.JSNumber_methods.toDouble$0(tx);
    this._ty = $.JSNumber_methods.toDouble$0(ty);
    this._det = $.JSNumber_methods.toDouble$0(this._a * this._d - this._b * this._c);
  },
  copyFrom$1: function(matrix) {
    this._a = $.JSNumber_methods.toDouble$0(matrix.get$a());
    this._b = $.JSNumber_methods.toDouble$0(matrix.get$b());
    this._c = $.JSNumber_methods.toDouble$0(matrix.get$c());
    this._d = $.JSNumber_methods.toDouble$0(matrix.get$d());
    this._tx = $.JSNumber_methods.toDouble$0(matrix.get$tx());
    this._ty = $.JSNumber_methods.toDouble$0(matrix.get$ty());
    this._det = $.JSNumber_methods.toDouble$0(matrix.get$det());
  },
  copyFromAndConcat$2: function(copyMatrix, concatMatrix) {
    var a1, b1, c1, d1, tx1, ty1, det1, a2, b2, c2, d2, tx2, ty2, det2;
    a1 = copyMatrix.get$a();
    b1 = copyMatrix.get$b();
    c1 = copyMatrix.get$c();
    d1 = copyMatrix.get$d();
    tx1 = copyMatrix.get$tx();
    ty1 = copyMatrix.get$ty();
    det1 = copyMatrix.get$det();
    a2 = concatMatrix.get$a();
    b2 = concatMatrix.get$b();
    c2 = concatMatrix.get$c();
    d2 = concatMatrix.get$d();
    tx2 = concatMatrix.get$tx();
    ty2 = concatMatrix.get$ty();
    det2 = concatMatrix.get$det();
    this._a = $.JSNumber_methods.toDouble$0(a1 * a2 + b1 * c2);
    this._b = $.JSNumber_methods.toDouble$0(a1 * b2 + b1 * d2);
    this._c = $.JSNumber_methods.toDouble$0(c1 * a2 + d1 * c2);
    this._d = $.JSNumber_methods.toDouble$0(c1 * b2 + d1 * d2);
    this._tx = $.JSNumber_methods.toDouble$0(tx1 * a2 + ty1 * c2 + tx2);
    this._ty = $.JSNumber_methods.toDouble$0(tx1 * b2 + ty1 * d2 + ty2);
    this._det = $.JSNumber_methods.toDouble$0(det1 * det2);
  }
};

$$.Point = {"": "Object0;_x,_y",
  toString$0: function(_) {
    return "Point [x=" + $.S(this._x) + ", y=" + $.S(this._y) + "]";
  },
  get$x: function(_) {
    return this._x;
  },
  get$y: function(_) {
    return this._y;
  },
  get$length: function(_) {
    var t1, t2;
    t1 = this._x;
    t1 = $.$mul$n(t1, t1);
    t2 = this._y;
    return $.sqrt($.$add$ns(t1, $.$mul$n(t2, t2)));
  },
  set$x: function(_, value) {
    this._x = value;
  },
  set$y: function(_, value) {
    this._y = value;
  },
  add$1: function(_, p) {
    var t1 = $.getInterceptor$x(p);
    return $.Point$($.$add$ns(this._x, t1.get$x(p)), $.$add$ns(this._y, t1.get$y(p)));
  },
  subtract$1: function(p) {
    var t1 = $.getInterceptor$x(p);
    return $.Point$($.$sub$n(this._x, t1.get$x(p)), $.$sub$n(this._y, t1.get$y(p)));
  },
  copyFrom$1: function(p) {
    this._x = p.get$x(p);
    this._y = p.get$y(p);
  },
  equals$1: function(p) {
    return $.$eq(this._x, p.get$x(p)) === true && $.$eq(this._y, p.get$y(p)) === true;
  }
};

$$.Rectangle = {"": "Object0;_x,_y,_width,_height",
  toString$0: function(_) {
    return "Rectangle [x=" + $.S(this._x) + ", y=" + $.S(this._y) + ", width=" + $.S(this._width) + ", height=" + $.S(this._height) + "]";
  },
  get$x: function(_) {
    return this._x;
  },
  get$y: function(_) {
    return this._y;
  },
  get$width: function(_) {
    return this._width;
  },
  get$height: function(_) {
    return this._height;
  },
  get$left: function(_) {
    return this._x;
  },
  get$top: function(_) {
    return this._y;
  },
  get$right: function(_) {
    return $.$add$ns(this._x, this._width);
  },
  get$bottom: function(_) {
    return $.$add$ns(this._y, this._height);
  },
  set$x: function(_, value) {
    this._x = value;
  },
  set$y: function(_, value) {
    this._y = value;
  },
  set$width: function(_, value) {
    this._width = value;
  },
  set$height: function(_, value) {
    this._height = value;
  },
  contains$2: function(_, px, py) {
    return $.$le$n(this._x, px) === true && $.$le$n(this._y, py) === true && $.$ge$n($.$add$ns(this._x, this._width), px) === true && $.$ge$n($.$add$ns(this._y, this._height), py) === true;
  },
  get$contains: function(receiver) {
    return new $.BoundClosure$i2(this, "contains$2", receiver);
  },
  get$isEmpty: function(_) {
    return $.$eq(this._width, 0) === true && $.$eq(this._height, 0) === true;
  },
  copyFrom$1: function(r) {
    this._x = r.get$x(r);
    this._y = r.get$y(r);
    this._width = r.get$width(r);
    this._height = r.get$height(r);
  },
  union$1: function(_, rect) {
    var t1, rLeft, rTop;
    t1 = $.getInterceptor$x(rect);
    rLeft = $.min(this.get$left(this), t1.get$left(rect));
    rTop = $.min(this.get$top(this), t1.get$top(rect));
    return $.Rectangle$(rLeft, rTop, $.max(this.get$right(this), t1.get$right(rect)) - rLeft, $.max(this.get$bottom(this), t1.get$bottom(rect)) - rTop);
  }
};

$$.Sound = {"": "Object0;"};

$$.SoundChannel = {"": "EventDispatcher;"};

$$.SoundTransform = {"": "Object0;volume',pan,leftToLeft,leftToRight,rightToRight,rightToLeft"};

$$.AudioElementSound = {"": "Sound;_audio<,_audioPool,_soundChannels",
  get$length: function(_) {
    return this._audio.duration;
  },
  play$2: function(_, loop, soundTransform) {
    if (soundTransform == null)
      soundTransform = $.SoundTransform$(1, 0);
    return $.AudioElementSoundChannel$(this, loop, soundTransform);
  },
  play$0: function($receiver) {
    return this.play$2($receiver, false, null);
  },
  _getAudioElement$1: function(soundChannel) {
    var audio;
    if ($.get$length$asx(this._audioPool) === 0) {
      audio = this._audio.cloneNode(true);
      $.get$onEnded$x(audio).listen$1(this.get$_onAudioEnded());
    } else
      audio = $.removeAt$1$ax(this._audioPool, 0);
    this._soundChannels.push(soundChannel);
    return audio;
  },
  _releaseAudioElement$1: function(soundChannel) {
    var audio, index;
    audio = soundChannel._audio;
    index = $.JSArray_methods.indexOf$1(this._soundChannels, soundChannel);
    $.JSArray_methods.removeAt$1(this._soundChannels, index);
    $.add$1$ax(this._audioPool, audio);
    if ($.$gt$n(this._audio.currentTime, 0) && this._audio.ended === false)
      this._audio.currentTime = 0;
  },
  _onAudioEnded$1: function($event) {
    var audio, soundChannel, i, t1, t2;
    audio = $.get$target$x($event);
    soundChannel = null;
    i = 0;
    while (true) {
      t1 = this._soundChannels;
      t2 = t1.length;
      if (!(i < t2 && soundChannel == null))
        break;
      if (i >= t2)
        throw $.ioore(i);
      if ($.$eq(t1[i].get$_audio(), audio) === true) {
        t1 = this._soundChannels;
        if (i >= t1.length)
          throw $.ioore(i);
        soundChannel = t1[i];
      }
      ++i;
    }
    if (soundChannel != null)
      $.stop$0$x(soundChannel);
  },
  get$_onAudioEnded: function() {
    return new $.BoundClosure$1(this, "_onAudioEnded$1");
  },
  AudioElementSound$0: function() {
    var t1 = $.List_List($, $.AudioElementSoundChannel);
    $.setRuntimeTypeInfo(t1, [$.AudioElementSoundChannel]);
    this._soundChannels = t1;
    this._audio = $.AudioElement_AudioElement($);
    $.get$onEnded$x(this._audio).listen$1(this.get$_onAudioEnded());
    t1 = $.List_List($, $.AudioElement);
    $.setRuntimeTypeInfo(t1, [$.AudioElement]);
    this._audioPool = t1;
    $.add$1$ax(this._audioPool, this._audio);
    $.add$1$ax($.get$children$x($.get$body$x($.document())), this._audio);
  }
};

$$.AudioElementSound_load_onCanPlayThrough = {"": "Closure;box_0,sound_1,loadCompleter_2",
  call$1: function($event) {
    var t1 = this.box_0;
    t1.onCanPlayThroughSubscription_0.cancel$0();
    t1.onErrorSubscription_1.cancel$0();
    t1 = this.loadCompleter_2;
    t1.complete$1(t1, this.sound_1);
  }
};

$$.AudioElementSound_load_onError = {"": "Closure;box_0,loadCompleter_3",
  call$1: function($event) {
    var t1 = this.box_0;
    t1.onCanPlayThroughSubscription_0.cancel$0();
    t1.onErrorSubscription_1.cancel$0();
    this.loadCompleter_3.completeError$1($.StateError$("Failed to load audio."));
  }
};

$$.AudioElementSoundChannel = {"": "SoundChannel;_audioElementSound,_audio<,_loop,_soundTransform,_eventStreams",
  set$soundTransform: function(value) {
    var t1, t2;
    this._soundTransform = value;
    t1 = this._audio;
    if (t1 != null) {
      t2 = this._soundTransform;
      $.set$volume$x(t1, t2 != null ? t2.volume : 1);
    }
  },
  stop$0: function(_) {
    var t1 = this._audio;
    if (t1 != null) {
      if ($.get$ended$x(t1) === false)
        $.pause$0$x(t1);
      this._audioElementSound._releaseAudioElement$1(this);
      this._audio = null;
    }
  },
  AudioElementSoundChannel$3: function(audioElementSound, loop, soundTransform) {
    this._audioElementSound = audioElementSound;
    this._loop = loop;
    this._soundTransform = soundTransform;
    this._audio = audioElementSound._getAudioElement$1(this);
    $.set$loop$x(this._audio, this._loop);
    this.set$soundTransform(soundTransform);
    $.play$0$x(this._audio);
  }
};

$$.MockSound = {"": "Sound;",
  get$length: function(_) {
    return (0/0);
  },
  play$2: function(_, loop, soundTransform) {
    if (soundTransform == null)
      soundTransform = $.SoundTransform$(1, 0);
    return $.MockSoundChannel$(this, loop, soundTransform);
  },
  play$0: function($receiver) {
    return this.play$2($receiver, false, null);
  }
};

$$.MockSound_load_anon = {"": "Closure;",
  call$0: function() {
    return $.MockSound$();
  }
};

$$.MockSoundChannel = {"": "SoundChannel;_loop,_soundTransform,_eventStreams",
  stop$0: function(_) {
  },
  MockSoundChannel$3: function(mockSound, loop, soundTransform) {
    this._loop = loop;
    this._soundTransform = soundTransform;
  }
};

$$.WebAudioApiSound = {"": "Sound;_buffer",
  get$length: function(_) {
    return $.get$duration$x(this._buffer);
  },
  play$2: function(_, loop, soundTransform) {
    if (soundTransform == null)
      soundTransform = $.SoundTransform$(1, 0);
    return $.WebAudioApiSoundChannel$(this, loop, soundTransform);
  },
  play$0: function($receiver) {
    return this.play$2($receiver, false, null);
  },
  WebAudioApiSound$0: function() {
    if ($.get$SoundMixer__audioContext() == null)
      throw $.$$throw($.UnsupportedError$("This browser does not support Web Audio API."));
  }
};

$$.WebAudioApiSound_load_anon = {"": "Closure;sound_0,loadCompleter_1",
  call$1: function(request) {
    var audioData, audioContext, t1, t2;
    audioData = $.get$response$x(request);
    audioContext = $.get$SoundMixer__audioContext();
    t1 = this.sound_0;
    t2 = this.loadCompleter_1;
    $.decodeAudioData$3$x(audioContext, audioData, new $.WebAudioApiSound_load__anon(t1, t2), new $.WebAudioApiSound_load__anon0(t2));
  }
};

$$.WebAudioApiSound_load__anon = {"": "Closure;sound_2,loadCompleter_3",
  call$1: function(buffer) {
    var t1, t2;
    t1 = this.sound_2;
    t1._buffer = buffer;
    t2 = this.loadCompleter_3;
    t2.complete$1(t2, t1);
  }
};

$$.WebAudioApiSound_load__anon0 = {"": "Closure;loadCompleter_4",
  call$1: function(error) {
    this.loadCompleter_4.completeError$1($.StateError$("Failed to decode audio."));
  }
};

$$.WebAudioApiSound_load_anon0 = {"": "Closure;loadCompleter_5",
  call$1: function(error) {
    this.loadCompleter_5.completeError$1($.StateError$("Failed to load audio."));
  }
};

$$.WebAudioApiSoundChannel = {"": "SoundChannel;_webAudioApiSound,_soundTransform,_loop,_gainNode,_sourceNode,_eventStreams",
  stop$0: function(_) {
    $.stop$1$x(this._sourceNode, 0);
  },
  WebAudioApiSoundChannel$3: function(webAudioApiSound, loop, soundTransform) {
    var context, t1, t2, t3;
    this._webAudioApiSound = webAudioApiSound;
    this._loop = loop;
    this._soundTransform = soundTransform;
    context = $.get$SoundMixer__audioContext();
    t1 = $.getInterceptor$x(context);
    this._gainNode = t1.createGain$0(context);
    this._gainNode.connect(t1.get$destination(context), 0, 0);
    t2 = this._gainNode.gain;
    t3 = this._soundTransform;
    t2.value = t3 != null ? $.pow(t3.volume, 2) : 1;
    this._sourceNode = t1.createBufferSource$0(context);
    this._sourceNode.buffer = this._webAudioApiSound._buffer;
    this._sourceNode.loop = loop;
    this._sourceNode.connect(this._gainNode, 0, 0);
    $.start$1$x(this._sourceNode, 0);
  }
};

$$.TextField = {"": "InteractiveObject;_text,_textColor,_defaultTextFormat,_autoSize,_gridFitType,_type,_wordWrap,_background,_backgroundColor,_border,_borderColor,_textWidth,_textHeight,_linesText,_linesMetrics,_canvasRefreshPending,_canvasWidth,_canvasHeight,_canvas,_context,doubleClickEnabled,mouseEnabled,tabEnabled,tabIndex,_liblib3$_id,_x,_y,_pivotX,_pivotY,_scaleX,_scaleY,_skewX,_skewY,_rotation,_alpha,_visible,_off,_mask,_cache,_name,_parent,_tmpMatrix,_transformationMatrixPrivate,_transformationMatrixRefresh,_eventStreams",
  get$type: function(_) {
    return this._type;
  },
  get$width: function(_) {
    return this._canvasWidth;
  },
  get$height: function(_) {
    return this._canvasHeight;
  },
  set$text: function(_, value) {
    this._text = value;
    this._canvasRefreshPending = true;
  },
  set$textColor: function(value) {
    this._textColor = value;
    this._canvasRefreshPending = true;
  },
  set$defaultTextFormat: function(value) {
    this._defaultTextFormat = value;
    this._textColor = this._defaultTextFormat.color;
    this._canvasRefreshPending = true;
  },
  set$width: function(_, value) {
    this._canvasWidth = value;
    this._canvasRefreshPending = true;
  },
  set$height: function(_, value) {
    this._canvasHeight = value;
    this._canvasRefreshPending = true;
  },
  getBoundsTransformed$2: function(matrix, returnRectangle) {
    return $._getBoundsTransformedHelper(matrix, this._canvasWidth, this._canvasHeight, returnRectangle);
  },
  getBoundsTransformed$1: function(matrix) {
    return this.getBoundsTransformed$2(matrix, null);
  },
  hitTestInput$2: function(localX, localY) {
    var t1, t2;
    t1 = $.getInterceptor$n(localX);
    if (t1.$ge(localX, 0) === true) {
      t2 = $.getInterceptor$n(localY);
      t1 = t2.$ge(localY, 0) === true && t1.$lt(localX, this._canvasWidth) === true && t2.$lt(localY, this._canvasHeight) === true;
    } else
      t1 = false;
    if (t1)
      return this;
    return;
  },
  render$1: function(renderState) {
    this._canvasRefresh$0();
    $.drawImage$3$x(renderState._context, this._canvas, 0, 0);
  },
  _processTextLines$1: function(fontStyle) {
    var fontStyleMetrics, t1, t2, line, line0, t3, line1, t4, metrics, offsetX, textLineMetrics;
    fontStyleMetrics = $._getFontStyleMetrics(fontStyle);
    $.JSArray_methods.clear$0(this._linesText);
    $.JSArray_methods.clear$0(this._linesMetrics);
    if (!this._wordWrap)
      this._linesText.push(this._text);
    else
      for (t1 = $.JSArray_methods.get$iterator($.JSString_methods.replaceAll$2(this._text, "\r", "").split("\n")); t1.moveNext$0();) {
        for (t2 = $.JSArray_methods.get$iterator($.split$1$s(t1.get$current(), " ")), line = ""; t2.moveNext$0();) {
          line0 = t2.get$current();
          t3 = $.getInterceptor$asx(line);
          line1 = t3.get$length(line) === 0 ? line0 : $.JSString_methods.$add(t3.$add(line, " "), line0);
          if ($.$gt$n($.measureText$1$x(this._context, line1).width, this._canvasWidth)) {
            t3 = t3.get$length(line);
            t4 = this._linesText;
            if (t3 === 0) {
              t4.push(line1);
              line = "";
            } else {
              t4.push(line);
              line = line0;
            }
          } else
            line = line1;
        }
        if (!$.get$isEmpty$asx(line))
          this._linesText.push(line);
      }
    this._textWidth = 0;
    this._textHeight = 0;
    for (t1 = $.JSArray_methods.get$iterator(this._linesText); t1.moveNext$0();) {
      t2 = t1.get$current();
      metrics = $.measureText$1$x(this._context, t2);
      t2 = this._defaultTextFormat.align;
      offsetX = t2 === "center" || t2 === "justify" ? $.$div$n($.$sub$n(this._canvasWidth, metrics.width), 2) : 0;
      t2 = this._defaultTextFormat.align;
      if (t2 === "right" || t2 === "end")
        offsetX = $.$sub$n(this._canvasWidth, metrics.width);
      textLineMetrics = $.TextLineMetrics$(offsetX, metrics.width, this._defaultTextFormat.size, fontStyleMetrics.get$ascent(), fontStyleMetrics.get$descent(), 0);
      this._linesMetrics.push(textLineMetrics);
      this._textWidth = $.max(this._textWidth, textLineMetrics.width);
      this._textHeight = $.$add$ns(this._textHeight, textLineMetrics.height);
    }
  },
  _canvasRefresh$0: function() {
    var canvasWidthInt, canvasHeightInt, fontStyleBuffer, fontStyle, t1, offsetY, i, metrics, t2, t3;
    if (this._canvasRefreshPending) {
      this._canvasRefreshPending = false;
      canvasWidthInt = $.toInt$0$nx($.ceil$0$nx(this._canvasWidth));
      canvasHeightInt = $.toInt$0$nx($.ceil$0$nx(this._canvasHeight));
      if (this._canvas == null) {
        this._canvas = $.CanvasElement_CanvasElement(canvasHeightInt, canvasWidthInt);
        this._context = $.get$context2d$x(this._canvas);
      }
      if ($.$eq($.get$width$x(this._canvas), canvasWidthInt) !== true)
        $.set$width$x(this._canvas, canvasWidthInt);
      if ($.$eq($.get$height$x(this._canvas), canvasHeightInt) !== true)
        $.set$height$x(this._canvas, canvasHeightInt);
      fontStyleBuffer = $.StringBuffer$("");
      fontStyleBuffer.write$1(this._defaultTextFormat.italic ? "italic " : "normal ");
      fontStyleBuffer.write$1("normal ");
      fontStyleBuffer.write$1(this._defaultTextFormat.bold ? "bold " : "normal ");
      fontStyleBuffer.write$1("" + this._defaultTextFormat.size + "px ");
      fontStyleBuffer.write$1($.S(this._defaultTextFormat.font) + ",sans-serif");
      fontStyle = fontStyleBuffer.toString$0(fontStyleBuffer);
      $.set$font$x(this._context, fontStyle);
      $.set$textAlign$x(this._context, "start");
      $.set$textBaseline$x(this._context, "alphabetic");
      $.set$fillStyle$x(this._context, $._color2rgb(this._textColor));
      this._processTextLines$1(fontStyle);
      t1 = this._context;
      if (this._background) {
        $.set$fillStyle$x(t1, $._color2rgb(this._backgroundColor));
        $.fillRect$4$x(this._context, 0, 0, this._canvasWidth, this._canvasHeight);
      } else
        $.clearRect$4$x(t1, 0, 0, this._canvasWidth, this._canvasHeight);
      offsetY = this._defaultTextFormat.size;
      for (i = 0; i < this._linesText.length; ++i) {
        t1 = this._linesMetrics;
        if (i >= t1.length)
          throw $.ioore(i);
        metrics = t1[i];
        $.set$fillStyle$x(this._context, $._color2rgb(this._textColor));
        t1 = this._context;
        t2 = this._linesText;
        if (i >= t2.length)
          throw $.ioore(i);
        t3 = $.getInterceptor$x(metrics);
        $.fillText$3$x(t1, t2[i], t3.get$x(metrics), offsetY);
        t3 = t3.get$height(metrics);
        if (typeof t3 !== "number")
          throw $.iae(t3);
        offsetY += t3;
      }
      if (this._border) {
        $.set$strokeStyle$x(this._context, $._color2rgb(this._borderColor));
        $.set$lineWidth$x(this._context, 1);
        $.strokeRect$4$x(this._context, 0, 0, this._canvasWidth, this._canvasHeight);
      }
    }
  },
  TextField$0: function() {
    this._defaultTextFormat = $.TextFormat$("Arial", 12, 0, "left", false, 0, false, 0, 0, 0, false);
    var t1 = $.List_List($, $.String);
    $.setRuntimeTypeInfo(t1, [$.String]);
    this._linesText = t1;
    t1 = $.List_List($, $.TextLineMetrics);
    $.setRuntimeTypeInfo(t1, [$.TextLineMetrics]);
    this._linesMetrics = t1;
  }
};

$$.TextFormat = {"": "Object0;font,size,color,bold,italic,underline,align,leftMargin,rightMargin,indent,leading,letterSpacing,blockIndent,bullet,kerning"};

$$.TextLineMetrics = {"": "Object0;ascent<,descent<,height*,leading,width*,x*"};

$$.ObjectPool = {"": "Object0;_pool,_valueFactory,_poolCount",
  _valueFactory$0: function() {
    return this._valueFactory.call$0();
  },
  pop$0: function() {
    var t1, t2;
    t1 = this._poolCount;
    if (t1 === 0)
      return this._valueFactory$0();
    else {
      this._poolCount = t1 - 1;
      t1 = this._pool;
      t2 = this._poolCount;
      if (t2 !== (t2 | 0))
        return this.pop$0$bailout(1, t1, t2);
      if (t2 < 0 || t2 >= t1.length)
        throw $.ioore(t2);
      return t1[t2];
    }
  },
  pop$0$bailout: function(state0, t1, t2) {
    switch (state0) {
      case 0:
        t1 = this._poolCount;
      case 1:
        if (state0 === 0 && t1 === 0)
          return this._valueFactory$0();
        else
          switch (state0) {
            case 0:
              this._poolCount = t1 - 1;
              t1 = this._pool;
              t2 = this._poolCount;
            case 1:
              state0 = 0;
              if (t2 !== (t2 | 0))
                throw $.iae(t2);
              if (t2 < 0 || t2 >= t1.length)
                throw $.ioore(t2);
              return t1[t2];
          }
    }
  },
  push$1: function(value) {
    var t1, t2, t3;
    t1 = this._poolCount;
    t2 = this._pool;
    t3 = t2.length;
    if (t1 === t3)
      t2.push(value);
    else {
      if (t1 !== (t1 | 0))
        throw $.iae(t1);
      if (t1 < 0 || t1 >= t3)
        throw $.ioore(t1);
      t2[t1] = value;
    }
    this._poolCount = this._poolCount + 1;
  }
};

$$.ResourceManager = {"": "Object0;_resources",
  _addResourceManagerResource$1: function(resource) {
    var kind, $name, key, t1;
    kind = resource.get$kind(resource);
    $name = resource.get$name(resource);
    key = kind + "." + $name;
    if (this._resources.containsKey$1(key) === true)
      throw $.$$throw($.StateError$("ResourceManager already contains a resource called '" + $name + "'"));
    t1 = this._resources;
    t1.$indexSet(t1, key, resource);
  },
  _getResourceManagerResource$2: function(kind, $name) {
    var key, t1;
    key = kind + "." + $name;
    if ($.$eq(this._resources.containsKey$1(key), false) === true)
      throw $.$$throw($.StateError$("ResourceManager does not contains a resource called '" + $name + "'"));
    t1 = this._resources;
    return t1.$index(t1, key);
  },
  addBitmapData$2: function($name, url) {
    var resource = $.ResourceManagerResource$("BitmapData", $name, url);
    resource._load$1($.BitmapData_load(url));
    this._addResourceManagerResource$1(resource);
  },
  addSound$2: function($name, url) {
    var resource = $.ResourceManagerResource$("Sound", $name, url);
    resource._load$1($.Sound_load(url));
    this._addResourceManagerResource$1(resource);
  },
  load$0: function(_) {
    return $._FutureImpl__FutureImpl$wait($.JSArray_methods.map$1(this.get$pendingResources(), new $.ResourceManager_load_anon())).then$1(new $.ResourceManager_load_anon0(this));
  },
  get$pendingResources: function() {
    var t1 = this._resources;
    t1 = t1.get$values(t1);
    t1 = t1.where$1(t1, new $.ResourceManager_pendingResources_anon());
    return t1.toList$0(t1);
  },
  get$failedResources: function() {
    var t1 = this._resources;
    t1 = t1.get$values(t1);
    t1 = t1.where$1(t1, new $.ResourceManager_failedResources_anon());
    return t1.toList$0(t1);
  },
  getBitmapData$1: function($name) {
    return this._getResourceManagerResource$2("BitmapData", $name).get$resource();
  },
  getSound$1: function($name) {
    return this._getResourceManagerResource$2("Sound", $name).get$resource();
  },
  ResourceManager$0: function() {
    this._resources = $.Map_Map($.String, $.ResourceManagerResource);
  }
};

$$.ResourceManager_load_anon = {"": "Closure;",
  call$1: function(r) {
    return r.get$_loader();
  }
};

$$.ResourceManager_load_anon0 = {"": "Closure;this_0",
  call$1: function(value) {
    var t1, t2;
    t1 = this.this_0;
    t2 = t1.get$failedResources().length;
    if (t2 > 0)
      throw $.$$throw($.StateError$("Failed to load " + t2 + " resource(s)."));
    return t1;
  }
};

$$.ResourceManager_pendingResources_anon = {"": "Closure;",
  call$1: function(r) {
    return r.get$resource() == null;
  }
};

$$.ResourceManager_failedResources_anon = {"": "Closure;",
  call$1: function(r) {
    return $.get$error$x(r) != null;
  }
};

$$.ResourceManagerResource = {"": "Object0;_kind,_name,_url,_loader<,_error?,_resource?",
  get$kind: function(_) {
    return this._kind;
  },
  get$name: function(_) {
    return this._name;
  },
  get$resource: function() {
    return this._resource;
  },
  get$error: function(_) {
    return this._error;
  },
  _load$1: function(loader) {
    this._loader = loader.then$2$onError(new $.ResourceManagerResource__load_anon(this), new $.ResourceManagerResource__load_anon0(this));
  },
  ResourceManagerResource$3: function(kind, $name, url) {
    this._kind = kind;
    this._name = $name;
    this._url = url;
    this._error = null;
    this._resource = null;
  }
};

$$.ResourceManagerResource__load_anon = {"": "Closure;this_0",
  call$1: function(value) {
    var t1 = this.this_0;
    t1.set$_resource(value);
    t1.set$_error(null);
  }
};

$$.ResourceManagerResource__load_anon0 = {"": "Closure;this_1",
  call$1: function(error) {
    var t1 = this.this_1;
    t1.set$_resource(null);
    t1.set$_error($.get$error$x(error));
  }
};

$$._FontStyleMetrics = {"": "Object0;fontStyle,ascent<,descent<,height*",
  _FontStyleMetrics$1: function(fontStyle) {
    var text, block, div, exception;
    this.fontStyle = fontStyle;
    text = $.Element_Element$tag("span");
    $.set$font$x($.get$style$x(text), this.fontStyle);
    $.set$text$x(text, "Hg");
    block = $.Element_Element$tag("div");
    $.set$display$x($.get$style$x(block), "inline-block");
    $.set$width$x($.get$style$x(block), "1px");
    $.set$height$x($.get$style$x(block), "0px");
    div = $.Element_Element$tag("div");
    $.append$1$x(div, block);
    $.append$1$x(div, text);
    $.get$body$x($.document()).appendChild(div);
    try {
      $.set$verticalAlign$x($.get$style$x(block), "baseline");
      this.ascent = $.$sub$n($.get$offsetTop$x(block), $.get$offsetTop$x(text));
      $.set$verticalAlign$x($.get$style$x(block), "bottom");
      this.height = $.$sub$n($.get$offsetTop$x(block), $.get$offsetTop$x(text));
      this.descent = $.$sub$n(this.height, this.ascent);
    } catch (exception) {
      $.unwrapException(exception);
    }
 finally {
      $.remove$0$ax(div);
    }
  }
};

// Bound closures
$$.BoundClosure$i1 = {"": "Closure;self,target,receiver",
  call$1: function(p0) {
    return this.self[this.target](this.receiver, p0);
  }
};

$$.Bound_contains_JSString = {"": "Closure;self,target,receiver",
  call$2: function(p0, p1) {
    return this.self[this.target](this.receiver, p0, p1);
  },
  call$1: function(other) {
    return this.call$2(other, 0);
  }
};

$$.BoundClosure$1 = {"": "Closure;self,target",
  call$1: function(p0) {
    return this.self[this.target](p0);
  }
};

$$.BoundClosure$0 = {"": "Closure;self,target",
  call$0: function() {
    return this.self[this.target]();
  }
};

$$.BoundClosure$i2 = {"": "Closure;self,target,receiver",
  call$2: function(p0, p1) {
    return this.self[this.target](this.receiver, p0, p1);
  }
};

Isolate.$finishClasses($$, $, null);
$$ = null;

$.Arrays_copy = function(src, srcStart, dst, dstStart, count) {
  var i, j, t1, t2, t3;
  if (typeof src !== "string" && (typeof src !== "object" || src === null || src.constructor !== Array && !src.$isJavaScriptIndexingBehavior()))
    return $.Arrays_copy$bailout(1, src, srcStart, dst, dstStart, count);
  if (typeof dst !== "object" || dst === null || (dst.constructor !== Array || !!dst.immutable$list) && !dst.$isJavaScriptIndexingBehavior())
    return $.Arrays_copy$bailout(1, src, srcStart, dst, dstStart, count);
  if (typeof dstStart !== "number")
    return $.Arrays_copy$bailout(1, src, srcStart, dst, dstStart, count);
  if (srcStart < dstStart) {
    if (typeof count !== "number")
      throw $.iae(count);
    i = srcStart + count - 1;
    j = dstStart + count - 1;
    t1 = src.length;
    t2 = dst.length;
    for (; i >= srcStart; --i, --j) {
      if (i !== (i | 0))
        throw $.iae(i);
      if (i < 0 || i >= t1)
        throw $.ioore(i);
      t3 = src[i];
      if (j !== (j | 0))
        throw $.iae(j);
      if (j < 0 || j >= t2)
        throw $.ioore(j);
      dst[j] = t3;
    }
  } else {
    t1 = src.length;
    t2 = dst.length;
    j = dstStart;
    i = srcStart;
    while (true) {
      if (typeof count !== "number")
        throw $.iae(count);
      if (!(i < srcStart + count))
        break;
      if (i !== (i | 0))
        throw $.iae(i);
      if (i < 0 || i >= t1)
        throw $.ioore(i);
      t3 = src[i];
      if (j !== (j | 0))
        throw $.iae(j);
      if (j < 0 || j >= t2)
        throw $.ioore(j);
      dst[j] = t3;
      ++i;
      ++j;
    }
  }
};

$.Arrays_copy$bailout = function(state0, src, srcStart, dst, dstStart, count) {
  var i, j, t1;
  if ($.JSNumber_methods.$lt(srcStart, dstStart)) {
    if (typeof count !== "number")
      throw $.iae(count);
    i = srcStart + count - 1;
    j = $.$sub$n($.$add$ns(dstStart, count), 1);
    t1 = $.getInterceptor$asx(src);
    for (; i >= srcStart; --i, j = $.$sub$n(j, 1))
      $.JSArray_methods.$indexSet(dst, j, t1.$index(src, i));
  } else {
    t1 = $.getInterceptor$asx(src);
    j = dstStart;
    i = srcStart;
    while (true) {
      if (typeof count !== "number")
        throw $.iae(count);
      if (!(i < srcStart + count))
        break;
      $.JSArray_methods.$indexSet(dst, j, t1.$index(src, i));
      ++i;
      j = $.$add$ns(j, 1);
    }
  }
};

$.Arrays_indexOf = function(a, element, startIndex, endIndex) {
  var i;
  if (startIndex !== (startIndex | 0))
    return $.Arrays_indexOf$bailout(1, a, element, startIndex, endIndex);
  if (startIndex >= a.length)
    return -1;
  if (startIndex < 0)
    startIndex = 0;
  for (i = startIndex; i < endIndex; ++i) {
    if (i < 0 || i >= a.length)
      throw $.ioore(i);
    if ($.$eq(a[i], element) === true)
      return i;
  }
  return -1;
};

$.Arrays_indexOf$bailout = function(state0, a, element, startIndex, endIndex) {
  var t1, i;
  t1 = $.getInterceptor$n(startIndex);
  if (t1.$ge(startIndex, a.length) === true)
    return -1;
  if (t1.$lt(startIndex, 0) === true)
    startIndex = 0;
  for (i = startIndex; $.$lt$n(i, endIndex) === true; ++i) {
    if (i !== (i | 0))
      throw $.iae(i);
    if (i < 0 || i >= a.length)
      throw $.ioore(i);
    if ($.$eq(a[i], element) === true)
      return i;
  }
  return -1;
};

$.ListIterator$ = function(iterable) {
  return new $.ListIterator(iterable, $.get$length$asx(iterable), 0, null);
};

$.MappedIterable$ = function(_iterable, _f, S, T) {
  var t1 = new $.MappedIterable(_iterable, _f);
  $.setRuntimeTypeInfo(t1, [S, T]);
  return t1;
};

$.MappedIterator$ = function(_iterator, _f) {
  return new $.MappedIterator(null, _iterator, _f);
};

$.MappedListIterable$ = function(_source, _f, S, T) {
  var t1 = new $.MappedListIterable(_source, _f);
  $.setRuntimeTypeInfo(t1, [S, T]);
  return t1;
};

$.WhereIterable$ = function(_iterable, _f, E) {
  var t1 = new $.WhereIterable(_iterable, _f);
  $.setRuntimeTypeInfo(t1, [E]);
  return t1;
};

$.WhereIterator$ = function(_iterator, _f) {
  return new $.WhereIterator(_iterator, _f);
};

$.ToString_collectionToString = function(c) {
  var result = $.StringBuffer$("");
  $.ToString__emitCollection(c, result, $.List_List($, null));
  return result.toString$0(result);
};

$.ToString__emitCollection = function(c, result, visiting) {
  var t1, isList, t2, first, t3;
  t1 = $.getInterceptor$ax(visiting);
  t1.add$1(visiting, c);
  isList = typeof c === "object" && c !== null && (c.constructor === Array || c.$isList());
  result.write$1(isList ? "[" : "{");
  for (t2 = $.get$iterator$ax(c), first = true; t2.moveNext$0(); first = false) {
    t3 = t2.get$current();
    if (!first)
      result.write$1(", ");
    $.ToString__emitObject(t3, result, visiting);
  }
  result.write$1(isList ? "]" : "}");
  t1.removeLast$0(visiting);
};

$.ToString__emitObject = function(o, result, visiting) {
  if (typeof o === "object" && o !== null && (o.constructor === Array || o.$isCollection()))
    if ($.ToString__containsRef(visiting, o))
      result.write$1(typeof o === "object" && o !== null && (o.constructor === Array || o.$isList()) ? "[...]" : "{...}");
    else
      $.ToString__emitCollection(o, result, visiting);
  else if (typeof o === "object" && o !== null && !!o.$isMap)
    if ($.ToString__containsRef(visiting, o))
      result.write$1("{...}");
    else
      $.ToString__emitMap(o, result, visiting);
  else
    result.write$1(o);
};

$.ToString__containsRef = function(c, ref) {
  var t1;
  for (t1 = $.get$iterator$ax(c); t1.moveNext$0();)
    if (t1.get$current() === ref)
      return true;
  return false;
};

$.ToString_mapToString = function(m) {
  var result = $.StringBuffer$("");
  $.ToString__emitMap(m, result, $.List_List($, null));
  return result.toString$0(result);
};

$.ToString__emitMap = function(m, result, visiting) {
  var t1, t2;
  t1 = {};
  t2 = $.getInterceptor$ax(visiting);
  t2.add$1(visiting, m);
  result.write$1("{");
  t1.first_0 = true;
  m.forEach$1(m, new $.ToString__emitMap_anon(t1, result, visiting));
  result.write$1("}");
  t2.removeLast$0(visiting);
};

$.HashMap__isNumericKey = function(key) {
  return typeof key === "number" && key === key;
};

$.HashMap__computeHashCode = function(key) {
  return $.get$hashCode$(key) | 0;
};

$.HashMap__hasTableEntry = function(table, key) {
  return table[key] != null;
};

$.HashMap__getTableEntry = function(table, key) {
  var entry = table[key];
  return entry === table ? null : entry;
};

$.HashMap__setTableEntry = function(table, key, value) {
  if (value == null)
    value = table;
  table[key] = value;
};

$.HashMap__findBucketIndex = function(bucket, key) {
  var $length, i;
  if (bucket == null)
    return -1;
  $length = bucket.length;
  for (i = 0; i < $length; i += 2)
    if ($.$eq(bucket[i], key) === true)
      return i;
  return -1;
};

$.HashMapKeyIterable$ = function(_map, E) {
  var t1 = new $.HashMapKeyIterable(_map);
  $.setRuntimeTypeInfo(t1, [E]);
  return t1;
};

$.HashMapKeyIterator$ = function(_map, _keys) {
  return new $.HashMapKeyIterator(_map, _keys, 0, null);
};

$.JsIsolateSink$fromPort = function(_port) {
  return new $.JsIsolateSink(false, _port);
};

$._callInIsolate = function(isolate, $function) {
  isolate.eval$1($function);
  $globalState.topEventLoop.run$0();
};

$._currentIsolate = function() {
  return $globalState.currentContext;
};

$.startRootIsolate = function(entry) {
  var t1, rootContext;
  t1 = $._Manager$();
  $._globalState0(t1);
  if ($globalState.isWorker === true)
    return;
  rootContext = $._IsolateContext$();
  $globalState.rootContext = rootContext;
  $globalState.currentContext = rootContext;
  rootContext.eval$1(entry);
  $globalState.topEventLoop.run$0();
};

$._globalState = function() {
  return $globalState;
};

$._globalState0 = function(val) {
  $globalState = val;
};

$._Manager$ = function() {
  var t1 = new $._Manager(0, 0, 1, null, null, null, null, null, null, null, null, null);
  t1._Manager$0();
  return t1;
};

$._IsolateContext$ = function() {
  var t1 = new $._IsolateContext(null, null, null);
  t1._IsolateContext$0();
  return t1;
};

$._EventLoop$ = function() {
  return new $._EventLoop($.Queue_Queue($._IsolateEvent), 0);
};

$._IsolateEvent$ = function(isolate, fn, message) {
  return new $._IsolateEvent(isolate, fn, message);
};

$._MainManagerStub$ = function() {
  return new $._MainManagerStub();
};

$.IsolateNatives_computeThisScript = function() {
  var currentScript, stack, matches;
  currentScript = $.$currentScript;
  if (currentScript != null)
    return String(currentScript.src);
  stack = new Error().stack;
  if (stack == null)
    stack = (function() {try { throw new Error() } catch(e) { return e.stack }})();
  matches = stack.match(new RegExp("^ *at [^(]*\\((.*):[0-9]*:[0-9]*\\)$", "m"));
  if (matches != null)
    return matches[1];
  matches = stack.match(new RegExp("^[^@]*@(.*):[0-9]*$", "m"));
  if (matches != null)
    return matches[1];
  throw $.$$throw($.UnsupportedError$("Cannot extract URI from \"" + $.S(stack) + "\""));
};

$.IsolateNatives_computeGlobalThis = function() {
  return function() { return this; }();
};

$.IsolateNatives__processWorkerMessage = function(sender, e) {
  var msg, t1, entryPoint, replyTo, context, t2;
  msg = $._deserializeMessage(e.data);
  t1 = $.getInterceptor$asx(msg);
  switch (t1.$index(msg, "command")) {
    case "start":
      $globalState.currentManagerId = t1.$index(msg, "id");
      entryPoint = $[t1.$index(msg, "functionName")];
      replyTo = $._deserializeMessage(t1.$index(msg, "replyTo"));
      context = $._IsolateContext$();
      $globalState.topEventLoop.enqueue$3(context, new $.IsolateNatives__processWorkerMessage_anon(entryPoint, replyTo), "worker-start");
      $globalState.currentContext = context;
      $globalState.topEventLoop.run$0();
      break;
    case "spawn-worker":
      $.IsolateNatives__spawnWorker(t1.$index(msg, "functionName"), t1.$index(msg, "uri"), t1.$index(msg, "replyPort"));
      break;
    case "message":
      if (t1.$index(msg, "port") != null)
        $.send$2$x(t1.$index(msg, "port"), t1.$index(msg, "msg"), t1.$index(msg, "replyTo"));
      $globalState.topEventLoop.run$0();
      break;
    case "close":
      $.IsolateNatives__log("Closing Worker");
      t1 = $globalState.managers;
      t2 = $.getInterceptor$x(sender);
      t1.remove$1(t1, t2.get$id(sender));
      t2.terminate$0(sender);
      $globalState.topEventLoop.run$0();
      break;
    case "log":
      $.IsolateNatives__log(t1.$index(msg, "msg"));
      break;
    case "print":
      if ($globalState.isWorker === true) {
        t1 = $globalState.mainManager;
        t1.postMessage$1(t1, $._serializeMessage($.makeLiteralMap(["command", "print", "msg", msg])));
      } else
        $.Primitives_printString($.toString$0(t1.$index(msg, "msg")));
      break;
    case "error":
      throw $.$$throw(t1.$index(msg, "msg"));
  }
};

$.IsolateNatives__log = function(msg) {
  var trace, t1, exception;
  if ($globalState.isWorker === true) {
    t1 = $globalState.mainManager;
    t1.postMessage$1(t1, $._serializeMessage($.makeLiteralMap(["command", "log", "msg", msg])));
  } else
    try {
      $.get$globalThis().console.log(msg);
    } catch (exception) {
      $.unwrapException(exception);
      trace = $.getTraceFromException(exception);
      throw $.$$throw($._ExceptionImplementation$(trace));
    }

};

$.IsolateNatives__startIsolate = function(topLevel, replyTo) {
  $.lazyPort = $.ReceivePortImpl$();
  $.send$2$x(replyTo, "spawned", $._Isolate_port().toSendPort$0());
  topLevel.call$0();
};

$.IsolateNatives__spawnWorker = function(functionName, uri, replyPort) {
  var worker, t1, t2, workerId;
  if (functionName == null)
    functionName = "main";
  if (uri == null)
    uri = $.get$IsolateNatives_thisScript();
  worker = new Worker(uri);
  t1 = $.getInterceptor$x(worker);
  t1.set$onmessage(worker, function(e) { $.IsolateNatives__processWorkerMessage.call$2(worker, e); });
  t2 = $globalState;
  workerId = t2.nextManagerId;
  t2.nextManagerId = workerId + 1;
  t1.set$id(worker, workerId);
  t2 = $globalState.managers;
  t2.$indexSet(t2, workerId, worker);
  t1.postMessage$1(worker, $._serializeMessage($.makeLiteralMap(["command", "start", "id", workerId, "replyTo", $._serializeMessage(replyPort), "functionName", functionName])));
};

$._NativeJsSendPort$ = function(_receivePort, isolateId) {
  return new $._NativeJsSendPort(_receivePort, isolateId);
};

$._WorkerSendPort$ = function(_workerId, isolateId, _receivePortId) {
  return new $._WorkerSendPort(_workerId, _receivePortId, isolateId);
};

$.ReceivePortImpl$ = function() {
  var t1 = $.ReceivePortImpl__nextFreeId;
  $.ReceivePortImpl__nextFreeId = $.$add$ns(t1, 1);
  t1 = new $.ReceivePortImpl(t1, null);
  t1.ReceivePortImpl$0();
  return t1;
};

$._waitForPendingPorts = function(message, callback) {
  var finder = $._PendingSendPortFinder$();
  finder.traverse$1(message);
  $._FutureImpl__FutureImpl$wait(finder.ports).then$1(new $._waitForPendingPorts_anon(callback));
};

$._PendingSendPortFinder$ = function() {
  var t1 = new $._PendingSendPortFinder([], $._MessageTraverserVisitedMap$());
  t1._PendingSendPortFinder$0();
  return t1;
};

$._serializeMessage = function(message) {
  if ($globalState.get$needSerialization() === true)
    return $._JsSerializer$().traverse$1(message);
  else
    return $._JsCopier$().traverse$1(message);
};

$._deserializeMessage = function(message) {
  if ($globalState.get$needSerialization() === true)
    return $._JsDeserializer$().deserialize$1(message);
  else
    return message;
};

$._JsSerializer$ = function() {
  var t1 = new $._JsSerializer(0, $._MessageTraverserVisitedMap$());
  t1._JsSerializer$0();
  return t1;
};

$._JsCopier$ = function() {
  var t1 = new $._JsCopier($._MessageTraverserVisitedMap$());
  t1._JsCopier$0();
  return t1;
};

$._JsDeserializer$ = function() {
  return new $._JsDeserializer(null);
};

$._JsVisitedMap$ = function() {
  return new $._JsVisitedMap(null);
};

$._MessageTraverserVisitedMap$ = function() {
  return new $._MessageTraverserVisitedMap();
};

$.TimerImpl$ = function(milliseconds, callback) {
  var t1 = new $.TimerImpl(true, false, null);
  t1.TimerImpl$2(milliseconds, callback);
  return t1;
};

$.hasTimer = function() {
  return $.get$globalThis().setTimeout != null;
};

$.checkMutable = function(list, reason) {
  if (!!(list.immutable$list))
    throw $.$$throw($.UnsupportedError$(reason));
};

$.checkGrowable = function(list, reason) {
  if (!!(list.fixed$length))
    throw $.$$throw($.UnsupportedError$(reason));
};

$.S = function(value) {
  var res;
  if (typeof value === "string")
    return value;
  if (typeof value === "number") {
    if (value !== 0)
      return "" + (value);
  } else if (true === value)
    return "true";
  else if (false === value)
    return "false";
  else if (value == null)
    return "null";
  res = $.toString$0(value);
  if (!(typeof res === "string"))
    throw $.$$throw($.ArgumentError$(value));
  return res;
};

$.Primitives_objectHashCode = function(object) {
  var hash = object.$identityHash;
  if (hash == null) {
    hash = $.$add$ns($.Primitives_hashCodeSeed, 1);
    $.Primitives_hashCodeSeed = hash;
    object.$identityHash = hash;
  }
  return hash;
};

$.Primitives_printString = function(string) {
  if (typeof dartPrint == "function") {
    dartPrint(string);
    return;
  }
  if (typeof window == "object") {
    if (typeof console == "object")
      console.log(string);
    return;
  }
  if (typeof print == "function") {
    print(string);
    return;
  }
  throw "Unable to print message: " + String(string);
};

$.Primitives_objectTypeName = function(object) {
  var $name, decompiled, t1;
  $name = $.constructorNameFallback(object);
  if ($.$eq($name, "Object") === true) {
    decompiled = String(object.constructor).match(/^\s*function\s*(\S*)\s*\(/)[1];
    if (typeof decompiled === "string")
      $name = decompiled;
  }
  t1 = $.getInterceptor$s($name);
  return t1.codeUnitAt$1($name, 0) === 36 ? t1.substring$1($name, 1) : $name;
};

$.Primitives_newFixedList = function($length) {
  var result = new Array($length);
  result.fixed$length = true;
  return result;
};

$.Primitives_dateNow = function() {
  return Date.now();
};

$.Primitives__fromCharCodeApply = function(array) {
  var end, t1, result, i, subarray, t2;
  end = array.length;
  for (t1 = end <= 500, result = "", i = 0; i < end; i += 500) {
    if (t1)
      subarray = array;
    else {
      t2 = i + 500;
      t2 = t2 < end ? t2 : end;
      subarray = array.slice(i, t2);
    }
    result = result + String.fromCharCode.apply(null, subarray);
  }
  return result;
};

$.Primitives_stringFromCodePoints = function(codePoints) {
  var a, t1, t2;
  a = [];
  for (t1 = $.JSArray_methods.get$iterator(codePoints); t1.moveNext$0();) {
    t2 = t1.get$current();
    if (!(typeof t2 === "number" && Math.floor(t2) === t2))
      throw $.$$throw($.ArgumentError$(t2));
    if (t2 <= 65535)
      a.push(t2);
    else if (t2 <= 1114111) {
      a.push(55296 + ($.JSNumber_methods.$shr(t2 - 65536, 10) & 1023));
      a.push(56320 + (t2 & 1023));
    } else
      throw $.$$throw($.ArgumentError$(t2));
  }
  return $.Primitives__fromCharCodeApply(a);
};

$.Primitives_stringFromCharCodes = function(charCodes) {
  var t1, t2;
  for (t1 = $.JSArray_methods.get$iterator(charCodes); t1.moveNext$0();) {
    t2 = t1.get$current();
    if (!(typeof t2 === "number" && Math.floor(t2) === t2))
      throw $.$$throw($.ArgumentError$(t2));
    if (t2 < 0)
      throw $.$$throw($.ArgumentError$(t2));
    if (t2 > 65535)
      return $.Primitives_stringFromCodePoints(charCodes);
  }
  return $.Primitives__fromCharCodeApply(charCodes);
};

$.Primitives_lazyAsJsDate = function(receiver) {
  if (receiver.date === (void 0))
    receiver.date = new Date(receiver.millisecondsSinceEpoch);
  return receiver.date;
};

$.Primitives_getYear = function(receiver) {
  return receiver.isUtc === true ? ($.Primitives_lazyAsJsDate(receiver).getUTCFullYear() + 0) : ($.Primitives_lazyAsJsDate(receiver).getFullYear() + 0);
};

$.Primitives_getMonth = function(receiver) {
  return receiver.isUtc === true ? $.Primitives_lazyAsJsDate(receiver).getUTCMonth() + 1 : $.Primitives_lazyAsJsDate(receiver).getMonth() + 1;
};

$.Primitives_getDay = function(receiver) {
  return receiver.isUtc === true ? ($.Primitives_lazyAsJsDate(receiver).getUTCDate() + 0) : ($.Primitives_lazyAsJsDate(receiver).getDate() + 0);
};

$.Primitives_getHours = function(receiver) {
  return receiver.isUtc === true ? ($.Primitives_lazyAsJsDate(receiver).getUTCHours() + 0) : ($.Primitives_lazyAsJsDate(receiver).getHours() + 0);
};

$.Primitives_getMinutes = function(receiver) {
  return receiver.isUtc === true ? ($.Primitives_lazyAsJsDate(receiver).getUTCMinutes() + 0) : ($.Primitives_lazyAsJsDate(receiver).getMinutes() + 0);
};

$.Primitives_getSeconds = function(receiver) {
  return receiver.isUtc === true ? ($.Primitives_lazyAsJsDate(receiver).getUTCSeconds() + 0) : ($.Primitives_lazyAsJsDate(receiver).getSeconds() + 0);
};

$.Primitives_getMilliseconds = function(receiver) {
  return receiver.isUtc === true ? ($.Primitives_lazyAsJsDate(receiver).getUTCMilliseconds() + 0) : ($.Primitives_lazyAsJsDate(receiver).getMilliseconds() + 0);
};

$.iae = function(argument) {
  throw $.$$throw($.ArgumentError$(argument));
};

$.ioore = function(index) {
  throw $.$$throw($.RangeError$value(index));
};

$.checkNull = function(object) {
  if (object == null)
    throw $.$$throw($.ArgumentError$(null));
  return object;
};

$.checkNum = function(value) {
  if (!(typeof value === "number"))
    throw $.$$throw($.ArgumentError$(value));
  return value;
};

$.checkString = function(value) {
  if (!(typeof value === "string"))
    throw $.$$throw($.ArgumentError$(value));
  return value;
};

$.$$throw = function(ex) {
  var wrapper;
  if (ex == null)
    ex = $.C_NullThrownError;
  wrapper = $.DartError$(ex);
  if (!!Error.captureStackTrace)
    Error.captureStackTrace(wrapper, $.$$throw);
  else
    wrapper.stack = new Error().stack;
  return wrapper;
};

$.DartError$ = function(dartException) {
  var t1 = new $.DartError();
  t1.DartError$1(dartException);
  return t1;
};

$.DartError_toStringWrapper = function() {
  return $.toString$0(this);
};

$.unwrapException = function(ex) {
  var message, type, $name, t1, ieErrorCode, ieFacilityNumber, t2;
  if ("dartException" in ex)
    return ex.dartException;
  message = ex.message;
  if (ex instanceof TypeError) {
    type = ex.type;
    $name = ex.arguments ? ex.arguments[0] : "";
    if (message.indexOf("JSNull") === -1) {
      t1 = $.getInterceptor(type);
      t1 = t1.$eq(type, "property_not_function") === true || t1.$eq(type, "called_non_callable") === true || t1.$eq(type, "non_object_property_call") === true || t1.$eq(type, "non_object_property_load") === true;
    } else
      t1 = true;
    if (t1)
      return $.NoSuchMethodError$(null, $name, [], $.makeLiteralMap([]), null);
    else if ($.$eq(type, "undefined_method") === true)
      return $.NoSuchMethodError$("", $name, [], $.makeLiteralMap([]), null);
    ieErrorCode = ex.number & 0xffff;
    ieFacilityNumber = ex.number>>16 & 0x1FFF;
    t1 = typeof message === "string";
    if (t1)
      if (message === "null has no properties" || message === "'null' is not an object" || message === "'undefined' is not an object" || $.JSString_methods.endsWith$1(message, "is null") || $.JSString_methods.endsWith$1(message, "is undefined") || $.JSString_methods.endsWith$1(message, "is null or undefined") || $.JSString_methods.endsWith$1(message, "of undefined") || $.JSString_methods.endsWith$1(message, "of null"))
        return $.NoSuchMethodError$(null, "<unknown>", [], $.makeLiteralMap([]), null);
      else {
        if (message.indexOf(" has no method ") === -1)
          if (message.indexOf(" is not a function") === -1)
            t2 = ieErrorCode === 438 && ieFacilityNumber === 10;
          else
            t2 = true;
        else
          t2 = true;
        if (t2)
          return $.NoSuchMethodError$("", "<unknown>", [], $.makeLiteralMap([]), null);
      }
    t1 = t1 ? message : "";
    return $._ExceptionImplementation$(t1);
  }
  if (ex instanceof RangeError) {
    if (typeof message === "string" && message.indexOf("call stack") !== -1)
      return $.StackOverflowError$();
    return $.ArgumentError$(null);
  }
  if (typeof InternalError == "function" && ex instanceof InternalError)
    if (typeof message === "string" && message === "too much recursion")
      return $.StackOverflowError$();
  return ex;
};

$.getTraceFromException = function(exception) {
  return $.StackTrace$(exception.stack);
};

$.StackTrace$ = function(stack) {
  return new $.StackTrace(stack);
};

$.makeLiteralMap = function(keyValuePairs) {
  var iterator, result, key;
  iterator = $.JSArray_methods.get$iterator(keyValuePairs);
  result = $.LinkedHashMap$(null, null);
  for (; iterator.moveNext$0();) {
    key = iterator.get$current();
    iterator.moveNext$0();
    result.$indexSet(result, key, iterator.get$current());
  }
  return result;
};

$.invokeClosure = function(closure, isolate, numberOfArguments, arg1, arg2) {
  var t1 = $.getInterceptor(numberOfArguments);
  if (t1.$eq(numberOfArguments, 0) === true)
    return $._callInIsolate(isolate, new $.invokeClosure_anon(closure));
  else if (t1.$eq(numberOfArguments, 1) === true)
    return $._callInIsolate(isolate, new $.invokeClosure_anon0(closure, arg1));
  else if (t1.$eq(numberOfArguments, 2) === true)
    return $._callInIsolate(isolate, new $.invokeClosure_anon1(closure, arg1, arg2));
  else
    throw $.$$throw($._ExceptionImplementation$("Unsupported number of arguments for wrapped closure"));
};

$.convertDartClosureToJS = function(closure, arity) {
  var $function;
  if (closure == null)
    return;
  $function = closure.$identity;
  if (!!$function)
    return $function;
  $function = (function ($2, $3) { return function($0, $1) { return $3(closure, $2, arity, $0, $1) }})($._currentIsolate(), $.invokeClosure.call$5);
  closure.$identity = $function;
  return $function;
};

$.propertyTypeCastError = function(value, property) {
  var t1 = $.getInterceptor$asx(property);
  throw $.$$throw($.CastErrorImplementation$($.Primitives_objectTypeName(value), t1.substring$2(property, 3, t1.get$length(property))));
};

$.propertyTypeCast = function(value, property) {
  if (value == null || !!value[property])
    return value;
  $.propertyTypeCastError(value, property);
};

$.listTypeCast = function(value) {
  if (typeof value === "object" && value !== null && (value.constructor === Array || value.$isList()) || value == null)
    return value;
  throw $.$$throw($.CastErrorImplementation$($.Primitives_objectTypeName(value), "List"));
};

$.CastErrorImplementation$ = function(actualType, expectedType) {
  return new $.CastErrorImplementation("CastError: Casting value of type " + $.S(actualType) + " to incompatible type " + expectedType);
};

$.throwCyclicInit = function(staticName) {
  throw $.$$throw($.RuntimeError$("Cyclic initialization for static " + $.S(staticName)));
};

$.setRuntimeTypeInfo = function(target, typeInfo) {
  target.$builtinTypeInfo = typeInfo;
};

$.getRuntimeTypeInfo = function(target) {
  return target.$builtinTypeInfo;
};

$.getRuntimeTypeArgument = function(target, substitution, index) {
  var $arguments = $.substitute(substitution, $.getRuntimeTypeInfo(target));
  return $arguments == null ? null : $arguments[index];
};

$.substitute = function(substitution, $arguments) {
  if (substitution != null && (substitution.constructor === Array))
    $arguments = substitution;
  else if (typeof substitution == "function")
    $arguments = substitution.apply(null, $arguments);
  return $arguments;
};

$._convertJsonToDart = function(json, reviver) {
  var revive = reviver == null ? new $._convertJsonToDart_anon() : reviver;
  return revive.call$2("", new $._convertJsonToDart_walk(revive).call$1(json));
};

$.typeNameInChrome = function(obj) {
  return $.typeNameInWebKitCommon(obj.constructor.name);
};

$.typeNameInSafari = function(obj) {
  return $.typeNameInWebKitCommon($.constructorNameFallback(obj));
};

$.typeNameInWebKitCommon = function(tag) {
  var $name = tag;
  if ($name === "Window")
    return "DOMWindow";
  if ($name === "CanvasPixelArray")
    return "Uint8ClampedArray";
  if ($name === "WebKitMutationObserver")
    return "MutationObserver";
  if ($name === "AudioChannelMerger")
    return "ChannelMergerNode";
  if ($name === "AudioChannelSplitter")
    return "ChannelSplitterNode";
  if ($name === "AudioGainNode")
    return "GainNode";
  if ($name === "AudioPannerNode")
    return "PannerNode";
  if ($name === "JavaScriptAudioNode")
    return "ScriptProcessorNode";
  if ($name === "Oscillator")
    return "OscillatorNode";
  if ($name === "RealtimeAnalyserNode")
    return "AnalyserNode";
  if ($name === "IDBVersionChangeRequest")
    return "IDBOpenDBRequest";
  return $name;
};

$.typeNameInOpera = function(obj) {
  var $name = $.constructorNameFallback(obj);
  if ($name === "Window")
    return "DOMWindow";
  if ($name === "ApplicationCache")
    return "DOMApplicationCache";
  return $name;
};

$.typeNameInFirefox = function(obj) {
  var $name = $.constructorNameFallback(obj);
  if ($name === "Window")
    return "DOMWindow";
  if ($name === "CSS2Properties")
    return "CSSStyleDeclaration";
  if ($name === "DataTransfer")
    return "Clipboard";
  if ($name === "DragEvent")
    return "MouseEvent";
  if ($name === "GeoGeolocation")
    return "Geolocation";
  if ($name === "MouseScrollEvent")
    return "WheelEvent";
  if ($name === "OfflineResourceList")
    return "DOMApplicationCache";
  if ($name === "WorkerMessageEvent")
    return "MessageEvent";
  if ($name === "XMLDocument")
    return "Document";
  return $name;
};

$.typeNameInIE = function(obj) {
  var $name = $.constructorNameFallback(obj);
  if ($name === "Window")
    return "DOMWindow";
  if ($name === "Document") {
    if (!!obj.xmlVersion)
      return "Document";
    return "HTMLDocument";
  }
  if ($name === "ApplicationCache")
    return "DOMApplicationCache";
  if ($name === "CanvasPixelArray")
    return "Uint8ClampedArray";
  if ($name === "DataTransfer")
    return "Clipboard";
  if ($name === "DragEvent")
    return "MouseEvent";
  if ($name === "HTMLDDElement")
    return "HTMLElement";
  if ($name === "HTMLDTElement")
    return "HTMLElement";
  if ($name === "HTMLTableDataCellElement")
    return "HTMLTableCellElement";
  if ($name === "HTMLTableHeaderCellElement")
    return "HTMLTableCellElement";
  if ($name === "HTMLPhraseElement")
    return "HTMLElement";
  if ($name === "MSStyleCSSProperties")
    return "CSSStyleDeclaration";
  if ($name === "MouseWheelEvent")
    return "WheelEvent";
  if ($name === "Position")
    return "Geoposition";
  if ($name === "Object")
    if (window.DataView && (obj instanceof window.DataView))
      return "DataView";
  return $name;
};

$.constructorNameFallback = function(object) {
  var $constructor, $name, t1, string;
  if (object == null)
    return "Null";
  $constructor = object.constructor;
  if (typeof($constructor) === "function") {
    $name = $constructor.name;
    if (typeof $name === "string")
      t1 = $name !== "" && $name !== "Object" && $name !== "Function.prototype";
    else
      t1 = false;
    if (t1)
      return $name;
  }
  string = Object.prototype.toString.call(object);
  return string.substring(8, string.length - 1);
};

$.alternateTag = function(object, tag) {
  if (!!/^HTML[A-Z].*Element$/.test(tag)) {
    if (Object.prototype.toString.call(object) === "[object Object]")
      return;
    return "HTMLElement";
  }
  return;
};

$.callHasOwnProperty = function($function, object, property) {
  return $function.call(object, property);
};

$.getFunctionForTypeNameOf = function() {
  if (typeof(navigator) !== "object")
    return $.typeNameInChrome;
  var userAgent = navigator.userAgent;
  if (userAgent.indexOf("Chrome") !== -1 || userAgent.indexOf("DumpRenderTree") !== -1)
    return $.typeNameInChrome;
  else if (userAgent.indexOf("Firefox") !== -1)
    return $.typeNameInFirefox;
  else if (userAgent.indexOf("MSIE") !== -1)
    return $.typeNameInIE;
  else if (userAgent.indexOf("Opera") !== -1)
    return $.typeNameInOpera;
  else if (userAgent.indexOf("AppleWebKit") !== -1)
    return $.typeNameInSafari;
  else
    return $.constructorNameFallback;
};

$.getTypeNameOf = function(obj) {
  if ($._getTypeNameOf == null)
    $._getTypeNameOf = $.getFunctionForTypeNameOf();
  return $._getTypeNameOf.call$1(obj);
};

$.toStringForNativeObject = function(obj) {
  return "Instance of " + $.getTypeNameOf(obj);
};

$.hashCodeForNativeObject = function(object) {
  return $.Primitives_objectHashCode(object);
};

$.defineProperty = function(obj, property, value) {
  Object.defineProperty(obj, property, {value: value, enumerable: false, writable: true, configurable: true});
};

$.dynamicBind = function(obj, $name, methods, $arguments) {
  var hasOwnPropertyFunction, tag, method, secondTag, proto;
  hasOwnPropertyFunction = Object.prototype.hasOwnProperty;
  if (!$.isDartObject(obj)) {
    tag = $.getTypeNameOf(obj);
    method = $.dynamicBindLookup(hasOwnPropertyFunction, tag, methods);
    if (method == null) {
      secondTag = $.alternateTag(obj, tag);
      if (secondTag != null)
        method = $.dynamicBindLookup(hasOwnPropertyFunction, secondTag, methods);
    }
  } else
    method = null;
  if (method == null)
    method = $.lookupDynamicClass(hasOwnPropertyFunction, methods, $.getTypeNameOf($.C_Object));
  if (method == null)
    (function(){throw new TypeError($name + " is not a function");})();
  else {
    proto = Object.getPrototypeOf(obj);
    if (!$.callHasOwnProperty(hasOwnPropertyFunction, proto, $name))
      $.defineProperty(proto, $name, method);
  }
  return method.apply(obj, $arguments);
};

$.isDartObject = function(obj) {
  return ((obj) instanceof ($.Object0));
};

$.dynamicBindLookup = function(hasOwnPropertyFunction, tag, methods) {
  var method, i, entry;
  method = $.lookupDynamicClass(hasOwnPropertyFunction, methods, tag);
  if (method == null && $._dynamicMetadata0() != null)
    for (i = 0; i < $._dynamicMetadata0().length; ++i) {
      entry = $._dynamicMetadata0()[i];
      if ($.callHasOwnProperty(hasOwnPropertyFunction, entry.get$_set(), tag)) {
        method = $.lookupDynamicClass(hasOwnPropertyFunction, methods, entry.get$_tag());
        if (method != null)
          break;
      }
    }
  return method;
};

$.lookupDynamicClass = function(hasOwnPropertyFunction, methods, className) {
  return $.callHasOwnProperty(hasOwnPropertyFunction, methods, className) ? methods[className] : null;
};

$.dynamicFunction = function($name) {
  var f, methods, dartMethod, bind;
  f = Object.prototype[$name];
  if (f != null && !!f.methods)
    return f.methods;
  methods = {};
  dartMethod = Object.getPrototypeOf($.C_Object)[$name];
  if (dartMethod != null)
    methods["Object"] = dartMethod;
  bind = function() {return $.dynamicBind.call$4(this, $name, methods, Array.prototype.slice.call(arguments));};
  bind.methods = methods;
  $.defineProperty(Object.prototype, $name, bind);
  return methods;
};

$.MetaInfo$ = function(_tag, _tags, _set) {
  return new $.MetaInfo(_tag, _tags, _set);
};

$._dynamicMetadata0 = function() {
  if (typeof($dynamicMetadata) === "undefined")
    $._dynamicMetadata([]);
  return $dynamicMetadata;
};

$._dynamicMetadata = function(table) {
  $dynamicMetadata = table;
};

$.buildDynamicMetadata = function(inputTable) {
  var result, i, tag, tags, set, tagNames, j;
  result = [];
  for (i = 0; i < inputTable.length; ++i) {
    tag = inputTable[i][0];
    tags = inputTable[i][1];
    set = {};
    tagNames = tags.split("|");
    for (j = 0; j < tagNames.length; ++j)
      set[tagNames[j]] = true;
    result.push($.MetaInfo$(tag, tags, set));
  }
  return result;
};

$.dynamicSetMetadata = function(inputTable) {
  var t1 = $.buildDynamicMetadata(inputTable);
  $._dynamicMetadata(t1);
};

$.JSSyntaxRegExp$ = function(pattern, caseSensitive, multiLine) {
  return new $.JSSyntaxRegExp(pattern, multiLine, caseSensitive, $.JSSyntaxRegExp_makeNative(pattern, multiLine, caseSensitive, false));
};

$.JSSyntaxRegExp$_globalVersionOf = function(other) {
  var t1, t2, t3;
  t1 = other.get$pattern(other);
  t2 = other.get$isMultiLine();
  t3 = other.get$isCaseSensitive();
  return new $.JSSyntaxRegExp(t1, t2, t3, $.JSSyntaxRegExp_makeNative(t1, t2, t3, true));
};

$.JSSyntaxRegExp_makeNative = function(pattern, multiLine, caseSensitive, global) {
  var m, i, g, regexp, errorMessage;
  $.checkString(pattern);
  m = multiLine === true ? "m" : "";
  i = caseSensitive === true ? "" : "i";
  g = global ? "g" : "";
  regexp = (function() {try {return new RegExp(pattern, m + i + g);} catch (e) {return e;}})();
  if (regexp instanceof RegExp)
    return regexp;
  errorMessage = String(regexp);
  throw $.$$throw($.FormatException$("Illegal RegExp pattern: " + $.S(pattern) + ", " + errorMessage));
};

$._MatchImplementation$ = function(pattern, str, start, end, _groups) {
  return new $._MatchImplementation(pattern, str, start, end, _groups);
};

$._AllMatchesIterable$ = function(_re, _str) {
  return new $._AllMatchesIterable(_re, _str);
};

$._AllMatchesIterator$ = function(re, _str) {
  return new $._AllMatchesIterator($.JSSyntaxRegExp$_globalVersionOf(re), _str, null);
};

$.StringMatch$ = function(start, str, pattern) {
  return new $.StringMatch(start, str, pattern);
};

$.allMatchesInStringUnchecked = function(needle, haystack) {
  var result, $length, patternLength, startIndex, position, endIndex;
  result = $.List_List($, $.Match);
  $.setRuntimeTypeInfo(result, [$.Match]);
  $length = haystack.length;
  patternLength = needle.length;
  for (startIndex = 0; true;) {
    position = $.JSString_methods.indexOf$2(haystack, needle, startIndex);
    if (position === -1)
      break;
    result.push($.StringMatch$(position, haystack, needle));
    endIndex = position + patternLength;
    if (endIndex === $length)
      break;
    else
      startIndex = position === endIndex ? startIndex + 1 : endIndex;
  }
  return result;
};

$.stringContainsUnchecked = function(receiver, other, startIndex) {
  if (typeof other === "string")
    return $.JSString_methods.indexOf$2(receiver, other, startIndex) !== -1;
  else if (typeof other === "object" && other !== null && !!other.$isJSSyntaxRegExp)
    return other.hasMatch$1($.JSString_methods.substring$1(receiver, startIndex));
  else
    return $.get$iterator$ax($.allMatches$1$s(other, $.JSString_methods.substring$1(receiver, startIndex))).moveNext$0();
};

$.stringReplaceJS = function(receiver, replacer, to) {
  return receiver.replace(replacer, to.replace("$", "$$$$"));
};

$.stringReplaceAllUnchecked = function(receiver, from, to) {
  var result, $length, i;
  $.checkString(to);
  if (from === "")
    if (receiver === "")
      return to;
    else {
      result = $.StringBuffer$("");
      $length = receiver.length;
      result.write$1(to);
      for (i = 0; i < $length; ++i) {
        result.write$1(receiver[i]);
        result.write$1(to);
      }
      return result.toString$0(result);
    }
  else
    return $.stringReplaceJS(receiver, new RegExp(from.replace(new RegExp("[-[\\]{}()*+?.,\\\\^$|#\\s]", 'g'), "\\$&"), 'g'), to);
};

$.AsyncError$ = function(error, stackTrace) {
  return new $.AsyncError(error, stackTrace, null);
};

$.AsyncError$withCause = function(error, stackTrace, cause) {
  return new $.AsyncError(error, stackTrace, cause);
};

$.Future_Future$of = function($function) {
  var result, error, stackTrace, t1, exception;
  try {
    result = $function.call$0();
    t1 = $._FutureImpl$();
    t1._setOrChainValue$1(result);
    return t1;
  } catch (exception) {
    t1 = $.unwrapException(exception);
    error = t1;
    stackTrace = $.getTraceFromException(exception);
    return $._FutureImpl$immediateError(error, stackTrace);
  }

};

$._CompleterImpl$ = function() {
  return new $._CompleterImpl($._FutureImpl$(), false);
};

$._FutureListenerWrapper$ = function(future) {
  return new $._FutureListenerWrapper(future, null);
};

$._FutureImpl$ = function() {
  return new $._FutureImpl(0, null);
};

$._FutureImpl$immediate = function(value) {
  var t1 = new $._FutureImpl(0, null);
  t1._FutureImpl$immediate$1(value);
  return t1;
};

$._FutureImpl$immediateError = function(error, stackTrace) {
  var t1 = new $._FutureImpl(0, null);
  t1._FutureImpl$immediateError$2(error, stackTrace);
  return t1;
};

$._FutureImpl__FutureImpl$wait = function(futures) {
  var t1, t2, t3, t4, pos;
  t1 = {};
  t1.completer_0 = null;
  t1.values_1 = null;
  t2 = new $._FutureImpl__FutureImpl$wait_handleError(t1);
  t1.remaining_2 = 0;
  for (t3 = $.get$iterator$ax(futures); t3.moveNext$0();) {
    t4 = t3.get$current();
    pos = t1.remaining_2;
    t1.remaining_2 = $.$add$ns(pos, 1);
    t4.catchError$1(t2).then$1(new $._FutureImpl__FutureImpl$wait_anon(t1, pos));
  }
  if ($.$eq(t1.remaining_2, 0) === true)
    return $._FutureImpl$immediate($.List_empty);
  t1.values_1 = $.List_List(t1.remaining_2, null);
  t1.completer_0 = $._CompleterImpl$();
  return t1.completer_0.future;
};

$._ThenFuture$ = function(_onValue) {
  return new $._ThenFuture(_onValue, null, 0, null);
};

$._CatchErrorFuture$ = function(_onError, _test) {
  return new $._CatchErrorFuture(_test, _onError, null, 0, null);
};

$._SubscribeFuture$ = function(onValue, _onError) {
  return new $._SubscribeFuture(_onError, onValue, null, 0, null);
};

$._WhenFuture$ = function(_action) {
  return new $._WhenFuture(_action, null, 0, null);
};

$._FutureWrapper$ = function(_future) {
  return new $._FutureWrapper(_future);
};

$.StreamController$ = function(onPauseStateChange, onSubscriptionStateChange, T) {
  var t1 = new $.StreamController($._SingleControllerStream$(onSubscriptionStateChange, onPauseStateChange, T));
  $.setRuntimeTypeInfo(t1, [T]);
  return t1;
};

$._SingleControllerStream$ = function(_subscriptionHandler, _pauseHandler, T) {
  var t1 = new $._SingleControllerStream(_subscriptionHandler, _pauseHandler, null, 0, null);
  $.setRuntimeTypeInfo(t1, [T]);
  t1._SingleStreamImpl$0(T);
  return t1;
};

$._StreamSubscriptionImpl$ = function(source, _onData, _onError, _onDone, _unsubscribeOnError) {
  var t1 = new $._StreamSubscriptionImpl(_unsubscribeOnError, _onData, _onError, _onDone, source, 0, null, null);
  t1._InternalLink$0();
  return t1;
};

$._nullDataHandler = function(value) {
};

$._nullErrorHandler = function(error) {
  error.throwDelayed$0();
};

$._nullDoneHandler = function() {
};

$._DelayedData$ = function(value) {
  return new $._DelayedData(value, null);
};

$._DelayedError$ = function(error) {
  return new $._DelayedError(error, null);
};

$._DelayedDone$ = function() {
  return new $._DelayedDone();
};

$._InternalLink_unlink = function(element) {
  var next, previous;
  next = element.get$_nextLink();
  previous = element.get$_previousLink();
  next.set$_previousLink(previous);
  previous.set$_nextLink(next);
  element.set$_previousLink(element);
  element.set$_nextLink(element);
};

$._InternalLinkList_add = function(list, element) {
  var listEnd;
  if (element !== element._nextLink)
    $._InternalLink_unlink(element);
  listEnd = list._previousLink;
  listEnd.set$_nextLink(element);
  list._previousLink = element;
  element._previousLink = listEnd;
  element._nextLink = list;
};

$._InternalLinkList_isEmpty = function(list) {
  return list === list._nextLink;
};

$._StreamImplEvents$ = function() {
  return new $._StreamImplEvents(null, null, null);
};

$._DoneSubscription$ = function(_handler) {
  var t1 = new $._DoneSubscription(_handler, null, 0);
  t1._DoneSubscription$1(_handler);
  return t1;
};

$._SingleStreamMultiplexer$ = function(_source, T) {
  var t1 = new $._SingleStreamMultiplexer(_source, null, null, null, 0, null);
  $.setRuntimeTypeInfo(t1, [T]);
  t1._MultiStreamImpl$0(T);
  return t1;
};

$._runUserCode = function(userCode, onSuccess, onError, cause) {
  var result, e, e0, s, exception, t1;
  result = null;
  try {
    result = userCode.call$0();
  } catch (exception) {
    t1 = $.unwrapException(exception);
    if (typeof t1 === "object" && t1 !== null && !!t1.$isAsyncError) {
      e = t1;
      return onError.call$1(e);
    } else {
      e0 = t1;
      s = $.getTraceFromException(exception);
      if (cause == null)
        onError.call$1($.AsyncError$(e0, s));
      else
        onError.call$1($.AsyncError$withCause(e0, s, cause));
    }
  }

  onSuccess.call$1(result);
};

$._cancelAndError = function(subscription, future) {
  return new $._cancelAndError_anon(subscription, future);
};

$.Timer_Timer = function(duration, callback) {
  var milliseconds = duration.get$inMilliseconds();
  if (milliseconds < 0)
    milliseconds = 0;
  return $.TimerImpl$(milliseconds, callback);
};

$.Timer_run = function(callback) {
  $.add$1$ax($.get$Timer__runCallbacks(), callback);
  if ($.$eq($.get$length$asx($.get$Timer__runCallbacks()), 1) === true)
    $.Timer_Timer($.Duration_0, new $.Timer_run_anon());
};

$.IterableMixinWorkaround_contains = function(iterable, element) {
  var t1, t2;
  for (t1 = $.get$iterator$ax(iterable), t2 = $.getInterceptor(element); t1.moveNext$0();)
    if (t2.$eq(element, t1.get$current()) === true)
      return true;
  return false;
};

$.IterableMixinWorkaround_removeAllList = function(collection, elementsToRemove) {
  $.JSArray_methods.removeWhere$1(collection, $.get$contains$asx(elementsToRemove));
};

$.IterableMixinWorkaround_removeWhereList = function(list, test) {
  var retained, $length, i, element, t1, t2;
  if (typeof list !== "object" || list === null || (list.constructor !== Array || !!list.immutable$list) && !list.$isJavaScriptIndexingBehavior())
    return $.IterableMixinWorkaround_removeWhereList$bailout(1, list, test);
  retained = [];
  $length = list.length;
  for (i = 0; i < $length; ++i) {
    if (i >= list.length)
      throw $.ioore(i);
    element = list[i];
    if (test.call$1(element) !== true)
      retained.push(element);
    if ($length !== list.length)
      throw $.$$throw($.ConcurrentModificationError$(list));
  }
  t1 = retained.length;
  if (t1 === $length)
    return;
  $.JSArray_methods.set$length(list, t1);
  for (t1 = list.length, i = 0; i < retained.length; ++i) {
    t2 = retained[i];
    if (i >= t1)
      throw $.ioore(i);
    list[i] = t2;
  }
};

$.IterableMixinWorkaround_removeWhereList$bailout = function(state0, list, test) {
  var retained, $length, i, element, t1;
  retained = [];
  $length = list.length;
  for (i = 0; i < $length; ++i) {
    if (i >= list.length)
      throw $.ioore(i);
    element = list[i];
    if (test.call$1(element) !== true)
      retained.push(element);
    if ($length !== list.length)
      throw $.$$throw($.ConcurrentModificationError$(list));
  }
  t1 = retained.length;
  if (t1 === $length)
    return;
  $.JSArray_methods.set$length(list, t1);
  for (i = 0; i < retained.length; ++i)
    $.JSArray_methods.$indexSet(list, i, retained[i]);
};

$.IterableMixinWorkaround_setRangeList = function(list, start, $length, from, startFrom) {
  var t1 = $.getInterceptor($length);
  if (t1.$eq($length, 0) === true)
    return;
  if (t1.$lt($length, 0) === true)
    throw $.$$throw($.ArgumentError$($length));
  t1 = $.getInterceptor$n(start);
  if (t1.$lt(start, 0) === true)
    throw $.$$throw($.RangeError$value(start));
  if ($.$gt$n(t1.$add(start, $length), list.length) === true)
    throw $.$$throw($.RangeError$value(t1.$add(start, $length)));
  $.Arrays_copy(from, startFrom, list, start, $length);
};

$.HashMap$ = function() {
  return new $.HashMap(0, null, null, null, null);
};

$.HashSet$ = function(E) {
  var t1 = new $.HashSet($._HashTable$(8));
  $.setRuntimeTypeInfo(t1, [E]);
  t1.HashSet$0(E);
  return t1;
};

$._HashTable$ = function(initialCapacity) {
  var t1 = new $._HashTable(null, initialCapacity, 0, 0, 0, null);
  t1._HashTable$1(initialCapacity);
  return t1;
};

$._HashTableKeyIterator$ = function(hashTable) {
  return new $._HashTableKeyIterator(hashTable, hashTable._modificationCount, 0, null);
};

$._LinkedHashMapTable$ = function() {
  var t1 = new $._LinkedHashMapTable(null, 8, 0, 0, 0, null);
  t1._HashTable$1(8);
  return t1;
};

$.LinkedHashMap$ = function(K, V) {
  var t1 = new $.LinkedHashMap($._LinkedHashMapTable$());
  $.setRuntimeTypeInfo(t1, [K, V]);
  t1.LinkedHashMap$0(K, V);
  return t1;
};

$._LinkedHashTableKeyIterable$ = function(_table, K) {
  var t1 = new $._LinkedHashTableKeyIterable(_table);
  $.setRuntimeTypeInfo(t1, [K]);
  return t1;
};

$._LinkedHashTableKeyIterator$ = function(hashTable) {
  return new $._LinkedHashTableKeyIterator(hashTable, hashTable._modificationCount, hashTable._next$1(0), null);
};

$._LinkedHashTableValueIterable$ = function(_hashTable, _valueIndex, V) {
  var t1 = new $._LinkedHashTableValueIterable(_hashTable, _valueIndex);
  $.setRuntimeTypeInfo(t1, [V]);
  return t1;
};

$._LinkedHashTableValueIterator$ = function(hashTable, _valueIndex) {
  return new $._LinkedHashTableValueIterator(_valueIndex, hashTable, hashTable._modificationCount, hashTable._next$1(0), null);
};

$.Queue_Queue = function(E) {
  return $.ListQueue$(null, E);
};

$.ListQueue$ = function(initialCapacity, E) {
  var t1 = new $.ListQueue(null, 0, 0, 0);
  $.setRuntimeTypeInfo(t1, [E]);
  t1.ListQueue$1(initialCapacity, E);
  return t1;
};

$.ListQueue__isPowerOf2 = function(number) {
  return $.JSNull_methods.$and(number, $.JSNull_methods.$sub(number, 1)) === 0;
};

$.ListQueue__nextPowerOf2 = function(number) {
  var nextNumber;
  number = $.$shl$n(number, 2) - 1;
  for (; true; number = nextNumber) {
    nextNumber = (number & number - 1) >>> 0;
    if (nextNumber === 0)
      return number;
  }
};

$._ListQueueIterator$ = function(queue) {
  return new $._ListQueueIterator(queue, queue._tail, queue._modificationCount, queue._head, null);
};

$.DateTime_DateTime$now = function() {
  return $.DateTime$_now();
};

$.DateTime$fromMillisecondsSinceEpoch = function(millisecondsSinceEpoch, isUtc) {
  var t1 = new $.DateTime(millisecondsSinceEpoch, isUtc);
  t1.DateTime$fromMillisecondsSinceEpoch$2$isUtc(millisecondsSinceEpoch, isUtc);
  return t1;
};

$.DateTime$_now = function() {
  var t1 = new $.DateTime($.Primitives_dateNow(), false);
  t1.DateTime$_now$0();
  return t1;
};

$.Duration$ = function(days, hours, microseconds, milliseconds, minutes, seconds) {
  if (typeof microseconds !== "number")
    throw $.iae(microseconds);
  return new $.Duration(days * 86400000000 + hours * 3600000000 + minutes * 60000000 + seconds * 1000000 + milliseconds * 1000 + microseconds);
};

$.Error_safeToString = function(object) {
  if (typeof object === "number" && Math.floor(object) === object || typeof object === "number" || typeof object === "boolean" || null == object)
    return $.toString$0(object);
  if (typeof object === "string")
    return "\"" + $.JSString_methods.replaceAll$2($.JSString_methods.replaceAll$2($.JSString_methods.replaceAll$2($.JSString_methods.replaceAll$2(object, "\\", "\\\\"), "\n", "\\n"), "\r", "\\r"), "\"", "\\\"") + "\"";
  return "Instance of '" + $.S($.Primitives_objectTypeName(object)) + "'";
};

$.ArgumentError$ = function(message) {
  return new $.ArgumentError(message);
};

$.RangeError$ = function(message) {
  return new $.RangeError(message);
};

$.RangeError$value = function(value) {
  return new $.RangeError("value " + $.S(value));
};

$.RangeError$range = function(value, start, end) {
  return new $.RangeError("value " + $.S(value) + " not in range " + start + ".." + end);
};

$.NoSuchMethodError$ = function(_receiver, _memberName, _arguments, _namedArguments, existingArgumentNames) {
  return new $.NoSuchMethodError(_receiver, _memberName, _arguments, _namedArguments, existingArgumentNames);
};

$.UnsupportedError$ = function(message) {
  return new $.UnsupportedError(message);
};

$.StateError$ = function(message) {
  return new $.StateError(message);
};

$.ConcurrentModificationError$ = function(modifiedObject) {
  return new $.ConcurrentModificationError(modifiedObject);
};

$.StackOverflowError$ = function() {
  return new $.StackOverflowError();
};

$.RuntimeError$ = function(message) {
  return new $.RuntimeError(message);
};

$._ExceptionImplementation$ = function(message) {
  return new $._ExceptionImplementation(message);
};

$.FormatException$ = function(message) {
  return new $.FormatException(message);
};

$.IntegerDivisionByZeroException$ = function() {
  return new $.IntegerDivisionByZeroException();
};

$.List_List = function($length) {
  var t1 = $ === $length;
  if (t1)
    $length = null;
  if (t1)
    return new Array(0);
  if (!(typeof $length === "number" && Math.floor($length) === $length) || $length < 0)
    throw $.$$throw($.ArgumentError$("Length must be a positive integer: " + $.S($length) + "."));
  return $.Primitives_newFixedList($length);
};

$.List_List$from = function(other, growable, E) {
  var list, t1, $length, fixedList, t2, i, t3;
  list = $.List_List($, E);
  $.setRuntimeTypeInfo(list, [E]);
  for (t1 = $.get$iterator$ax(other); t1.moveNext$0();)
    list.push(t1.get$current());
  if (growable === true)
    return list;
  $length = list.length;
  fixedList = $.List_List($length, E);
  $.setRuntimeTypeInfo(fixedList, [E]);
  for (t1 = list.length, t2 = fixedList.length, i = 0; i < $length; ++i) {
    if (i >= t1)
      throw $.ioore(i);
    t3 = list[i];
    if (i >= t2)
      throw $.ioore(i);
    fixedList[i] = t3;
  }
  return fixedList;
};

$.Map_Map = function(K, V) {
  return $.HashMap$(K, V);
};

$.print = function(object) {
  $.Primitives_printString(object);
};

$.RegExp_RegExp = function(pattern, caseSensitive, multiLine) {
  return $.JSSyntaxRegExp$(pattern, caseSensitive, multiLine);
};

$.String_String$fromCharCodes = function(charCodes) {
  if (!(charCodes.constructor === Array))
    charCodes = $.List_List$from(charCodes, true, null);
  return $.Primitives_stringFromCharCodes(charCodes);
};

$.StringBuffer$ = function($content) {
  var t1 = new $.StringBuffer("");
  t1.StringBuffer$1($content);
  return t1;
};

$.window = function() {
  return window;
};

$.document = function() {
  return document;
};

$.AudioElement_AudioElement = function(src) {
  var t1 = $ === src;
  if (t1)
    src = null;
  if (!t1)
    return new Audio(src);
  return new Audio();
};

$.CanvasElement_CanvasElement = function(height, width) {
  var e = document.createElement("canvas");
  if (width != null)
    $.set$width$x(e, width);
  if (height != null)
    $.set$height$x(e, height);
  return e;
};

$._ChildrenElementList$_wrap = function(element) {
  return new $._ChildrenElementList(element, $.get$$$dom_children$x(element));
};

$._FrozenElementList$_wrap = function(_nodeList) {
  return new $._FrozenElementList(_nodeList);
};

$._FrozenElementListIterator$ = function(_list) {
  return new $._FrozenElementListIterator(_list, -1, null);
};

$.Element_Element$tag = function(tag) {
  return $._ElementFactoryProvider_createElement_tag(tag);
};

$.Element__determineMouseWheelEventType = function(e) {
  if (e.onwheel !== undefined)
    return "wheel";
  else if (e.onmousewheel !== undefined)
    return "mousewheel";
  else
    return "DOMMouseScroll";
};

$._ElementFactoryProvider_createElement_tag = function(tag) {
  return document.createElement(tag);
};

$.HttpRequest_getString = function(url, onProgress, withCredentials) {
  return $.HttpRequest_request(url, null, onProgress, null, null, withCredentials).then$1(new $.HttpRequest_getString_anon());
};

$.HttpRequest_request = function(url, method, onProgress, responseType, sendData, withCredentials) {
  var completer, xhr, t1;
  completer = $._CompleterImpl$();
  xhr = new XMLHttpRequest();
  if (method == null)
    method = "GET";
  t1 = $.getInterceptor$x(xhr);
  t1.open$3$async(xhr, method, url, true);
  if (withCredentials != null)
    xhr.withCredentials = withCredentials;
  if (responseType != null)
    xhr.responseType = responseType;
  if (onProgress != null)
    t1.get$onProgress(xhr).listen$1(onProgress);
  t1.get$onLoad(xhr).listen$1(new $.HttpRequest_request_anon(completer, xhr));
  t1.get$onError(xhr).listen$1(new $.HttpRequest_request_anon0(completer));
  if (sendData != null)
    xhr.send(sendData);
  else
    xhr.send();
  return completer.future;
};

$.ImageElement_ImageElement = function(height, src, width) {
  var e = document.createElement("img");
  if (src != null)
    $.set$src$x(e, src);
  if (width != null)
    $.set$width$x(e, width);
  if (height != null)
    $.set$height$x(e, height);
  return e;
};

$._ChildNodeListLazy$ = function(_this) {
  return new $._ChildNodeListLazy(_this);
};

$.TouchEvent_supported = function() {
  if ("ontouchstart" in window)
    return $.Device_isEventTypeSupported("TouchEvent");
  return false;
};

$._EventStream$ = function(_target, _eventType, _useCapture, T) {
  var t1 = new $._EventStream(_target, _eventType, _useCapture);
  $.setRuntimeTypeInfo(t1, [T]);
  return t1;
};

$._EventStreamSubscription$ = function(_target, _eventType, _onData, _useCapture) {
  var t1 = new $._EventStreamSubscription(0, _target, _eventType, _onData, _useCapture);
  t1._EventStreamSubscription$4(_target, _eventType, _onData, _useCapture);
  return t1;
};

$.Point$0 = function(x, y) {
  return new $.Point0(x, y);
};

$.Rect$ = function(left, $top, width, height) {
  return new $.Rect(left, $top, width, height);
};

$._convertNativeToDart_Window = function(win) {
  return $._DOMWindowCrossFrame__createSafe(win);
};

$._convertNativeToDart_EventTarget = function(e) {
  if ("setInterval" in e)
    return $._DOMWindowCrossFrame__createSafe(e);
  else
    return e;
};

$._DOMWindowCrossFrame$ = function(_window) {
  return new $._DOMWindowCrossFrame(_window);
};

$._DOMWindowCrossFrame__createSafe = function(w) {
  if (w === window)
    return w;
  else
    return $._DOMWindowCrossFrame$(w);
};

$.FixedSizeListIterator$ = function(array) {
  return new $.FixedSizeListIterator(array, $.get$length$asx(array), -1, null);
};

$.convertDartToNative_Dictionary = function(dict) {
  var object;
  if (dict == null)
    return;
  object = {};
  $.JSNull_methods.forEach$1(dict, new $.convertDartToNative_Dictionary_anon(object));
  return object;
};

$.Device_userAgent = function() {
  return $.get$navigator$x($.window()).userAgent;
};

$.Device_isOpera = function() {
  if ($.Device__isOpera == null)
    $.Device__isOpera = $.contains$2$asx($.Device_userAgent(), "Opera", 0);
  return $.Device__isOpera;
};

$.Device_isWebKit = function() {
  if ($.Device__isWebKit == null)
    $.Device__isWebKit = $.Device_isOpera() !== true && $.contains$2$asx($.Device_userAgent(), "WebKit", 0);
  return $.Device__isWebKit;
};

$.Device_isEventTypeSupported = function(eventType) {
  var e, t1, exception;
  try {
    t1 = document;
    e = $.$$dom_createEvent$1$x(t1, eventType);
    t1 = e;
    return typeof t1 === "object" && t1 !== null && t1.$isEvent0();
  } catch (exception) {
    $.unwrapException(exception);
  }

  return false;
};

$.FilteredElementList$ = function(node) {
  return new $.FilteredElementList(node, $.get$nodes$x(node));
};

$.Lists_indexOf = function(a, element, startIndex, endIndex) {
  var i;
  if (typeof a !== "string" && (typeof a !== "object" || a === null || a.constructor !== Array && !a.$isJavaScriptIndexingBehavior()))
    return $.Lists_indexOf$bailout(1, a, element, startIndex, endIndex);
  if (typeof startIndex !== "number")
    return $.Lists_indexOf$bailout(1, a, element, startIndex, endIndex);
  if (typeof endIndex !== "number")
    return $.Lists_indexOf$bailout(1, a, element, startIndex, endIndex);
  if (startIndex >= a.length)
    return -1;
  if (startIndex < 0)
    startIndex = 0;
  for (i = startIndex; i < endIndex; ++i) {
    if (i !== (i | 0))
      throw $.iae(i);
    if (i < 0 || i >= a.length)
      throw $.ioore(i);
    if ($.$eq(a[i], element) === true)
      return i;
  }
  return -1;
};

$.Lists_indexOf$bailout = function(state0, a, element, startIndex, endIndex) {
  var t1, t2, i;
  t1 = $.getInterceptor$asx(a);
  t2 = $.getInterceptor$n(startIndex);
  if (t2.$ge(startIndex, t1.get$length(a)) === true)
    return -1;
  if (t2.$lt(startIndex, 0) === true)
    startIndex = 0;
  for (i = startIndex; t2 = $.getInterceptor$n(i), t2.$lt(i, endIndex) === true; i = t2.$add(i, 1))
    if ($.$eq(t1.$index(a, i), element) === true)
      return i;
  return -1;
};

$.Lists_getRange = function(a, start, end, accumulator) {
  var i;
  if (typeof a !== "string" && (typeof a !== "object" || a === null || a.constructor !== Array && !a.$isJavaScriptIndexingBehavior()))
    return $.Lists_getRange$bailout(1, a, start, end, accumulator);
  if (typeof start !== "number")
    return $.Lists_getRange$bailout(1, a, start, end, accumulator);
  if (typeof end !== "number")
    return $.Lists_getRange$bailout(1, a, start, end, accumulator);
  if (start < 0)
    throw $.$$throw($.RangeError$value(start));
  if (end < start)
    throw $.$$throw($.RangeError$value(end));
  if (end > a.length)
    throw $.$$throw($.RangeError$value(end));
  for (i = start; i < end; ++i) {
    if (i !== (i | 0))
      throw $.iae(i);
    if (i < 0 || i >= a.length)
      throw $.ioore(i);
    accumulator.push(a[i]);
  }
  return accumulator;
};

$.Lists_getRange$bailout = function(state0, a, start, end, accumulator) {
  var t1, t2, i;
  if ($.$lt$n(start, 0) === true)
    throw $.$$throw($.RangeError$value(start));
  t1 = $.getInterceptor$n(end);
  if (t1.$lt(end, start) === true)
    throw $.$$throw($.RangeError$value(end));
  t2 = $.getInterceptor$asx(a);
  if (t1.$gt(end, t2.get$length(a)) === true)
    throw $.$$throw($.RangeError$value(end));
  for (i = start; t1 = $.getInterceptor$n(i), t1.$lt(i, end) === true; i = t1.$add(i, 1))
    accumulator.push(t2.$index(a, i));
  return accumulator;
};

$.ReceivePort_ReceivePort = function() {
  return $.ReceivePortImpl$();
};

$._Isolate_port = function() {
  if ($.lazyPort == null)
    $.lazyPort = $.ReceivePort_ReceivePort();
  return $.lazyPort;
};

$.parse = function(json, reviver) {
  var parsed, e, t1, exception;
  t1 = json;
  if (!(typeof t1 === "string"))
    throw $.$$throw($.ArgumentError$(json));
  parsed = null;
  try {
    parsed = JSON.parse(json);
  } catch (exception) {
    t1 = $.unwrapException(exception);
    e = t1;
    throw $.$$throw($.FormatException$(String(e)));
  }

  return $._convertJsonToDart(parsed, reviver);
};

$.min = function(a, b) {
  if (typeof a === "number") {
    if (typeof b === "number") {
      if (a > b)
        return b;
      if (a < b)
        return a;
      if (typeof b === "number") {
        if (typeof a === "number")
          if (a === 0)
            return (a + b) * a * b;
        if (a === 0 && $.JSDouble_methods.get$isNegative(b) || $.JSDouble_methods.get$isNaN(b))
          return b;
        return a;
      }
      return a;
    }
    throw $.$$throw($.ArgumentError$(b));
  }
  throw $.$$throw($.ArgumentError$(a));
};

$.max = function(a, b) {
  if (typeof a === "number") {
    if (typeof b === "number") {
      if (a > b)
        return a;
      if (a < b)
        return b;
      if (typeof b === "number") {
        if (typeof a === "number")
          if (a === 0)
            return a + b;
        if ($.JSDouble_methods.get$isNaN(b))
          return b;
        return a;
      }
      if (b === 0 && $.JSNumber_methods.get$isNegative(a))
        return b;
      return a;
    }
    throw $.$$throw($.ArgumentError$(b));
  }
  throw $.$$throw($.ArgumentError$(a));
};

$.pow = function(x, exponent) {
  $.checkNum(x);
  $.checkNum(exponent);
  return Math.pow(x, exponent);
};

$.sin = function(x) {
  return Math.sin($.checkNum(x));
};

$.cos = function(x) {
  return Math.cos($.checkNum(x));
};

$.tan = function(x) {
  return Math.tan($.checkNum(x));
};

$.atan = function(x) {
  return Math.atan($.checkNum(x));
};

$.sqrt = function(x) {
  return Math.sqrt($.checkNum(x));
};

$.Random_Random = function(seed) {
  return $.C__Random;
};

$.main = function() {
  $.stage = $.Stage$("oneStage", document.querySelector("#oneStage"));
  var renderLoop = $.RenderLoop$();
  renderLoop.addStage$1($.stage);
  $.juggler = renderLoop.get$juggler();
  $.resourceManager = $.ResourceManager$();
  $.Grafix_addResource($.resourceManager);
  $.Sounds_addResource($.resourceManager);
  $.load$0$x($.resourceManager).then$1(new $.main_anon(renderLoop)).catchError$1(new $.main_anon0());
};

$.Animation$ = function(obj) {
  var t1 = $.List_List($, $.AnimationFrame);
  $.setRuntimeTypeInfo(t1, [$.AnimationFrame]);
  t1 = new $.Animation(t1, null, null, null, null);
  t1.Animation$1(obj);
  return t1;
};

$.AnimationFrame$ = function(bitmapName, duration) {
  var t1 = new $.AnimationFrame(null, null);
  t1.AnimationFrame$2(bitmapName, duration);
  return t1;
};

$.Bird$ = function(x, y) {
  var t1, t2, t3;
  t1 = $.Random_Random($.DateTime_DateTime$now().get$millisecondsSinceEpoch());
  t2 = $.List_List($, $.DisplayObject);
  $.setRuntimeTypeInfo(t2, [$.DisplayObject]);
  t3 = $.DisplayObject__nextID;
  $.DisplayObject__nextID = $.$add$ns(t3, 1);
  t3 = new $.Bird(null, null, null, null, null, null, null, false, 0, 0, t1, 0, null, null, null, null, null, null, null, null, false, false, null, null, null, t2, true, true, false, true, true, 0, t3, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, true, false, null, null, "", null, $.Matrix$fromIdentity(), $.Matrix$fromIdentity(), true, null);
  t3.Bird$2(x, y);
  return t3;
};

$.BirdManager$ = function(layer) {
  var t1 = new $.BirdManager(null, null, null, $.Random_Random($.DateTime_DateTime$now().get$millisecondsSinceEpoch()));
  t1.BirdManager$1(layer);
  return t1;
};

$.Bullet$ = function(x, y, speedX, speedY, accelerationX, accelerationY, hostile, duration) {
  var t1, t2, t3;
  t1 = $.Random_Random($.DateTime_DateTime$now().get$millisecondsSinceEpoch());
  t2 = $.List_List($, $.DisplayObject);
  $.setRuntimeTypeInfo(t2, [$.DisplayObject]);
  t3 = $.DisplayObject__nextID;
  $.DisplayObject__nextID = $.$add$ns(t3, 1);
  t3 = new $.Bullet(null, null, null, null, false, null, null, null, null, null, t1, null, null, null, null, null, null, null, false, false, null, null, null, t2, true, true, false, true, true, 0, t3, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, true, false, null, null, "", null, $.Matrix$fromIdentity(), $.Matrix$fromIdentity(), true, null);
  t3.Bullet$8(x, y, speedX, speedY, accelerationX, accelerationY, hostile, duration);
  return t3;
};

$.Bullet$gun = function(x, y, speedX, speedY, accelerationX, accelerationY, hostile, duration) {
  var t1, t2, t3;
  t1 = $.Random_Random($.DateTime_DateTime$now().get$millisecondsSinceEpoch());
  t2 = $.List_List($, $.DisplayObject);
  $.setRuntimeTypeInfo(t2, [$.DisplayObject]);
  t3 = $.DisplayObject__nextID;
  $.DisplayObject__nextID = $.$add$ns(t3, 1);
  t3 = new $.Bullet(null, null, null, null, false, null, null, null, null, null, t1, null, null, null, null, null, null, null, false, false, null, null, null, t2, true, true, false, true, true, 0, t3, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, true, false, null, null, "", null, $.Matrix$fromIdentity(), $.Matrix$fromIdentity(), true, null);
  t3.Bullet$gun$8(x, y, speedX, speedY, accelerationX, accelerationY, hostile, duration);
  return t3;
};

$.BulletManager$ = function(layer) {
  var t1 = new $.BulletManager(null, null, null, null, $.Random_Random($.DateTime_DateTime$now().get$millisecondsSinceEpoch()));
  t1.BulletManager$1(layer);
  return t1;
};

$.Collision_isCollidedWithTerrain = function(obj, oldX, oldY) {
  var bricks, t1, result, c;
  bricks = $.Game_worldMap.get$bricks();
  if (bricks == null)
    return 0;
  for (t1 = $.get$iterator$ax(bricks), result = 0; t1.moveNext$0();) {
    c = obj.collisionWithDirection$3(t1.get$current(), oldX, oldY);
    if (c > 0)
      result = (result | c) >>> 0;
  }
  return result;
};

$.Collision_hasSomethingToStandOn = function(obj) {
  var bricks, t1, t2, t3;
  bricks = $.Game_worldMap.get$bricks();
  if (bricks == null)
    return;
  for (t1 = $.get$iterator$ax(bricks); t1.moveNext$0();) {
    t2 = t1.get$current();
    t3 = $.getInterceptor$x(t2);
    if ($.$ge$n(t3.get$y(t2), $.$add$ns(obj.y, obj.get$height(obj))) === true)
      if ($.$le$n(t3.get$y(t2), $.$add$ns($.$add$ns(obj.y, obj.get$height(obj)), obj.get$speedY())) === true)
        t3 = !($.$lt$n($.$add$ns(obj.x, obj.get$width(obj)), t3.get$x(t2)) === true || $.$gt$n(obj.x, $.$add$ns(t3.get$x(t2), t3.get$width(t2))) === true);
      else
        t3 = false;
    else
      t3 = false;
    if (t3)
      return t2;
  }
  return;
};

$.Collision_reachedEnd = function(player) {
  var bricks, t1;
  bricks = $.Game_worldMap.get$ends();
  for (t1 = $.JSArray_methods.get$iterator(bricks); t1.moveNext$0();)
    if (player.collision$1(t1.get$current()) > 0)
      return true;
  return false;
};

$.DisplayWindow$ = function() {
  var t1 = new $.DisplayWindow(null, null, null, null);
  t1.DisplayWindow$0();
  return t1;
};

$.Game$ = function(stage, juggler) {
  var t1, t2;
  t1 = $.List_List($, $.DisplayObject);
  $.setRuntimeTypeInfo(t1, [$.DisplayObject]);
  t2 = $.DisplayObject__nextID;
  $.DisplayObject__nextID = $.$add$ns(t2, 1);
  t2 = new $.Game(null, null, null, null, null, null, false, false, null, null, null, t1, true, true, false, true, true, 0, t2, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, true, false, null, null, "", null, $.Matrix$fromIdentity(), $.Matrix$fromIdentity(), true, null);
  t2.Game$2(stage, juggler);
  return t2;
};

$.Grafix_addResource = function(resourceManager) {
  resourceManager.addBitmapData$2("background", "images/background.png");
  resourceManager.addBitmapData$2("tile1", "images/tile1.png");
  resourceManager.addBitmapData$2("tile2", "images/tile2.png");
  resourceManager.addBitmapData$2("tile3", "images/tile3.png");
  resourceManager.addBitmapData$2("tiledirt", "images/tiledirt.png");
  resourceManager.addBitmapData$2("tileocean", "images/tileocean.png");
  resourceManager.addBitmapData$2("bulletleft", "images/bulletleft.png");
  resourceManager.addBitmapData$2("bulletright", "images/bulletright.png");
  resourceManager.addBitmapData$2("player_leftdie", "images/player_leftdie.png");
  resourceManager.addBitmapData$2("player_rightdie", "images/player_rightdie.png");
  resourceManager.addBitmapData$2("player_leftcrouch", "images/player_leftcrouch.png");
  resourceManager.addBitmapData$2("player_rightcrouch", "images/player_rightcrouch.png");
  resourceManager.addBitmapData$2("player_leftstand", "images/player_leftstand.png");
  resourceManager.addBitmapData$2("player_rightstand", "images/player_rightstand.png");
  resourceManager.addBitmapData$2("player_leftrun1", "images/player_leftrun1.png");
  resourceManager.addBitmapData$2("player_leftrun2", "images/player_leftrun2.png");
  resourceManager.addBitmapData$2("player_leftrun3", "images/player_leftrun3.png");
  resourceManager.addBitmapData$2("player_rightrun1", "images/player_rightrun1.png");
  resourceManager.addBitmapData$2("player_rightrun2", "images/player_rightrun2.png");
  resourceManager.addBitmapData$2("player_rightrun3", "images/player_rightrun3.png");
  resourceManager.addBitmapData$2("player_leftjump", "images/player_leftjump.png");
  resourceManager.addBitmapData$2("player_rightjump", "images/player_rightjump.png");
  resourceManager.addBitmapData$2("robot_leftblood1", "images/robot_leftblood1.png");
  resourceManager.addBitmapData$2("robot_leftblood2", "images/robot_leftblood2.png");
  resourceManager.addBitmapData$2("robot_leftblood3", "images/robot_leftblood3.png");
  resourceManager.addBitmapData$2("robot_rightblood1", "images/robot_rightblood1.png");
  resourceManager.addBitmapData$2("robot_rightblood2", "images/robot_rightblood3.png");
  resourceManager.addBitmapData$2("robot_rightblood3", "images/robot_rightblood3.png");
  resourceManager.addBitmapData$2("robot_leftmove1", "images/robot_leftmove1.png");
  resourceManager.addBitmapData$2("robot_leftmove2", "images/robot_leftmove2.png");
  resourceManager.addBitmapData$2("robot_leftmove3", "images/robot_leftmove3.png");
  resourceManager.addBitmapData$2("robot_rightmove1", "images/robot_rightmove1.png");
  resourceManager.addBitmapData$2("robot_rightmove2", "images/robot_rightmove2.png");
  resourceManager.addBitmapData$2("robot_rightmove3", "images/robot_rightmove3.png");
  resourceManager.addBitmapData$2("robot_leftstand", "images/robot_leftstand.png");
  resourceManager.addBitmapData$2("robot_rightstand", "images/robot_rightstand.png");
  resourceManager.addBitmapData$2("robot_leftshoot", "images/robot_leftshoot.png");
  resourceManager.addBitmapData$2("robot_rightshoot", "images/robot_rightshoot.png");
  resourceManager.addBitmapData$2("robot", "images/chicken.png");
  resourceManager.addBitmapData$2("brick", "images/brick.png");
  resourceManager.addBitmapData$2("bullet1left", "images/bullet1left.png");
  resourceManager.addBitmapData$2("bullet1right", "images/bullet1right.png");
  resourceManager.addBitmapData$2("helicopter1", "images/helicopter1.png");
  resourceManager.addBitmapData$2("helicopter2", "images/helicopter2.png");
  resourceManager.addBitmapData$2("helicopter3", "images/helicopter3.png");
  resourceManager.addBitmapData$2("helicopter4", "images/helicopter4.png");
  resourceManager.addBitmapData$2("bullet2", "images/bullet2.png");
  resourceManager.addBitmapData$2("explosion1", "images/explosion1.png");
  resourceManager.addBitmapData$2("explosion2", "images/explosion2.png");
  resourceManager.addBitmapData$2("explosion3", "images/explosion3.png");
  $.Grafix_resourceManager = resourceManager;
};

$.HUDManager$ = function(layer) {
  var t1 = new $.HUDManager(null, null, null, null, null, 0, 300, 500);
  t1.HUDManager$1(layer);
  return t1;
};

$.KeyboardHandler$ = function(player) {
  var t1 = new $.KeyboardHandler($.HashSet$($.$int), null);
  t1.KeyboardHandler$1(player);
  return t1;
};

$.Player$ = function() {
  var t1, t2;
  t1 = $.List_List($, $.DisplayObject);
  $.setRuntimeTypeInfo(t1, [$.DisplayObject]);
  t2 = $.DisplayObject__nextID;
  $.DisplayObject__nextID = $.$add$ns(t2, 1);
  t2 = new $.Player(null, null, null, null, null, null, null, null, null, null, null, 100, null, false, 0, 0, null, null, null, null, null, null, null, false, false, null, null, null, t1, true, true, false, true, true, 0, t2, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, true, false, null, null, "", null, $.Matrix$fromIdentity(), $.Matrix$fromIdentity(), true, null);
  t2.Player$0();
  return t2;
};

$.Robot$ = function(x, y) {
  var t1, t2, t3;
  t1 = $.Random_Random($.DateTime_DateTime$now().get$millisecondsSinceEpoch());
  t2 = $.List_List($, $.DisplayObject);
  $.setRuntimeTypeInfo(t2, [$.DisplayObject]);
  t3 = $.DisplayObject__nextID;
  $.DisplayObject__nextID = $.$add$ns(t3, 1);
  t3 = new $.Robot(3, null, null, null, null, null, null, null, null, null, null, null, false, 0, 0, t1, 0, null, null, null, null, null, null, null, null, false, false, null, null, null, t2, true, true, false, true, true, 0, t3, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, true, false, null, null, "", null, $.Matrix$fromIdentity(), $.Matrix$fromIdentity(), true, null);
  t3.Robot$2(x, y);
  return t3;
};

$.RobotManager$ = function(layer) {
  var t1 = new $.RobotManager(null, null, null, $.Random_Random($.DateTime_DateTime$now().get$millisecondsSinceEpoch()));
  t1.RobotManager$1(layer);
  return t1;
};

$.Sounds_addResource = function(resourceManager) {
  resourceManager.addSound$2("background", "sounds/background_music.wav");
  resourceManager.addSound$2("bomb", "sounds/bomb.wav");
  resourceManager.addSound$2("clip_change", "sounds/clip_change.wav");
  resourceManager.addSound$2("player_dead", "sounds/player_dead.wav");
  resourceManager.addSound$2("rifle", "sounds/rifle.wav");
  resourceManager.addSound$2("robot_dead", "sounds/robot_dead.wav");
  resourceManager.addSound$2("robot_fire", "sounds/robot_fire.wav");
  resourceManager.addSound$2("explosion", "sounds/explosion.wav");
  $.Sounds_resourceManager = resourceManager;
};

$.Sounds_playBackground = function() {
  $.play$2$x($.Sounds_resourceManager.getSound$1("background"), true, $.SoundTransform$(1, 0));
  $.Primitives_printString("music on");
};

$.Sounds_playSoundEffect = function($name) {
  $.play$2$x($.Sounds_resourceManager.getSound$1($name), false, $.SoundTransform$(1, 0));
};

$.Tile$brick = function(i, j) {
  var t1, t2;
  t1 = $.List_List($, $.DisplayObject);
  $.setRuntimeTypeInfo(t1, [$.DisplayObject]);
  t2 = $.DisplayObject__nextID;
  $.DisplayObject__nextID = $.$add$ns(t2, 1);
  t2 = new $.Tile(null, null, null, null, null, null, null, null, false, false, null, null, null, t1, true, true, false, true, true, 0, t2, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, true, false, null, null, "", null, $.Matrix$fromIdentity(), $.Matrix$fromIdentity(), true, null);
  t2.Tile$brick$2(i, j);
  return t2;
};

$.Tile$transparentBrick = function(i, j) {
  var t1, t2;
  t1 = $.List_List($, $.DisplayObject);
  $.setRuntimeTypeInfo(t1, [$.DisplayObject]);
  t2 = $.DisplayObject__nextID;
  $.DisplayObject__nextID = $.$add$ns(t2, 1);
  t2 = new $.Tile(null, null, null, null, null, null, null, null, false, false, null, null, null, t1, true, true, false, true, true, 0, t2, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, true, false, null, null, "", null, $.Matrix$fromIdentity(), $.Matrix$fromIdentity(), true, null);
  t2.Tile$transparentBrick$2(i, j);
  return t2;
};

$.TouchManager$ = function() {
  return new $.TouchManager();
};

$.WorldMap$ = function() {
  var t1, t2, t3, t4, t5, t6;
  t1 = $.List_List($, $.$int);
  $.setRuntimeTypeInfo(t1, [$.$int]);
  t2 = $.List_List($, $.Bitmap);
  $.setRuntimeTypeInfo(t2, [$.Bitmap]);
  t3 = $.List_List($, $.Bitmap);
  $.setRuntimeTypeInfo(t3, [$.Bitmap]);
  t4 = $.List_List($, $.Tile);
  $.setRuntimeTypeInfo(t4, [$.Tile]);
  t5 = $.List_List($, $.DisplayObject);
  $.setRuntimeTypeInfo(t5, [$.DisplayObject]);
  t6 = $.DisplayObject__nextID;
  $.DisplayObject__nextID = $.$add$ns(t6, 1);
  t6 = new $.WorldMap(null, null, 20, null, t1, t2, t3, null, null, t4, null, null, null, null, null, null, null, false, false, null, null, null, t5, true, true, false, true, true, 0, t6, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, true, false, null, null, "", null, $.Matrix$fromIdentity(), $.Matrix$fromIdentity(), true, null);
  t6.WorldMap$0();
  return t6;
};

$.Juggler$ = function() {
  var t1 = $.List_List($, $.Animatable);
  $.setRuntimeTypeInfo(t1, [$.Animatable]);
  return new $.Juggler(t1, 0, 0);
};

$.Bitmap$ = function(bitmapData, pixelSnapping) {
  var t1 = $.DisplayObject__nextID;
  if (typeof t1 !== "number")
    return $.Bitmap$$bailout(1, bitmapData, pixelSnapping, t1);
  $.DisplayObject__nextID = t1 + 1;
  t1 = new $.Bitmap(bitmapData, pixelSnapping, null, t1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, true, false, null, null, "", null, $.Matrix$fromIdentity(), $.Matrix$fromIdentity(), true, null);
  t1.Bitmap$2(bitmapData, pixelSnapping);
  return t1;
};

$.Bitmap$$bailout = function(state0, bitmapData, pixelSnapping, t1) {
  $.DisplayObject__nextID = $.$add$ns(t1, 1);
  t1 = new $.Bitmap(bitmapData, pixelSnapping, null, t1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, true, false, null, null, "", null, $.Matrix$fromIdentity(), $.Matrix$fromIdentity(), true, null);
  t1.Bitmap$2(bitmapData, pixelSnapping);
  return t1;
};

$.BitmapData$ = function(width, height, transparent, fillColor) {
  var t1 = new $.BitmapData(null, null, null, null, null, null, null, null, null, null, null, null);
  t1.BitmapData$4(width, height, transparent, fillColor);
  return t1;
};

$.BitmapData$fromImageElement = function(imageElement) {
  var t1 = new $.BitmapData(null, null, null, null, null, null, null, null, null, null, null, null);
  t1.BitmapData$fromImageElement$1(imageElement);
  return t1;
};

$.BitmapData_load = function(url) {
  var completer, image, t1;
  completer = $._CompleterImpl$();
  image = $.ImageElement_ImageElement(null, null, null);
  t1 = $.getInterceptor$x(image);
  t1.get$onLoad(image).listen$1(new $.BitmapData_load_anon(completer, image));
  t1.get$onError(image).listen$1(new $.BitmapData_load_anon0(completer));
  t1.set$src(image, url);
  return completer.future;
};

$.Sprite$ = function() {
  var t1, t2;
  t1 = $.List_List($, $.DisplayObject);
  $.setRuntimeTypeInfo(t1, [$.DisplayObject]);
  t2 = $.DisplayObject__nextID;
  $.DisplayObject__nextID = $.$add$ns(t2, 1);
  return new $.Sprite(false, false, null, null, null, t1, true, true, false, true, true, 0, t2, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, true, false, null, null, "", null, $.Matrix$fromIdentity(), $.Matrix$fromIdentity(), true, null);
};

$._MouseButton$ = function(mouseDownEventType, mouseUpEventType, mouseClickEventType, mouseDoubleClickEventType) {
  return new $._MouseButton(null, false, 0, 0, mouseDownEventType, mouseUpEventType, mouseClickEventType, mouseDoubleClickEventType);
};

$._Touch$ = function(target, primaryTouchPoint) {
  var t1 = $._Touch__globalTouchPointID;
  if (typeof t1 !== "number")
    return $._Touch$$bailout(1, target, primaryTouchPoint, t1);
  $._Touch__globalTouchPointID = t1 + 1;
  return new $._Touch(t1, target, primaryTouchPoint);
};

$._Touch$$bailout = function(state0, target, primaryTouchPoint, t1) {
  $._Touch__globalTouchPointID = $.$add$ns(t1, 1);
  return new $._Touch(t1, target, primaryTouchPoint);
};

$.Stage$ = function($name, canvas) {
  var t1, t2;
  t1 = $.List_List($, $.DisplayObject);
  $.setRuntimeTypeInfo(t1, [$.DisplayObject]);
  t2 = $.DisplayObject__nextID;
  $.DisplayObject__nextID = $.$add$ns(t2, 1);
  t2 = new $.Stage(null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, [], t1, true, true, false, true, true, 0, t2, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, true, false, null, null, "", null, $.Matrix$fromIdentity(), $.Matrix$fromIdentity(), true, null);
  t2.Stage$2($name, canvas);
  return t2;
};

$.GlassPlate$ = function(width, height) {
  var t1 = $.DisplayObject__nextID;
  $.DisplayObject__nextID = $.$add$ns(t1, 1);
  return new $.GlassPlate(width, height, false, true, true, 0, t1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, true, false, null, null, "", null, $.Matrix$fromIdentity(), $.Matrix$fromIdentity(), true, null);
};

$.RenderLoop$ = function() {
  var t1 = new $.RenderLoop(null, null, null, null, null);
  t1.RenderLoop$0();
  return t1;
};

$.RenderState$fromCanvasRenderingContext2D = function(context, matrix) {
  var t1, t2;
  t1 = $.List_List(100, $.Matrix);
  $.setRuntimeTypeInfo(t1, [$.Matrix]);
  t2 = $.List_List(100, $.$double);
  $.setRuntimeTypeInfo(t2, [$.$double]);
  t2 = new $.RenderState(context, t1, t2, 0, 0, 0);
  t2.RenderState$fromCanvasRenderingContext2D$2(context, matrix);
  return t2;
};

$.EnterFrameEvent$ = function(passedTime) {
  var t1 = new $.EnterFrameEvent(null, null, null, null, null, null, null, null);
  t1.Event$2("enterFrame", false);
  t1.EnterFrameEvent$1(passedTime);
  return t1;
};

$.Event$ = function(type, bubbles) {
  var t1 = new $.Event(null, null, null, null, null, null, null);
  t1.Event$2(type, bubbles);
  return t1;
};

$._EventStream$0 = function(_target, _eventType, _useCapture, T) {
  var t1 = $.List_List($, $._EventStreamSubscription0);
  $.setRuntimeTypeInfo(t1, [$._EventStreamSubscription0]);
  t1 = new $._EventStream0(_target, _eventType, _useCapture, t1, 0);
  $.setRuntimeTypeInfo(t1, [T]);
  return t1;
};

$._EventStreamIndex$ = function() {
  var t1 = $.List_List($, $._EventStream0);
  $.setRuntimeTypeInfo(t1, [$._EventStream0]);
  return new $._EventStreamIndex(t1, 0);
};

$._EventStreamSubscription$0 = function(_eventStream, _onData) {
  var t1 = new $._EventStreamSubscription0(_eventStream, _onData, null, null);
  t1._liblib3$_EventStreamSubscription$2(_eventStream, _onData);
  return t1;
};

$.KeyboardEvent$ = function(type, bubbles) {
  var t1 = new $.KeyboardEvent(null, null, null, null, null, null, null, null, null, null, null, null, null, null, null);
  t1.Event$2(type, bubbles);
  t1.KeyboardEvent$2(type, bubbles);
  return t1;
};

$.MouseEvent$ = function(type, bubbles) {
  var t1 = new $.MouseEvent(null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null);
  t1.Event$2(type, bubbles);
  t1.MouseEvent$2(type, bubbles);
  return t1;
};

$.TextEvent$ = function(type, bubbles) {
  var t1 = new $.TextEvent("", null, null, null, null, null, null, null);
  t1.Event$2(type, bubbles);
  return t1;
};

$.TouchEvent$ = function(type, bubbles) {
  var t1 = new $.TouchEvent(null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null);
  t1.Event$2(type, bubbles);
  t1.TouchEvent$2(type, bubbles);
  return t1;
};

$.Matrix$ = function(a, b, c, d, tx, ty) {
  return new $.Matrix($.JSNumber_methods.toDouble$0(a), $.JSNumber_methods.toDouble$0(b), $.JSNumber_methods.toDouble$0(c), $.JSNumber_methods.toDouble$0(d), $.JSNumber_methods.toDouble$0(tx), $.JSNumber_methods.toDouble$0(ty), $.JSNumber_methods.toDouble$0(a * d - b * c));
};

$.Matrix$fromIdentity = function() {
  return new $.Matrix(1, 0, 0, 1, 0, 0, 1);
};

$.Point$ = function(x, y) {
  return new $.Point(x, y);
};

$.Point$zero = function() {
  return new $.Point(0, 0);
};

$.Rectangle$ = function(x, y, width, height) {
  return new $.Rectangle(x, y, width, height);
};

$.Rectangle$zero = function() {
  return new $.Rectangle(0, 0, 0, 0);
};

$.Sound_load = function(url) {
  var engine, t1;
  engine = $.get$SoundMixer_engine();
  t1 = $.getInterceptor(engine);
  if (t1.$eq(engine, "WebAudioApi") === true)
    return $.WebAudioApiSound_load(url);
  if (t1.$eq(engine, "AudioElement") === true)
    return $.AudioElementSound_load(url);
  return $.MockSound_load(url);
};

$.Sound_adaptAudioUrl = function(url) {
  var match, supportedTypes, t1, fileType;
  match = $.RegExp_RegExp("\\.(ogg|mp3|wav)$", false, false).firstMatch$1(url);
  supportedTypes = $.get$SoundMixer__supportedTypes();
  if (match == null)
    throw $.$$throw($.ArgumentError$("Unsupported file extension."));
  t1 = $.getInterceptor$asx(supportedTypes);
  if ($.$eq(t1.get$length(supportedTypes), 0) === true)
    throw $.$$throw($.UnsupportedError$("This browser supports no known audio codec."));
  fileType = $.toLowerCase$0$s(match.group$1(1));
  return $.$eq(t1.indexOf$1(supportedTypes, fileType), -1) === true ? $.JSString_methods.substring$2(url, 0, url.length - fileType.length) + $.S(t1.$index(supportedTypes, 0)) : url;
};

$.SoundMixer__getEngine = function() {
  var engine, ua, t1;
  engine = $.get$SoundMixer__audioContext() != null ? "WebAudioApi" : "AudioElement";
  ua = window.navigator.userAgent;
  t1 = $.getInterceptor$asx(ua);
  if (t1.contains$1(ua, "IEMobile"))
    if (t1.contains$1(ua, "9.0") || t1.contains$1(ua, "10.0"))
      engine = "Mock";
  if (t1.contains$1(ua, "iPhone") || t1.contains$1(ua, "iPad") || t1.contains$1(ua, "iPod"))
    if (t1.contains$1(ua, "OS 3") || t1.contains$1(ua, "OS 4") || t1.contains$1(ua, "OS 5"))
      engine = "Mock";
  if ($.$eq($.get$length$asx($.get$SoundMixer__supportedTypes()), 0) === true)
    engine = "Mock";
  $.Primitives_printString("StageXL: supported audio engine is: " + engine);
  return engine;
};

$.SoundMixer__getAudioContext = function() {
  if (!!(window.AudioContext || window.webkitAudioContext))
    return new (window.AudioContext || window.webkitAudioContext)();
  return;
};

$.SoundMixer__getSupportedTypes = function() {
  var supportedTypes, audio, valid, t1;
  supportedTypes = $.List_List($, $.String);
  $.setRuntimeTypeInfo(supportedTypes, [$.String]);
  audio = $.AudioElement_AudioElement($);
  valid = ["maybe", "probably"];
  t1 = $.getInterceptor$x(audio);
  if ($.$eq($.JSArray_methods.indexOf$1(valid, t1.canPlayType$2(audio, "audio/ogg", "")), -1) !== true)
    supportedTypes.push("ogg");
  if ($.$eq($.JSArray_methods.indexOf$1(valid, t1.canPlayType$2(audio, "audio/mpeg", "")), -1) !== true)
    supportedTypes.push("mp3");
  if ($.$eq($.JSArray_methods.indexOf$1(valid, t1.canPlayType$2(audio, "audio/wav", "")), -1) !== true)
    supportedTypes.push("wav");
  $.Primitives_printString("StageXL: supported audio types are: " + $.S(supportedTypes));
  return supportedTypes;
};

$.SoundTransform$ = function(volume, pan) {
  return new $.SoundTransform(volume, pan, 1, 0, 1, 0);
};

$.AudioElementSound$ = function() {
  var t1 = new $.AudioElementSound(null, null, null);
  t1.AudioElementSound$0();
  return t1;
};

$.AudioElementSound_load = function(url) {
  var t1, sound, audio, loadCompleter, t2, t3, t4;
  t1 = {};
  sound = $.AudioElementSound$();
  audio = sound._audio;
  loadCompleter = $._CompleterImpl$();
  t1.onCanPlayThroughSubscription_0 = null;
  t1.onErrorSubscription_1 = null;
  t2 = new $.AudioElementSound_load_onCanPlayThrough(t1, sound, loadCompleter);
  t3 = new $.AudioElementSound_load_onError(t1, loadCompleter);
  t4 = $.getInterceptor$x(audio);
  t1.onCanPlayThroughSubscription_0 = t4.get$onCanPlayThrough(audio).listen$1(t2);
  t1.onErrorSubscription_1 = t4.get$onError(audio).listen$1(t3);
  audio.src = $.Sound_adaptAudioUrl(url);
  audio.load();
  return loadCompleter.future;
};

$.AudioElementSoundChannel$ = function(audioElementSound, loop, soundTransform) {
  var t1 = new $.AudioElementSoundChannel(null, null, null, null, null);
  t1.AudioElementSoundChannel$3(audioElementSound, loop, soundTransform);
  return t1;
};

$.MockSound$ = function() {
  return new $.MockSound();
};

$.MockSound_load = function(url) {
  return $.Future_Future$of(new $.MockSound_load_anon());
};

$.MockSoundChannel$ = function(mockSound, loop, soundTransform) {
  var t1 = new $.MockSoundChannel(null, null, null);
  t1.MockSoundChannel$3(mockSound, loop, soundTransform);
  return t1;
};

$.WebAudioApiSound$ = function() {
  var t1 = new $.WebAudioApiSound(null);
  t1.WebAudioApiSound$0();
  return t1;
};

$.WebAudioApiSound_load = function(url) {
  var sound, soundUrl, loadCompleter;
  sound = $.WebAudioApiSound$();
  soundUrl = $.Sound_adaptAudioUrl(url);
  loadCompleter = $._CompleterImpl$();
  $.HttpRequest_request(soundUrl, null, null, "arraybuffer", null, null).then$1(new $.WebAudioApiSound_load_anon(sound, loadCompleter)).catchError$1(new $.WebAudioApiSound_load_anon0(loadCompleter));
  return loadCompleter.future;
};

$.WebAudioApiSoundChannel$ = function(webAudioApiSound, loop, soundTransform) {
  var t1 = new $.WebAudioApiSoundChannel(null, null, null, null, null, null);
  t1.WebAudioApiSoundChannel$3(webAudioApiSound, loop, soundTransform);
  return t1;
};

$.TextField$ = function() {
  var t1 = $.DisplayObject__nextID;
  $.DisplayObject__nextID = $.$add$ns(t1, 1);
  t1 = new $.TextField("", 0, null, "none", "pixel", "dynamic", false, false, 0, false, 0, 0, 0, null, null, true, 100, 100, null, null, false, true, true, 0, t1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, true, false, null, null, "", null, $.Matrix$fromIdentity(), $.Matrix$fromIdentity(), true, null);
  t1.TextField$0();
  return t1;
};

$.TextFormat$ = function(font, size, color, align, bold, indent, italic, leading, leftMargin, rightMargin, underline) {
  return new $.TextFormat(font, size, color, bold, italic, underline, align, leftMargin, rightMargin, indent, leading, 0, 0, false, false);
};

$.TextLineMetrics$ = function(x, width, height, ascent, descent, leading) {
  return new $.TextLineMetrics(ascent, descent, height, leading, width, x);
};

$.Mouse__getCssStyle = function(mouseCursor) {
  var cursor, style;
  cursor = $.$eq($.Mouse__customCursor, "auto") !== true ? $.Mouse__customCursor : mouseCursor;
  style = "auto";
  switch (cursor) {
    case "auto":
      style = "auto";
      break;
    case "arrow":
      style = "default";
      break;
    case "button":
      style = "pointer";
      break;
    case "hand":
      style = "move";
      break;
    case "ibeam":
      style = "text";
      break;
    case "wait":
      style = "wait";
      break;
  }
  return $.Mouse__isCursorHidden === true ? "none" : style;
};

$.Multitouch_inputMode = function(value) {
  $.Multitouch__inputMode = value;
  $.add$1$ax($.get$Multitouch__inputModeChangedEvent(), $.Multitouch__inputMode);
};

$.ObjectPool$ = function(valueFactory, T) {
  var t1 = $.List_List($, T);
  $.setRuntimeTypeInfo(t1, [T]);
  t1 = new $.ObjectPool(t1, valueFactory, 0);
  $.setRuntimeTypeInfo(t1, [T]);
  return t1;
};

$.ResourceManager$ = function() {
  var t1 = new $.ResourceManager(null);
  t1.ResourceManager$0();
  return t1;
};

$.ResourceManagerResource$ = function(kind, $name, url) {
  var t1 = new $.ResourceManagerResource(null, null, null, null, null, null);
  t1.ResourceManagerResource$3(kind, $name, url);
  return t1;
};

$._color2rgb = function(color) {
  var t1, t2, t3;
  t1 = $.JSInt_methods.$shr(color, 16);
  t2 = $.JSInt_methods.$shr(color, 8);
  t3 = $.JSInt_methods.$shr(color, 0);
  return "rgb(" + (t1 & 255) + "," + (t2 & 255) + "," + (t3 & 255) + ")";
};

$._color2rgba = function(color) {
  var t1, t2, t3, t4;
  t1 = $.JSInt_methods.$shr(color, 24);
  t2 = $.JSInt_methods.$shr(color, 16);
  t3 = $.JSInt_methods.$shr(color, 8);
  t4 = $.JSInt_methods.$shr(color, 0);
  return "rgba(" + (t2 & 255) + "," + (t3 & 255) + "," + (t4 & 255) + "," + (t1 & 255) / 255 + ")";
};

$._getBoundsTransformedHelper = function(matrix, width, height, returnRectangle) {
  var x2, y2, x3, y3, x4, y4, left, $top, right, bottom, t1;
  width = $.toDouble$0$n(width);
  height = $.toDouble$0$n(height);
  x2 = width * matrix.get$a();
  y2 = width * matrix.get$b();
  x3 = width * matrix.get$a() + height * matrix.get$c();
  y3 = width * matrix.get$b() + height * matrix.get$d();
  x4 = height * matrix.get$c();
  y4 = height * matrix.get$d();
  left = 0 > x2 ? x2 : 0;
  if (left > x3)
    left = x3;
  if (left > x4)
    left = x4;
  $top = 0 > y2 ? y2 : 0;
  if ($top > y3)
    $top = y3;
  if ($top > y4)
    $top = y4;
  right = 0 < x2 ? x2 : 0;
  if (right < x3)
    right = x3;
  if (right < x4)
    right = x4;
  bottom = 0 < y2 ? y2 : 0;
  if (bottom < y3)
    bottom = y3;
  if (bottom < y4)
    bottom = y4;
  if (returnRectangle == null)
    returnRectangle = $.Rectangle$zero();
  t1 = $.getInterceptor$x(returnRectangle);
  t1.set$x(returnRectangle, matrix.get$tx() + left);
  t1.set$y(returnRectangle, matrix.get$ty() + $top);
  t1.set$width(returnRectangle, right - left);
  t1.set$height(returnRectangle, bottom - $top);
  return returnRectangle;
};

$._FontStyleMetrics$ = function(fontStyle) {
  var t1 = new $._FontStyleMetrics(null, null, null, null);
  t1._FontStyleMetrics$1(fontStyle);
  return t1;
};

$._getFontStyleMetrics = function(fontStyle) {
  if ($.$eq($.get$_fontStyleMetrics().containsKey$1(fontStyle), false) === true)
    $.$indexSet$ax($.get$_fontStyleMetrics(), fontStyle, $._FontStyleMetrics$(fontStyle));
  return $.$index$asx($.get$_fontStyleMetrics(), fontStyle);
};

$.IsolateNatives__processWorkerMessage.call$2 = $.IsolateNatives__processWorkerMessage;
$.IsolateNatives__processWorkerMessage.$name = "IsolateNatives__processWorkerMessage";
$.$$throw.call$1 = $.$$throw;
$.$$throw.$name = "$$throw";
$.DartError_toStringWrapper.call$0 = $.DartError_toStringWrapper;
$.DartError_toStringWrapper.$name = "DartError_toStringWrapper";
$.invokeClosure.call$5 = $.invokeClosure;
$.invokeClosure.$name = "invokeClosure";
$.typeNameInChrome.call$1 = $.typeNameInChrome;
$.typeNameInChrome.$name = "typeNameInChrome";
$.typeNameInSafari.call$1 = $.typeNameInSafari;
$.typeNameInSafari.$name = "typeNameInSafari";
$.typeNameInOpera.call$1 = $.typeNameInOpera;
$.typeNameInOpera.$name = "typeNameInOpera";
$.typeNameInFirefox.call$1 = $.typeNameInFirefox;
$.typeNameInFirefox.$name = "typeNameInFirefox";
$.typeNameInIE.call$1 = $.typeNameInIE;
$.typeNameInIE.$name = "typeNameInIE";
$.constructorNameFallback.call$1 = $.constructorNameFallback;
$.constructorNameFallback.$name = "constructorNameFallback";
$.dynamicBind.call$4 = $.dynamicBind;
$.dynamicBind.$name = "dynamicBind";
$._nullDataHandler.call$1 = $._nullDataHandler;
$._nullDataHandler.$name = "_nullDataHandler";
$._nullErrorHandler.call$1 = $._nullErrorHandler;
$._nullErrorHandler.$name = "_nullErrorHandler";
$._nullDoneHandler.call$0 = $._nullDoneHandler;
$._nullDoneHandler.$name = "_nullDoneHandler";
$.Element__determineMouseWheelEventType.call$1 = $.Element__determineMouseWheelEventType;
$.Element__determineMouseWheelEventType.$name = "Element__determineMouseWheelEventType";
$.num = {builtin$cls: "num"};
$.AudioElement = {builtin$cls: "AudioElement"};
$.Animatable = {builtin$cls: "Animatable"};
$.Match = {builtin$cls: "Match"};
$._ManagerStub = {builtin$cls: "_ManagerStub"};
$.String = {builtin$cls: "String"};
$.Node = {builtin$cls: "Node"};
$.Element = {builtin$cls: "Element"};
$.bool = {builtin$cls: "bool"};
$.TextTrack = {builtin$cls: "TextTrack"};
$.ReceivePort = {builtin$cls: "ReceivePort"};
$.$double = {builtin$cls: "$double"};
$.Touch = {builtin$cls: "Touch"};
$.$int = {builtin$cls: "$int"};
$.List = {builtin$cls: "List"};
$.HttpRequest = {builtin$cls: "HttpRequest"};
$.DisplayObject.$isDisplayObject = true;
$.Tile.$isDisplayObject = true;
$.Stage.$isDisplayObject = true;
$.Bird.$isDisplayObject = true;
$.Robot.$isDisplayObject = true;
$.Bitmap.$isDisplayObject = true;
$.Bullet.$isDisplayObject = true;
Isolate.makeConstantList = function(list) {
  list.immutable$list = true;
  list.fixed$length = true;
  return list;
};
$.List_empty = Isolate.makeConstantList([]);
$.C__NullKey = new $._NullKey();
$._CustomEventStreamProvider__determineMouseWheelEventType = new $._CustomEventStreamProvider($.Element__determineMouseWheelEventType);
$.EventStreamProvider_touchenter = new $.EventStreamProvider("touchenter");
$.C_Object = new $.Object0();
$.EventStreamProvider_keydown = new $.EventStreamProvider("keydown");
$.EventStreamProvider_ended = new $.EventStreamProvider("ended");
$.EventStreamProvider_touchleave = new $.EventStreamProvider("touchleave");
$.C__LinkedHashTableHeadMarker = new $._LinkedHashTableHeadMarker();
$.EventStreamProvider_error = new $.EventStreamProvider("error");
$.JSDouble_methods = $.JSDouble.prototype;
$.EventStreamProvider_touchmove = new $.EventStreamProvider("touchmove");
$.EventStreamProvider_progress = new $.EventStreamProvider("progress");
$.EventStreamProvider_touchend = new $.EventStreamProvider("touchend");
$.EventStreamProvider_keyup = new $.EventStreamProvider("keyup");
$.Duration_0 = new $.Duration(0);
$.EventStreamProvider_touchcancel = new $.EventStreamProvider("touchcancel");
$.EventStreamProvider_mousedown = new $.EventStreamProvider("mousedown");
$.EventStreamProvider_keyUp = new $.EventStreamProvider0("keyUp");
$.C_NullThrownError = new $.NullThrownError();
$.EventStreamProvider_touchstart = new $.EventStreamProvider("touchstart");
$.JSInt_methods = $.JSInt.prototype;
$.C__Random = new $._Random();
$.EventStreamProvider_keypress = new $.EventStreamProvider("keypress");
$.EventStreamProvider_keyDown = new $.EventStreamProvider0("keyDown");
$.EventStreamProvider_canplaythrough = new $.EventStreamProvider("canplaythrough");
$.EventStreamProvider_load = new $.EventStreamProvider("load");
$.EventStreamProvider_mouseup = new $.EventStreamProvider("mouseup");
$.JSArray_methods = $.JSArray.prototype;
$.EventStreamProvider_mouseout = new $.EventStreamProvider("mouseout");
$.JSNull_methods = $.JSNull.prototype;
$.JSNumber_methods = $.JSNumber.prototype;
$.JSString_methods = $.JSString.prototype;
$.C_CloseToken = new $.CloseToken();
$.C__DelayedDone = new $._DelayedDone();
$.EventStreamProvider_mousemove = new $.EventStreamProvider("mousemove");
$.C__DeadEntry = new $._DeadEntry();
$.lazyPort = null;
$.ReceivePortImpl__nextFreeId = 1;
$.Primitives_hashCodeSeed = 0;
$._getTypeNameOf = null;
$.Device__isOpera = null;
$.Device__isWebKit = null;
$.resourceManager = null;
$.stage = null;
$.juggler = null;
$.Animation_FOREVER = -1;
$.Game_player = null;
$.Game_birdManager = null;
$.Game_robotManager = null;
$.Game_bulletManager = null;
$.Game_worldMap = null;
$.Game_displayWindow = null;
$.Game_keyboardHandler = null;
$.Game_touchManager = null;
$.Game_hudManager = null;
$.Grafix_resourceManager = null;
$.Sounds_resourceManager = null;
$.Statics_BACKGROUND_WIDTH = 1280;
$.WorldMap_fixedLeastHeight = 440;
$.DisplayObject__nextID = 0;
$._Touch__globalTouchPointID = 0;
$.Mouse__customCursor = "auto";
$.Mouse__isCursorHidden = false;
$.Mouse__dragSprite = null;
$.Mouse__dragSpriteCenter = null;
$.Mouse__dragSpriteBounds = null;
$.Multitouch__inputMode = "none";
$.$$dom_addEventListener$3$x = function(receiver, a0, a1, a2) {
  return $.getInterceptor$x(receiver).$$dom_addEventListener$3(receiver, a0, a1, a2);
};
$.$$dom_createEvent$1$x = function(receiver, a0) {
  return $.getInterceptor$x(receiver).$$dom_createEvent$1(receiver, a0);
};
$.$$dom_removeEventListener$3$x = function(receiver, a0, a1, a2) {
  return $.getInterceptor$x(receiver).$$dom_removeEventListener$3(receiver, a0, a1, a2);
};
$.$$dom_replaceChild$2$x = function(receiver, a0, a1) {
  return $.getInterceptor$x(receiver).$$dom_replaceChild$2(receiver, a0, a1);
};
$.$add$ns = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver + a0;
  return $.getInterceptor$ns(receiver).$add(receiver, a0);
};
$.$and$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return (receiver & a0) >>> 0;
  return $.getInterceptor$n(receiver).$and(receiver, a0);
};
$.$div$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver / a0;
  return $.getInterceptor$n(receiver).$div(receiver, a0);
};
$.$eq = function(receiver, a0) {
  if (receiver == null)
    return a0 == null;
  if (!(typeof receiver == "object"))
    return !(a0 == null) && receiver === a0;
  return $.getInterceptor(receiver).$eq(receiver, a0);
};
$.$ge$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver >= a0;
  return $.getInterceptor$n(receiver).$ge(receiver, a0);
};
$.$gt$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver > a0;
  return $.getInterceptor$n(receiver).$gt(receiver, a0);
};
$.$index$asx = function(receiver, a0) {
  if (receiver.constructor == Array || typeof receiver == "string")
    if (a0 >>> 0 === a0 && a0 < receiver.length)
      return receiver[a0];
  return $.getInterceptor$asx(receiver).$index(receiver, a0);
};
$.$indexSet$ax = function(receiver, a0, a1) {
  if (receiver.constructor == Array && !receiver.immutable$list && a0 >>> 0 === a0 && a0 < receiver.length)
    return receiver[a0] = a1;
  return $.getInterceptor$ax(receiver).$indexSet(receiver, a0, a1);
};
$.$le$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver <= a0;
  return $.getInterceptor$n(receiver).$le(receiver, a0);
};
$.$lt$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver < a0;
  return $.getInterceptor$n(receiver).$lt(receiver, a0);
};
$.$mul$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver * a0;
  return $.getInterceptor$n(receiver).$mul(receiver, a0);
};
$.$negate$n = function(receiver) {
  if (typeof receiver == "number")
    return -receiver;
  return $.getInterceptor$n(receiver).$negate(receiver);
};
$.$or$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return (receiver | a0) >>> 0;
  return $.getInterceptor$n(receiver).$or(receiver, a0);
};
$.$shl$n = function(receiver, a0) {
  return $.getInterceptor$n(receiver).$shl(receiver, a0);
};
$.$sub$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver - a0;
  return $.getInterceptor$n(receiver).$sub(receiver, a0);
};
$.$tdiv$n = function(receiver, a0) {
  return $.getInterceptor$n(receiver).$tdiv(receiver, a0);
};
$.$xor$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return (receiver ^ a0) >>> 0;
  return $.getInterceptor$n(receiver).$xor(receiver, a0);
};
$.abs$0$n = function(receiver) {
  return $.getInterceptor$n(receiver).abs$0(receiver);
};
$.add$1$ax = function(receiver, a0) {
  return $.getInterceptor$ax(receiver).add$1(receiver, a0);
};
$.addAll$1$ax = function(receiver, a0) {
  return $.getInterceptor$ax(receiver).addAll$1(receiver, a0);
};
$.allMatches$1$s = function(receiver, a0) {
  return $.getInterceptor$s(receiver).allMatches$1(receiver, a0);
};
$.append$1$x = function(receiver, a0) {
  return $.getInterceptor$x(receiver).append$1(receiver, a0);
};
$.ceil$0$nx = function(receiver) {
  return $.getInterceptor$nx(receiver).ceil$0(receiver);
};
$.clear$0$ax = function(receiver) {
  return $.getInterceptor$ax(receiver).clear$0(receiver);
};
$.clearRect$4$x = function(receiver, a0, a1, a2, a3) {
  return $.getInterceptor$x(receiver).clearRect$4(receiver, a0, a1, a2, a3);
};
$.contains$1$asx = function(receiver, a0) {
  return $.getInterceptor$asx(receiver).contains$1(receiver, a0);
};
$.contains$2$asx = function(receiver, a0, a1) {
  return $.getInterceptor$asx(receiver).contains$2(receiver, a0, a1);
};
$.decodeAudioData$3$x = function(receiver, a0, a1, a2) {
  return $.getInterceptor$x(receiver).decodeAudioData$3(receiver, a0, a1, a2);
};
$.dispatchEvent$1$x = function(receiver, a0) {
  return $.getInterceptor$x(receiver).dispatchEvent$1(receiver, a0);
};
$.drawImage$3$x = function(receiver, a0, a1, a2) {
  return $.getInterceptor$x(receiver).drawImage$3(receiver, a0, a1, a2);
};
$.drawImageScaledFromSource$9$x = function(receiver, a0, a1, a2, a3, a4, a5, a6, a7, a8) {
  return $.getInterceptor$x(receiver).drawImageScaledFromSource$9(receiver, a0, a1, a2, a3, a4, a5, a6, a7, a8);
};
$.elementAt$1$ax = function(receiver, a0) {
  return $.getInterceptor$ax(receiver).elementAt$1(receiver, a0);
};
$.fillRect$4$x = function(receiver, a0, a1, a2, a3) {
  return $.getInterceptor$x(receiver).fillRect$4(receiver, a0, a1, a2, a3);
};
$.fillText$3$x = function(receiver, a0, a1, a2) {
  return $.getInterceptor$x(receiver).fillText$3(receiver, a0, a1, a2);
};
$.forEach$1$ax = function(receiver, a0) {
  return $.getInterceptor$ax(receiver).forEach$1(receiver, a0);
};
$.get$$$dom_body$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$$$dom_body(receiver);
};
$.get$$$dom_children$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$$$dom_children(receiver);
};
$.get$body$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$body(receiver);
};
$.get$children$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$children(receiver);
};
$.get$contains$asx = function(receiver) {
  return $.getInterceptor$asx(receiver).get$contains(receiver);
};
$.get$context2d$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$context2d(receiver);
};
$.get$duration$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$duration(receiver);
};
$.get$ended$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$ended(receiver);
};
$.get$error$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$error(receiver);
};
$.get$hashCode$ = function(receiver) {
  return $.getInterceptor(receiver).get$hashCode(receiver);
};
$.get$height$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$height(receiver);
};
$.get$id$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$id(receiver);
};
$.get$isEmpty$asx = function(receiver) {
  return $.getInterceptor$asx(receiver).get$isEmpty(receiver);
};
$.get$isEven$i = function(receiver) {
  return $.getInterceptor$i(receiver).get$isEven(receiver);
};
$.get$isNaN$n = function(receiver) {
  return $.getInterceptor$n(receiver).get$isNaN(receiver);
};
$.get$iterator$ax = function(receiver) {
  return $.getInterceptor$ax(receiver).get$iterator(receiver);
};
$.get$keyCode$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$keyCode(receiver);
};
$.get$layer$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$layer(receiver);
};
$.get$length$asx = function(receiver) {
  return $.getInterceptor$asx(receiver).get$length(receiver);
};
$.get$navigator$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$navigator(receiver);
};
$.get$nodes$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$nodes(receiver);
};
$.get$offsetTop$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$offsetTop(receiver);
};
$.get$onEnded$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$onEnded(receiver);
};
$.get$onKeyDown$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$onKeyDown(receiver);
};
$.get$onKeyPress$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$onKeyPress(receiver);
};
$.get$onKeyUp$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$onKeyUp(receiver);
};
$.get$onMouseDown$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$onMouseDown(receiver);
};
$.get$onMouseMove$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$onMouseMove(receiver);
};
$.get$onMouseOut$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$onMouseOut(receiver);
};
$.get$onMouseUp$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$onMouseUp(receiver);
};
$.get$onMouseWheel$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$onMouseWheel(receiver);
};
$.get$onTouchCancel$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$onTouchCancel(receiver);
};
$.get$onTouchEnd$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$onTouchEnd(receiver);
};
$.get$onTouchEnter$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$onTouchEnter(receiver);
};
$.get$onTouchLeave$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$onTouchLeave(receiver);
};
$.get$onTouchMove$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$onTouchMove(receiver);
};
$.get$onTouchStart$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$onTouchStart(receiver);
};
$.get$parent$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$parent(receiver);
};
$.get$response$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$response(receiver);
};
$.get$responseText$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$responseText(receiver);
};
$.get$stream$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$stream(receiver);
};
$.get$style$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$style(receiver);
};
$.get$target$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$target(receiver);
};
$.get$width$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$width(receiver);
};
$.get$x$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$x(receiver);
};
$.get$y$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$y(receiver);
};
$.indexOf$2$asx = function(receiver, a0, a1) {
  return $.getInterceptor$asx(receiver).indexOf$2(receiver, a0, a1);
};
$.load$0$x = function(receiver) {
  return $.getInterceptor$x(receiver).load$0(receiver);
};
$.measureText$1$x = function(receiver, a0) {
  return $.getInterceptor$x(receiver).measureText$1(receiver, a0);
};
$.pause$0$x = function(receiver) {
  return $.getInterceptor$x(receiver).pause$0(receiver);
};
$.play$0$x = function(receiver) {
  return $.getInterceptor$x(receiver).play$0(receiver);
};
$.play$2$x = function(receiver, a0, a1) {
  return $.getInterceptor$x(receiver).play$2(receiver, a0, a1);
};
$.postMessage$1$x = function(receiver, a0) {
  return $.getInterceptor$x(receiver).postMessage$1(receiver, a0);
};
$.remove$0$ax = function(receiver) {
  return $.getInterceptor$ax(receiver).remove$0(receiver);
};
$.remove$1$ax = function(receiver, a0) {
  return $.getInterceptor$ax(receiver).remove$1(receiver, a0);
};
$.removeAt$1$ax = function(receiver, a0) {
  return $.getInterceptor$ax(receiver).removeAt$1(receiver, a0);
};
$.replaceWith$1$x = function(receiver, a0) {
  return $.getInterceptor$x(receiver).replaceWith$1(receiver, a0);
};
$.requestAnimationFrame$1$x = function(receiver, a0) {
  return $.getInterceptor$x(receiver).requestAnimationFrame$1(receiver, a0);
};
$.send$1$x = function(receiver, a0) {
  return $.getInterceptor$x(receiver).send$1(receiver, a0);
};
$.send$2$x = function(receiver, a0, a1) {
  return $.getInterceptor$x(receiver).send$2(receiver, a0, a1);
};
$.set$cursor$x = function(receiver, value) {
  return $.getInterceptor$x(receiver).set$cursor(receiver, value);
};
$.set$display$x = function(receiver, value) {
  return $.getInterceptor$x(receiver).set$display(receiver, value);
};
$.set$fillStyle$x = function(receiver, value) {
  return $.getInterceptor$x(receiver).set$fillStyle(receiver, value);
};
$.set$font$x = function(receiver, value) {
  return $.getInterceptor$x(receiver).set$font(receiver, value);
};
$.set$height$x = function(receiver, value) {
  return $.getInterceptor$x(receiver).set$height(receiver, value);
};
$.set$lineWidth$x = function(receiver, value) {
  return $.getInterceptor$x(receiver).set$lineWidth(receiver, value);
};
$.set$loop$x = function(receiver, value) {
  return $.getInterceptor$x(receiver).set$loop(receiver, value);
};
$.set$src$x = function(receiver, value) {
  return $.getInterceptor$x(receiver).set$src(receiver, value);
};
$.set$strokeStyle$x = function(receiver, value) {
  return $.getInterceptor$x(receiver).set$strokeStyle(receiver, value);
};
$.set$text$x = function(receiver, value) {
  return $.getInterceptor$x(receiver).set$text(receiver, value);
};
$.set$textAlign$x = function(receiver, value) {
  return $.getInterceptor$x(receiver).set$textAlign(receiver, value);
};
$.set$textBaseline$x = function(receiver, value) {
  return $.getInterceptor$x(receiver).set$textBaseline(receiver, value);
};
$.set$verticalAlign$x = function(receiver, value) {
  return $.getInterceptor$x(receiver).set$verticalAlign(receiver, value);
};
$.set$volume$x = function(receiver, value) {
  return $.getInterceptor$x(receiver).set$volume(receiver, value);
};
$.set$width$x = function(receiver, value) {
  return $.getInterceptor$x(receiver).set$width(receiver, value);
};
$.set$x$x = function(receiver, value) {
  return $.getInterceptor$x(receiver).set$x(receiver, value);
};
$.split$1$s = function(receiver, a0) {
  return $.getInterceptor$s(receiver).split$1(receiver, a0);
};
$.start$0$x = function(receiver) {
  return $.getInterceptor$x(receiver).start$0(receiver);
};
$.start$1$x = function(receiver, a0) {
  return $.getInterceptor$x(receiver).start$1(receiver, a0);
};
$.stop$0$x = function(receiver) {
  return $.getInterceptor$x(receiver).stop$0(receiver);
};
$.stop$1$x = function(receiver, a0) {
  return $.getInterceptor$x(receiver).stop$1(receiver, a0);
};
$.strokeRect$4$x = function(receiver, a0, a1, a2, a3) {
  return $.getInterceptor$x(receiver).strokeRect$4(receiver, a0, a1, a2, a3);
};
$.sublist$1$ax = function(receiver, a0) {
  return $.getInterceptor$ax(receiver).sublist$1(receiver, a0);
};
$.sublist$2$ax = function(receiver, a0, a1) {
  return $.getInterceptor$ax(receiver).sublist$2(receiver, a0, a1);
};
$.toDouble$0$n = function(receiver) {
  return $.getInterceptor$n(receiver).toDouble$0(receiver);
};
$.toInt$0$nx = function(receiver) {
  return $.getInterceptor$nx(receiver).toInt$0(receiver);
};
$.toLowerCase$0$s = function(receiver) {
  return $.getInterceptor$s(receiver).toLowerCase$0(receiver);
};
$.toString$0 = function(receiver) {
  return $.getInterceptor(receiver).toString$0(receiver);
};
$.toStringAsFixed$1$n = function(receiver, a0) {
  return $.getInterceptor$n(receiver).toStringAsFixed$1(receiver, a0);
};
$.union$1$x = function(receiver, a0) {
  return $.getInterceptor$x(receiver).union$1(receiver, a0);
};
$.getInterceptor = function(receiver) {
  if (typeof receiver == "number") {
    if (Math.floor(receiver) == receiver)
      return $.JSInt.prototype;
    return $.JSDouble.prototype;
  }
  if (typeof receiver == "string")
    return $.JSString.prototype;
  if (receiver == null)
    return $.JSNull.prototype;
  if (typeof receiver == "function")
    return $.JSFunction.prototype;
  if (typeof receiver == "boolean")
    return $.JSBool.prototype;
  if (receiver.constructor == Array)
    return $.JSArray.prototype;
  return receiver;
};
$.getInterceptor$asx = function(receiver) {
  if (typeof receiver == "string")
    return $.JSString.prototype;
  if (receiver == null)
    return void 0;
  if (receiver.constructor == Array)
    return $.JSArray.prototype;
  return receiver;
};
$.getInterceptor$ax = function(receiver) {
  if (receiver == null)
    return void 0;
  if (receiver.constructor == Array)
    return $.JSArray.prototype;
  return receiver;
};
$.getInterceptor$i = function(receiver) {
  if (typeof receiver == "number") {
    if (Math.floor(receiver) == receiver)
      return $.JSInt.prototype;
    return $.JSNumber.prototype;
  }
  if (receiver == null)
    return void 0;
  return receiver;
};
$.getInterceptor$n = function(receiver) {
  if (typeof receiver == "number")
    return $.JSNumber.prototype;
  if (receiver == null)
    return void 0;
  return receiver;
};
$.getInterceptor$ns = function(receiver) {
  if (typeof receiver == "number")
    return $.JSNumber.prototype;
  if (typeof receiver == "string")
    return $.JSString.prototype;
  if (receiver == null)
    return void 0;
  return receiver;
};
$.getInterceptor$nx = function(receiver) {
  if (typeof receiver == "number")
    return $.JSNumber.prototype;
  if (receiver == null)
    return void 0;
  return receiver;
};
$.getInterceptor$s = function(receiver) {
  if (typeof receiver == "string")
    return $.JSString.prototype;
  if (receiver == null)
    return void 0;
  return receiver;
};
$.getInterceptor$x = function(receiver) {
  if (receiver == null)
    return void 0;
  return receiver;
};
Isolate.$lazy($, "globalThis", "globalThis", "get$globalThis", function() {
  return $.IsolateNatives_computeGlobalThis();
});
Isolate.$lazy($, "globalWindow", "globalWindow", "get$globalWindow", function() {
  return $.get$globalThis().window;
});
Isolate.$lazy($, "globalWorker", "globalWorker", "get$globalWorker", function() {
  return $.get$globalThis().Worker;
});
Isolate.$lazy($, "globalPostMessageDefined", "globalPostMessageDefined", "get$globalPostMessageDefined", function() {
  return $.get$globalThis().postMessage !== (void 0);
});
Isolate.$lazy($, "thisScript", "IsolateNatives_thisScript", "get$IsolateNatives_thisScript", function() {
  return $.IsolateNatives_computeThisScript();
});
Isolate.$lazy($, "_runCallbacks", "Timer__runCallbacks", "get$Timer__runCallbacks", function() {
  return [];
});
Isolate.$lazy($, "_displayObjectListPool", "_displayObjectListPool", "get$_displayObjectListPool", function() {
  return $.ObjectPool$(new $.anon(), [$.List, $.DisplayObject]);
});
Isolate.$lazy($, "_identityMatrix", "_identityMatrix", "get$_identityMatrix", function() {
  return $.Matrix$fromIdentity();
});
Isolate.$lazy($, "enterFrame", "_EventStreamIndex_enterFrame", "get$_EventStreamIndex_enterFrame", function() {
  return $._EventStreamIndex$();
});
Isolate.$lazy($, "engine", "SoundMixer_engine", "get$SoundMixer_engine", function() {
  return $.SoundMixer__getEngine();
});
Isolate.$lazy($, "_audioContext", "SoundMixer__audioContext", "get$SoundMixer__audioContext", function() {
  return $.SoundMixer__getAudioContext();
});
Isolate.$lazy($, "_supportedTypes", "SoundMixer__supportedTypes", "get$SoundMixer__supportedTypes", function() {
  return $.SoundMixer__getSupportedTypes();
});
Isolate.$lazy($, "_mouseCursorChangedEvent", "Mouse__mouseCursorChangedEvent", "get$Mouse__mouseCursorChangedEvent", function() {
  return $.StreamController$(null, null, $.String);
});
Isolate.$lazy($, "_onMouseCursorChanged", "Mouse__onMouseCursorChanged", "get$Mouse__onMouseCursorChanged", function() {
  return $.get$stream$x($.get$Mouse__mouseCursorChangedEvent()).asBroadcastStream$0();
});
Isolate.$lazy($, "_supportsTouchEvents", "Multitouch__supportsTouchEvents", "get$Multitouch__supportsTouchEvents", function() {
  return $.TouchEvent_supported();
});
Isolate.$lazy($, "_inputModeChangedEvent", "Multitouch__inputModeChangedEvent", "get$Multitouch__inputModeChangedEvent", function() {
  return $.StreamController$(null, null, $.String);
});
Isolate.$lazy($, "_onInputModeChanged", "Multitouch__onInputModeChanged", "get$Multitouch__onInputModeChanged", function() {
  return $.get$stream$x($.get$Multitouch__inputModeChangedEvent()).asBroadcastStream$0();
});
Isolate.$lazy($, "_fontStyleMetrics", "_fontStyleMetrics", "get$_fontStyleMetrics", function() {
  return $.Map_Map($.String, $._FontStyleMetrics);
});
var $ = null;
Isolate = Isolate.$finishIsolateConstructor(Isolate);
var $ = new Isolate();
// Native classes
$.$defineNativeClass = function(cls, desc) {
  var fields = desc[''];
  var fields_array = fields ? fields.split(',') : [];
  for (var i = 0; i < fields_array.length; i++) {
    $.$generateAccessor(fields_array[i], desc);
  }
  var hasOwnProperty = Object.prototype.hasOwnProperty;
  for (var method in desc) {
    if (method) {
      if (hasOwnProperty.call(desc, method)) {
        $.dynamicFunction(method)[cls] = desc[method];
      }
    }
  }
};

(function(table) {
  for (var key in table)
    $.defineProperty(Object.prototype, key, table[key]);
})({
  $isJavaScriptIndexingBehavior: function() {
    return false;
  },
  $asJavaScriptIndexingBehavior: function() {
    return null;
  },
  $isCollection: function() {
    return false;
  },
  $asCollection: function() {
    return null;
  },
  $isList: function() {
    return false;
  },
  $asList: function() {
    return null;
  },
  $isElement: function() {
    return false;
  },
  $asElement: function() {
    return null;
  },
  $isEvent0: function() {
    return false;
  },
  $asEvent0: function() {
    return null;
  },
  $isNode: function() {
    return false;
  },
  $asNode: function() {
    return null;
  },
  $isRect: function() {
    return false;
  },
  $asRect: function() {
    return null;
  },
  toString$0: function(_) {
    return $.toStringForNativeObject(this);
  },
  get$hashCode: function(_) {
    return $.hashCodeForNativeObject(this);
  },
  $eq: function(_, a) {
    return this === a;
  }
});

$.$defineNativeClass("Worker", {
  get$id: function(receiver) {
    return receiver.id;
  },
  set$id: function(receiver, i) {
    receiver.id = i;
  },
  set$onmessage: function(receiver, f) {
    receiver.onmessage = f;
  },
  postMessage$1: function(receiver, msg) {
    receiver.postMessage(msg);
  },
  terminate$0: function(receiver) {
    receiver.terminate();
  }
});

$.$defineNativeClass("HTMLAnchorElement", {"": "name=,target%,type=",
  toString$0: function(receiver) {
    return receiver.toString();
  }
});

$.$defineNativeClass("HTMLAreaElement", {"": "target%"});

$.$defineNativeClass("HTMLBaseElement", {"": "target%"});

$.$defineNativeClass("Blob", {"": "type="});

$.$defineNativeClass("HTMLBodyElement", {
  get$onError: function(receiver) {
    return $.EventStreamProvider_error.forTarget$1(receiver);
  },
  get$onLoad: function(receiver) {
    return $.EventStreamProvider_load.forTarget$1(receiver);
  }
});

$.$defineNativeClass("HTMLButtonElement", {"": "name=,type="});

$.$defineNativeClass("HTMLCanvasElement", {"": "height%,width%",
  getContext$2: function(receiver, contextId, attrs) {
    var t1 = $ === attrs;
    if (t1)
      attrs = null;
    if (!t1)
      return receiver.getContext(contextId, $.convertDartToNative_Dictionary(attrs));
    return receiver.getContext(contextId);
  },
  getContext$1: function($receiver, contextId) {
    return this.getContext$2($receiver, contextId, $);
  },
  get$context2d: function(receiver) {
    return this.getContext$1(receiver, "2d");
  }
});

$.$defineNativeClass("CanvasRenderingContext2D", {"": "fillStyle},font},globalAlpha},lineWidth},strokeStyle},textAlign},textBaseline}",
  clearRect$4: function(receiver, x, y, width, height) {
    return receiver.clearRect(x,y,width,height);
  },
  fillRect$4: function(receiver, x, y, width, height) {
    return receiver.fillRect(x,y,width,height);
  },
  fillText$4: function(receiver, text, x, y, maxWidth) {
    return receiver.fillText(text,x,y,maxWidth);
  },
  fillText$3: function($receiver, text, x, y) {
    return $receiver.fillText(text, x, y);
  },
  measureText$1: function(receiver, text) {
    return receiver.measureText(text);
  },
  restore$0: function(receiver) {
    return receiver.restore();
  },
  save$0: function(receiver) {
    return receiver.save();
  },
  setTransform$6: function(receiver, m11, m12, m21, m22, dx, dy) {
    return receiver.setTransform(m11,m12,m21,m22,dx,dy);
  },
  strokeRect$5: function(receiver, x, y, width, height, lineWidth) {
    return receiver.strokeRect(x,y,width,height,lineWidth);
  },
  strokeRect$4: function($receiver, x, y, width, height) {
    return $receiver.strokeRect(x, y, width, height);
  },
  transform$6: function(receiver, m11, m12, m21, m22, dx, dy) {
    return receiver.transform(m11,m12,m21,m22,dx,dy);
  },
  drawImage$3: function(receiver, source, destX, destY) {
    return receiver.drawImage(source,destX,destY);
  },
  drawImageScaledFromSource$9: function(receiver, source, sourceX, sourceY, sourceWidth, sourceHeight, destX, destY, destWidth, destHeight) {
    return receiver.drawImage(source,sourceX,sourceY,sourceWidth,sourceHeight,destX,destY,destWidth,destHeight);
  }
});

$.$defineNativeClass("CharacterData", {"": "length="});

$.$defineNativeClass("CSSStyleDeclaration", {"": "length=",
  getPropertyValue$1: function(receiver, propertyName) {
    var propValue = receiver.getPropertyValue(propertyName);
    return propValue != null ? propValue : "";
  },
  setProperty$3: function(receiver, propertyName, value, priority) {
    var exception;
    try {
      receiver.setProperty(propertyName, value, priority);
      if (!!receiver.setAttribute)
        receiver.setAttribute(propertyName, value);
    } catch (exception) {
      $.unwrapException(exception);
    }

  },
  get$bottom: function(receiver) {
    return this.getPropertyValue$1(receiver, "bottom");
  },
  set$cursor: function(receiver, value) {
    this.setProperty$3(receiver, "cursor", value, "");
  },
  get$direction: function(receiver) {
    return this.getPropertyValue$1(receiver, "direction");
  },
  set$display: function(receiver, value) {
    this.setProperty$3(receiver, "display", value, "");
  },
  set$font: function(receiver, value) {
    this.setProperty$3(receiver, "font", value, "");
  },
  get$height: function(receiver) {
    return this.getPropertyValue$1(receiver, "height");
  },
  set$height: function(receiver, value) {
    this.setProperty$3(receiver, "height", value, "");
  },
  get$left: function(receiver) {
    return this.getPropertyValue$1(receiver, "left");
  },
  get$right: function(receiver) {
    return this.getPropertyValue$1(receiver, "right");
  },
  set$src: function(receiver, value) {
    this.setProperty$3(receiver, "src", value, "");
  },
  get$top: function(receiver) {
    return this.getPropertyValue$1(receiver, "top");
  },
  set$verticalAlign: function(receiver, value) {
    this.setProperty$3(receiver, "vertical-align", value, "");
  },
  get$width: function(receiver) {
    return this.getPropertyValue$1(receiver, "width");
  },
  set$width: function(receiver, value) {
    this.setProperty$3(receiver, "width", value, "");
  }
});

$.$defineNativeClass("Document", {"": "$$dom_body:body=",
  $$dom_createEvent$1: function(receiver, eventType) {
    if (Object.getPrototypeOf(this).hasOwnProperty("$$dom_createEvent$1")) {
      return receiver.createEvent(eventType);
    } else
      return Object.prototype.$$dom_createEvent$1.call(this, receiver, eventType);
  },
  get$onError: function(receiver) {
    return $.EventStreamProvider_error.forTarget$1(receiver);
  },
  get$onKeyDown: function(receiver) {
    return $.EventStreamProvider_keydown.forTarget$1(receiver);
  },
  get$onKeyUp: function(receiver) {
    return $.EventStreamProvider_keyup.forTarget$1(receiver);
  },
  get$onLoad: function(receiver) {
    return $.EventStreamProvider_load.forTarget$1(receiver);
  }
});

$.$defineNativeClass("DOMError", {"": "name="});

$.$defineNativeClass("DOMException", {
  get$name: function(receiver) {
    var errorName = receiver.name;
    if ($.Device_isWebKit() === true && errorName === "SECURITY_ERR")
      return "SecurityError";
    if ($.Device_isWebKit() === true && errorName === "SYNTAX_ERR")
      return "SyntaxError";
    return errorName;
  },
  toString$0: function(receiver) {
    return receiver.toString();
  }
});

$.$defineNativeClass("Element", {"": "$$dom_children:children=,id=,offsetTop=,style=",
  get$children: function(receiver) {
    if (Object.getPrototypeOf(this).hasOwnProperty("get$children")) {
      return $._ChildrenElementList$_wrap(receiver);
    } else
      return Object.prototype.get$children.call(this, receiver);
  },
  get$client: function(receiver) {
    return $.Rect$(receiver.clientLeft, receiver.clientTop, receiver.clientWidth, receiver.clientHeight);
  },
  get$onError: function(receiver) {
    if (Object.getPrototypeOf(this).hasOwnProperty("get$onError")) {
      return $.EventStreamProvider_error.forTarget$1(receiver);
    } else
      return Object.prototype.get$onError.call(this, receiver);
  },
  get$onKeyDown: function(receiver) {
    return $.EventStreamProvider_keydown.forTarget$1(receiver);
  },
  get$onKeyPress: function(receiver) {
    return $.EventStreamProvider_keypress.forTarget$1(receiver);
  },
  get$onKeyUp: function(receiver) {
    return $.EventStreamProvider_keyup.forTarget$1(receiver);
  },
  get$onLoad: function(receiver) {
    if (Object.getPrototypeOf(this).hasOwnProperty("get$onLoad")) {
      return $.EventStreamProvider_load.forTarget$1(receiver);
    } else
      return Object.prototype.get$onLoad.call(this, receiver);
  },
  get$onMouseDown: function(receiver) {
    return $.EventStreamProvider_mousedown.forTarget$1(receiver);
  },
  get$onMouseMove: function(receiver) {
    return $.EventStreamProvider_mousemove.forTarget$1(receiver);
  },
  get$onMouseOut: function(receiver) {
    return $.EventStreamProvider_mouseout.forTarget$1(receiver);
  },
  get$onMouseUp: function(receiver) {
    return $.EventStreamProvider_mouseup.forTarget$1(receiver);
  },
  get$onMouseWheel: function(receiver) {
    return $._CustomEventStreamProvider__determineMouseWheelEventType.forTarget$1(receiver);
  },
  get$onTouchCancel: function(receiver) {
    return $.EventStreamProvider_touchcancel.forTarget$1(receiver);
  },
  get$onTouchEnd: function(receiver) {
    return $.EventStreamProvider_touchend.forTarget$1(receiver);
  },
  get$onTouchEnter: function(receiver) {
    return $.EventStreamProvider_touchenter.forTarget$1(receiver);
  },
  get$onTouchLeave: function(receiver) {
    return $.EventStreamProvider_touchleave.forTarget$1(receiver);
  },
  get$onTouchMove: function(receiver) {
    return $.EventStreamProvider_touchmove.forTarget$1(receiver);
  },
  get$onTouchStart: function(receiver) {
    return $.EventStreamProvider_touchstart.forTarget$1(receiver);
  },
  $isElement: function() {
    return true;
  },
  $asElement: function() {
    return null;
  }
});

$.$defineNativeClass("HTMLEmbedElement", {"": "height%,name=,src},type=,width%"});

$.$defineNativeClass("Event", {"": "type=",
  get$target: function(receiver) {
    return $._convertNativeToDart_EventTarget(receiver.target);
  },
  preventDefault$0: function(receiver) {
    return receiver.preventDefault();
  },
  $isEvent0: function() {
    return true;
  },
  $asEvent0: function() {
    return null;
  }
});

$.$defineNativeClass("EventException", {"": "name=",
  toString$0: function(receiver) {
    return receiver.toString();
  }
});

$.$defineNativeClass("EventTarget", {
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    if (Object.getPrototypeOf(this).hasOwnProperty("$$dom_addEventListener$3")) {
      return receiver.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
    } else
      return Object.prototype.$$dom_addEventListener$3.call(this, receiver, type, listener, useCapture);
  },
  dispatchEvent$1: function(receiver, $event) {
    if (Object.getPrototypeOf(this).hasOwnProperty("dispatchEvent$1")) {
      return receiver.dispatchEvent($event);
    } else
      return Object.prototype.dispatchEvent$1.call(this, receiver, $event);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    if (Object.getPrototypeOf(this).hasOwnProperty("$$dom_removeEventListener$3")) {
      return receiver.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
    } else
      return Object.prototype.$$dom_removeEventListener$3.call(this, receiver, type, listener, useCapture);
  }
});

$.$defineNativeClass("HTMLFieldSetElement", {"": "name=,type="});

$.$defineNativeClass("File", {"": "name="});

$.$defineNativeClass("FileException", {"": "name=",
  toString$0: function(receiver) {
    return receiver.toString();
  }
});

$.$defineNativeClass("Float32Array", {
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    receiver[index] = value;
  },
  get$iterator: function(receiver) {
    return $.FixedSizeListIterator$(receiver);
  },
  contains$1: function(receiver, element) {
    return $.IterableMixinWorkaround_contains(receiver, element);
  },
  get$contains: function(receiver) {
    return new $.BoundClosure$i1(this, "contains$1", receiver);
  },
  forEach$1: function(receiver, f) {
    var t1;
    for (t1 = this.get$iterator(receiver); t1.moveNext$0();)
      f.call$1(t1.get$current());
    return;
  },
  get$isEmpty: function(receiver) {
    return this.get$length(receiver) === 0;
  },
  elementAt$1: function(receiver, index) {
    return receiver[index];
  },
  add$1: function(receiver, value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(receiver, iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  clear$0: function(receiver) {
    throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
  },
  indexOf$2: function(receiver, element, start) {
    return $.Lists_indexOf(receiver, element, start, this.get$length(receiver));
  },
  indexOf$1: function($receiver, element) {
    return this.indexOf$2($receiver, element, 0);
  },
  removeLast$0: function(receiver) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(receiver, object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  sublist$2: function(receiver, start, end) {
    if (end == null)
      end = this.get$length(receiver);
    return $.Lists_getRange(receiver, start, end, []);
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  $isList: function() {
    return true;
  },
  $asList: function() {
    return function () { return [$.$double]; };
  },
  $isCollection: function() {
    return true;
  },
  $asCollection: function() {
    return function () { return [$.$double]; };
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  },
  $asJavaScriptIndexingBehavior: function() {
    return null;
  }
});

$.$defineNativeClass("Float64Array", {
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    receiver[index] = value;
  },
  get$iterator: function(receiver) {
    return $.FixedSizeListIterator$(receiver);
  },
  contains$1: function(receiver, element) {
    return $.IterableMixinWorkaround_contains(receiver, element);
  },
  get$contains: function(receiver) {
    return new $.BoundClosure$i1(this, "contains$1", receiver);
  },
  forEach$1: function(receiver, f) {
    var t1;
    for (t1 = this.get$iterator(receiver); t1.moveNext$0();)
      f.call$1(t1.get$current());
    return;
  },
  get$isEmpty: function(receiver) {
    return this.get$length(receiver) === 0;
  },
  elementAt$1: function(receiver, index) {
    return receiver[index];
  },
  add$1: function(receiver, value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(receiver, iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  clear$0: function(receiver) {
    throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
  },
  indexOf$2: function(receiver, element, start) {
    return $.Lists_indexOf(receiver, element, start, this.get$length(receiver));
  },
  indexOf$1: function($receiver, element) {
    return this.indexOf$2($receiver, element, 0);
  },
  removeLast$0: function(receiver) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(receiver, object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  sublist$2: function(receiver, start, end) {
    if (end == null)
      end = this.get$length(receiver);
    return $.Lists_getRange(receiver, start, end, []);
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  $isList: function() {
    return true;
  },
  $asList: function() {
    return function () { return [$.$double]; };
  },
  $isCollection: function() {
    return true;
  },
  $asCollection: function() {
    return function () { return [$.$double]; };
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  },
  $asJavaScriptIndexingBehavior: function() {
    return null;
  }
});

$.$defineNativeClass("HTMLFormElement", {"": "length=,name=,target%"});

$.$defineNativeClass("HTMLCollection", {
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function(receiver) {
    return $.FixedSizeListIterator$(receiver);
  },
  contains$1: function(receiver, element) {
    return $.IterableMixinWorkaround_contains(receiver, element);
  },
  get$contains: function(receiver) {
    return new $.BoundClosure$i1(this, "contains$1", receiver);
  },
  forEach$1: function(receiver, f) {
    var t1;
    for (t1 = this.get$iterator(receiver); t1.moveNext$0();)
      f.call$1(t1.get$current());
    return;
  },
  get$isEmpty: function(receiver) {
    return this.get$length(receiver) === 0;
  },
  elementAt$1: function(receiver, index) {
    return receiver[index];
  },
  add$1: function(receiver, value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(receiver, iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  clear$0: function(receiver) {
    throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
  },
  indexOf$2: function(receiver, element, start) {
    return $.Lists_indexOf(receiver, element, start, this.get$length(receiver));
  },
  indexOf$1: function($receiver, element) {
    return this.indexOf$2($receiver, element, 0);
  },
  removeLast$0: function(receiver) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(receiver, object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  sublist$2: function(receiver, start, end) {
    if (end == null)
      end = this.get$length(receiver);
    return $.Lists_getRange(receiver, start, end, []);
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  $isList: function() {
    return true;
  },
  $asList: function() {
    return function () { return [$.Node]; };
  },
  $isCollection: function() {
    return true;
  },
  $asCollection: function() {
    return function () { return [$.Node]; };
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  },
  $asJavaScriptIndexingBehavior: function() {
    return null;
  }
});

$.$defineNativeClass("HTMLDocument", {
  get$body: function(receiver) {
    return $.get$$$dom_body$x($.document());
  }
});

$.$defineNativeClass("XMLHttpRequest", {"": "response=,responseText=",
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  dispatchEvent$1: function(receiver, evt) {
    return receiver.dispatchEvent(evt);
  },
  open$5$async$password$user: function(receiver, method, url, async, password, user) {
    return receiver.open(method,url,async,user,password);
  },
  open$3$async: function($receiver, method, url, async) {
    return $receiver.open(method, url, async);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  send$1: function(receiver, data) {
    return receiver.send(data);
  },
  get$onError: function(receiver) {
    return $.EventStreamProvider_error.forTarget$1(receiver);
  },
  get$onLoad: function(receiver) {
    return $.EventStreamProvider_load.forTarget$1(receiver);
  },
  get$onProgress: function(receiver) {
    return $.EventStreamProvider_progress.forTarget$1(receiver);
  }
});

$.$defineNativeClass("XMLHttpRequestException", {"": "name=",
  toString$0: function(receiver) {
    return receiver.toString();
  }
});

$.$defineNativeClass("XMLHttpRequestUpload", {
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  dispatchEvent$1: function(receiver, evt) {
    return receiver.dispatchEvent(evt);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  get$onError: function(receiver) {
    return $.EventStreamProvider_error.forTarget$1(receiver);
  },
  get$onLoad: function(receiver) {
    return $.EventStreamProvider_load.forTarget$1(receiver);
  }
});

$.$defineNativeClass("HTMLIFrameElement", {"": "height%,name=,src},width%"});

$.$defineNativeClass("HTMLImageElement", {"": "height%,naturalHeight=,naturalWidth=,src},width%,x=,y="});

$.$defineNativeClass("HTMLInputElement", {"": "height%,name=,src},type=,width%",
  $isElement: function() {
    return true;
  },
  $asElement: function() {
    return null;
  },
  $isNode: function() {
    return true;
  },
  $asNode: function() {
    return null;
  }
});

$.$defineNativeClass("Int16Array", {
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    receiver[index] = value;
  },
  get$iterator: function(receiver) {
    return $.FixedSizeListIterator$(receiver);
  },
  contains$1: function(receiver, element) {
    return $.IterableMixinWorkaround_contains(receiver, element);
  },
  get$contains: function(receiver) {
    return new $.BoundClosure$i1(this, "contains$1", receiver);
  },
  forEach$1: function(receiver, f) {
    var t1;
    for (t1 = this.get$iterator(receiver); t1.moveNext$0();)
      f.call$1(t1.get$current());
    return;
  },
  get$isEmpty: function(receiver) {
    return this.get$length(receiver) === 0;
  },
  elementAt$1: function(receiver, index) {
    return receiver[index];
  },
  add$1: function(receiver, value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(receiver, iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  clear$0: function(receiver) {
    throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
  },
  indexOf$2: function(receiver, element, start) {
    return $.Lists_indexOf(receiver, element, start, this.get$length(receiver));
  },
  indexOf$1: function($receiver, element) {
    return this.indexOf$2($receiver, element, 0);
  },
  removeLast$0: function(receiver) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(receiver, object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  sublist$2: function(receiver, start, end) {
    if (end == null)
      end = this.get$length(receiver);
    return $.Lists_getRange(receiver, start, end, []);
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  $isList: function() {
    return true;
  },
  $asList: function() {
    return function () { return [$.$int]; };
  },
  $isCollection: function() {
    return true;
  },
  $asCollection: function() {
    return function () { return [$.$int]; };
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  },
  $asJavaScriptIndexingBehavior: function() {
    return null;
  }
});

$.$defineNativeClass("Int32Array", {
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    receiver[index] = value;
  },
  get$iterator: function(receiver) {
    return $.FixedSizeListIterator$(receiver);
  },
  contains$1: function(receiver, element) {
    return $.IterableMixinWorkaround_contains(receiver, element);
  },
  get$contains: function(receiver) {
    return new $.BoundClosure$i1(this, "contains$1", receiver);
  },
  forEach$1: function(receiver, f) {
    var t1;
    for (t1 = this.get$iterator(receiver); t1.moveNext$0();)
      f.call$1(t1.get$current());
    return;
  },
  get$isEmpty: function(receiver) {
    return this.get$length(receiver) === 0;
  },
  elementAt$1: function(receiver, index) {
    return receiver[index];
  },
  add$1: function(receiver, value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(receiver, iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  clear$0: function(receiver) {
    throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
  },
  indexOf$2: function(receiver, element, start) {
    return $.Lists_indexOf(receiver, element, start, this.get$length(receiver));
  },
  indexOf$1: function($receiver, element) {
    return this.indexOf$2($receiver, element, 0);
  },
  removeLast$0: function(receiver) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(receiver, object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  sublist$2: function(receiver, start, end) {
    if (end == null)
      end = this.get$length(receiver);
    return $.Lists_getRange(receiver, start, end, []);
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  $isList: function() {
    return true;
  },
  $asList: function() {
    return function () { return [$.$int]; };
  },
  $isCollection: function() {
    return true;
  },
  $asCollection: function() {
    return function () { return [$.$int]; };
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  },
  $asJavaScriptIndexingBehavior: function() {
    return null;
  }
});

$.$defineNativeClass("Int8Array", {
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    receiver[index] = value;
  },
  get$iterator: function(receiver) {
    return $.FixedSizeListIterator$(receiver);
  },
  contains$1: function(receiver, element) {
    return $.IterableMixinWorkaround_contains(receiver, element);
  },
  get$contains: function(receiver) {
    return new $.BoundClosure$i1(this, "contains$1", receiver);
  },
  forEach$1: function(receiver, f) {
    var t1;
    for (t1 = this.get$iterator(receiver); t1.moveNext$0();)
      f.call$1(t1.get$current());
    return;
  },
  get$isEmpty: function(receiver) {
    return this.get$length(receiver) === 0;
  },
  elementAt$1: function(receiver, index) {
    return receiver[index];
  },
  add$1: function(receiver, value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(receiver, iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  clear$0: function(receiver) {
    throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
  },
  indexOf$2: function(receiver, element, start) {
    return $.Lists_indexOf(receiver, element, start, this.get$length(receiver));
  },
  indexOf$1: function($receiver, element) {
    return this.indexOf$2($receiver, element, 0);
  },
  removeLast$0: function(receiver) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(receiver, object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  sublist$2: function(receiver, start, end) {
    if (end == null)
      end = this.get$length(receiver);
    return $.Lists_getRange(receiver, start, end, []);
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  $isList: function() {
    return true;
  },
  $asList: function() {
    return function () { return [$.$int]; };
  },
  $isCollection: function() {
    return true;
  },
  $asCollection: function() {
    return function () { return [$.$int]; };
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  },
  $asJavaScriptIndexingBehavior: function() {
    return null;
  }
});

$.$defineNativeClass("KeyboardEvent", {"": "altKey=,ctrlKey=,keyLocation=,shiftKey=",
  get$keyCode: function(receiver) {
    return receiver.keyCode;
  },
  get$charCode: function(receiver) {
    return receiver.charCode;
  }
});

$.$defineNativeClass("HTMLKeygenElement", {"": "name=,type="});

$.$defineNativeClass("HTMLLIElement", {"": "type="});

$.$defineNativeClass("HTMLLinkElement", {"": "type="});

$.$defineNativeClass("LocalMediaStream", {
  stop$0: function(receiver) {
    return receiver.stop();
  }
});

$.$defineNativeClass("HTMLMapElement", {"": "name="});

$.$defineNativeClass("MediaController", {"": "duration=,volume}",
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  dispatchEvent$1: function(receiver, evt) {
    return receiver.dispatchEvent(evt);
  },
  pause$0: function(receiver) {
    return receiver.pause();
  },
  play$0: function(receiver) {
    return receiver.play();
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  }
});

$.$defineNativeClass("HTMLMediaElement", {"": "duration=,ended=,error=,loop},src},volume}",
  canPlayType$2: function(receiver, type, keySystem) {
    return receiver.canPlayType(type,keySystem);
  },
  load$0: function(receiver) {
    return receiver.load();
  },
  pause$0: function(receiver) {
    return receiver.pause();
  },
  play$0: function(receiver) {
    return receiver.play();
  },
  get$onCanPlayThrough: function(receiver) {
    return $.EventStreamProvider_canplaythrough.forTarget$1(receiver);
  },
  get$onEnded: function(receiver) {
    return $.EventStreamProvider_ended.forTarget$1(receiver);
  }
});

$.$defineNativeClass("MediaStream", {"": "ended=,id=",
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  dispatchEvent$1: function(receiver, $event) {
    return receiver.dispatchEvent($event);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  }
});

$.$defineNativeClass("MediaStreamEvent", {"": "stream="});

$.$defineNativeClass("HTMLMetaElement", {"": "name="});

$.$defineNativeClass("MouseEvent", {"": "altKey=,button=,ctrlKey=,shiftKey=",
  get$client: function(receiver) {
    return $.Point$0(receiver.clientX, receiver.clientY);
  }
});

$.$defineNativeClass("Node", {"": "parent:parentElement=,text:textContent}",
  get$nodes: function(receiver) {
    return $._ChildNodeListLazy$(receiver);
  },
  remove$0: function(receiver) {
    var t1 = receiver.parentNode;
    if (t1 != null)
      t1.removeChild(receiver);
  },
  replaceWith$1: function(receiver, otherNode) {
    var $parent, exception;
    try {
      $parent = receiver.parentNode;
      $.$$dom_replaceChild$2$x($parent, otherNode, receiver);
    } catch (exception) {
      $.unwrapException(exception);
    }

    return receiver;
  },
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  append$1: function(receiver, newChild) {
    return receiver.appendChild(newChild);
  },
  contains$1: function(receiver, other) {
    return receiver.contains(other);
  },
  get$contains: function(receiver) {
    return new $.BoundClosure$i1(this, "contains$1", receiver);
  },
  dispatchEvent$1: function(receiver, $event) {
    return receiver.dispatchEvent($event);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  $$dom_replaceChild$2: function(receiver, newChild, oldChild) {
    return receiver.replaceChild(newChild,oldChild);
  },
  $isNode: function() {
    return true;
  },
  $asNode: function() {
    return null;
  }
});

$.$defineNativeClass("NodeList", {
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function(receiver) {
    return $.FixedSizeListIterator$(receiver);
  },
  contains$1: function(receiver, element) {
    return $.IterableMixinWorkaround_contains(receiver, element);
  },
  get$contains: function(receiver) {
    return new $.BoundClosure$i1(this, "contains$1", receiver);
  },
  forEach$1: function(receiver, f) {
    var t1;
    for (t1 = this.get$iterator(receiver); t1.moveNext$0();)
      f.call$1(t1.get$current());
    return;
  },
  get$isEmpty: function(receiver) {
    return this.get$length(receiver) === 0;
  },
  elementAt$1: function(receiver, index) {
    return receiver[index];
  },
  add$1: function(receiver, value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(receiver, iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  clear$0: function(receiver) {
    throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
  },
  indexOf$2: function(receiver, element, start) {
    return $.Lists_indexOf(receiver, element, start, this.get$length(receiver));
  },
  indexOf$1: function($receiver, element) {
    return this.indexOf$2($receiver, element, 0);
  },
  removeLast$0: function(receiver) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(receiver, object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  sublist$2: function(receiver, start, end) {
    if (end == null)
      end = this.get$length(receiver);
    return $.Lists_getRange(receiver, start, end, []);
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  $isList: function() {
    return true;
  },
  $asList: function() {
    return function () { return [$.Node]; };
  },
  $isCollection: function() {
    return true;
  },
  $asCollection: function() {
    return function () { return [$.Node]; };
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  },
  $asJavaScriptIndexingBehavior: function() {
    return null;
  }
});

$.$defineNativeClass("HTMLOListElement", {"": "type=",
  start$0: function($receiver) {
    return this.start.call$0();
  }
});

$.$defineNativeClass("HTMLObjectElement", {"": "height%,name=,type=,width%"});

$.$defineNativeClass("HTMLOutputElement", {"": "name=,type="});

$.$defineNativeClass("HTMLParamElement", {"": "name="});

$.$defineNativeClass("ProcessingInstruction", {"": "target="});

$.$defineNativeClass("RangeException", {"": "name=",
  toString$0: function(receiver) {
    return receiver.toString();
  }
});

$.$defineNativeClass("HTMLScriptElement", {"": "src},type="});

$.$defineNativeClass("HTMLSelectElement", {"": "length=,name=,type="});

$.$defineNativeClass("HTMLSourceElement", {"": "src},type="});

$.$defineNativeClass("SpeechRecognitionError", {"": "error="});

$.$defineNativeClass("HTMLStyleElement", {"": "type="});

$.$defineNativeClass("HTMLTextAreaElement", {"": "name=,type="});

$.$defineNativeClass("TextMetrics", {"": "width="});

$.$defineNativeClass("TextTrack", {"": "kind=",
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  dispatchEvent$1: function(receiver, evt) {
    return receiver.dispatchEvent(evt);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  }
});

$.$defineNativeClass("TextTrackList", {
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function(receiver) {
    return $.FixedSizeListIterator$(receiver);
  },
  contains$1: function(receiver, element) {
    return $.IterableMixinWorkaround_contains(receiver, element);
  },
  get$contains: function(receiver) {
    return new $.BoundClosure$i1(this, "contains$1", receiver);
  },
  forEach$1: function(receiver, f) {
    var t1;
    for (t1 = this.get$iterator(receiver); t1.moveNext$0();)
      f.call$1(t1.get$current());
    return;
  },
  get$isEmpty: function(receiver) {
    return this.get$length(receiver) === 0;
  },
  elementAt$1: function(receiver, index) {
    return receiver[index];
  },
  add$1: function(receiver, value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(receiver, iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  clear$0: function(receiver) {
    throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
  },
  indexOf$2: function(receiver, element, start) {
    return $.Lists_indexOf(receiver, element, start, this.get$length(receiver));
  },
  indexOf$1: function($receiver, element) {
    return this.indexOf$2($receiver, element, 0);
  },
  removeLast$0: function(receiver) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(receiver, object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  sublist$2: function(receiver, start, end) {
    if (end == null)
      end = this.get$length(receiver);
    return $.Lists_getRange(receiver, start, end, []);
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  dispatchEvent$1: function(receiver, evt) {
    return receiver.dispatchEvent(evt);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  $isList: function() {
    return true;
  },
  $asList: function() {
    return function () { return [$.TextTrack]; };
  },
  $isCollection: function() {
    return true;
  },
  $asCollection: function() {
    return function () { return [$.TextTrack]; };
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  },
  $asJavaScriptIndexingBehavior: function() {
    return null;
  }
});

$.$defineNativeClass("TimeRanges", {"": "length="});

$.$defineNativeClass("Touch", {"": "identifier=",
  get$target: function(receiver) {
    return $._convertNativeToDart_EventTarget(receiver.target);
  },
  get$client: function(receiver) {
    return $.Point$0(receiver.clientX, receiver.clientY);
  }
});

$.$defineNativeClass("TouchEvent", {"": "altKey=,changedTouches=,ctrlKey=,shiftKey="});

$.$defineNativeClass("TouchList", {
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function(receiver) {
    return $.FixedSizeListIterator$(receiver);
  },
  contains$1: function(receiver, element) {
    return $.IterableMixinWorkaround_contains(receiver, element);
  },
  get$contains: function(receiver) {
    return new $.BoundClosure$i1(this, "contains$1", receiver);
  },
  forEach$1: function(receiver, f) {
    var t1;
    for (t1 = this.get$iterator(receiver); t1.moveNext$0();)
      f.call$1(t1.get$current());
    return;
  },
  get$isEmpty: function(receiver) {
    return this.get$length(receiver) === 0;
  },
  elementAt$1: function(receiver, index) {
    return receiver[index];
  },
  add$1: function(receiver, value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(receiver, iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  clear$0: function(receiver) {
    throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
  },
  indexOf$2: function(receiver, element, start) {
    return $.Lists_indexOf(receiver, element, start, this.get$length(receiver));
  },
  indexOf$1: function($receiver, element) {
    return this.indexOf$2($receiver, element, 0);
  },
  removeLast$0: function(receiver) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(receiver, object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  sublist$2: function(receiver, start, end) {
    if (end == null)
      end = this.get$length(receiver);
    return $.Lists_getRange(receiver, start, end, []);
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  $isList: function() {
    return true;
  },
  $asList: function() {
    return function () { return [$.Touch]; };
  },
  $isCollection: function() {
    return true;
  },
  $asCollection: function() {
    return function () { return [$.Touch]; };
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  },
  $asJavaScriptIndexingBehavior: function() {
    return null;
  }
});

$.$defineNativeClass("HTMLTrackElement", {"": "kind=,src}"});

$.$defineNativeClass("UIEvent", {
  get$layer: function(receiver) {
    return $.Point$0(receiver.layerX, receiver.layerY);
  }
});

$.$defineNativeClass("Uint16Array", {
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    receiver[index] = value;
  },
  get$iterator: function(receiver) {
    return $.FixedSizeListIterator$(receiver);
  },
  contains$1: function(receiver, element) {
    return $.IterableMixinWorkaround_contains(receiver, element);
  },
  get$contains: function(receiver) {
    return new $.BoundClosure$i1(this, "contains$1", receiver);
  },
  forEach$1: function(receiver, f) {
    var t1;
    for (t1 = this.get$iterator(receiver); t1.moveNext$0();)
      f.call$1(t1.get$current());
    return;
  },
  get$isEmpty: function(receiver) {
    return this.get$length(receiver) === 0;
  },
  elementAt$1: function(receiver, index) {
    return receiver[index];
  },
  add$1: function(receiver, value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(receiver, iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  clear$0: function(receiver) {
    throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
  },
  indexOf$2: function(receiver, element, start) {
    return $.Lists_indexOf(receiver, element, start, this.get$length(receiver));
  },
  indexOf$1: function($receiver, element) {
    return this.indexOf$2($receiver, element, 0);
  },
  removeLast$0: function(receiver) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(receiver, object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  sublist$2: function(receiver, start, end) {
    if (end == null)
      end = this.get$length(receiver);
    return $.Lists_getRange(receiver, start, end, []);
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  $isList: function() {
    return true;
  },
  $asList: function() {
    return function () { return [$.$int]; };
  },
  $isCollection: function() {
    return true;
  },
  $asCollection: function() {
    return function () { return [$.$int]; };
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  },
  $asJavaScriptIndexingBehavior: function() {
    return null;
  }
});

$.$defineNativeClass("Uint32Array", {
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    receiver[index] = value;
  },
  get$iterator: function(receiver) {
    return $.FixedSizeListIterator$(receiver);
  },
  contains$1: function(receiver, element) {
    return $.IterableMixinWorkaround_contains(receiver, element);
  },
  get$contains: function(receiver) {
    return new $.BoundClosure$i1(this, "contains$1", receiver);
  },
  forEach$1: function(receiver, f) {
    var t1;
    for (t1 = this.get$iterator(receiver); t1.moveNext$0();)
      f.call$1(t1.get$current());
    return;
  },
  get$isEmpty: function(receiver) {
    return this.get$length(receiver) === 0;
  },
  elementAt$1: function(receiver, index) {
    return receiver[index];
  },
  add$1: function(receiver, value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(receiver, iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  clear$0: function(receiver) {
    throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
  },
  indexOf$2: function(receiver, element, start) {
    return $.Lists_indexOf(receiver, element, start, this.get$length(receiver));
  },
  indexOf$1: function($receiver, element) {
    return this.indexOf$2($receiver, element, 0);
  },
  removeLast$0: function(receiver) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(receiver, object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  sublist$2: function(receiver, start, end) {
    if (end == null)
      end = this.get$length(receiver);
    return $.Lists_getRange(receiver, start, end, []);
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  $isList: function() {
    return true;
  },
  $asList: function() {
    return function () { return [$.$int]; };
  },
  $isCollection: function() {
    return true;
  },
  $asCollection: function() {
    return function () { return [$.$int]; };
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  },
  $asJavaScriptIndexingBehavior: function() {
    return null;
  }
});

$.$defineNativeClass("Uint8Array", {
  get$length: function(receiver) {
    if (Object.getPrototypeOf(this).hasOwnProperty("get$length")) {
      return receiver.length;
    } else
      return Object.prototype.get$length.call(this, receiver);
  },
  $index: function(receiver, index) {
    if (Object.getPrototypeOf(this).hasOwnProperty("$index")) {
      return receiver[index];
    } else
      return Object.prototype.$index.call(this, receiver, index);
  },
  $indexSet: function(receiver, index, value) {
    if (Object.getPrototypeOf(this).hasOwnProperty("$indexSet")) {
      receiver[index] = value;
    } else
      return Object.prototype.$indexSet.call(this, receiver, index, value);
  },
  get$iterator: function(receiver) {
    if (Object.getPrototypeOf(this).hasOwnProperty("get$iterator")) {
      return $.FixedSizeListIterator$(receiver);
    } else
      return Object.prototype.get$iterator.call(this, receiver);
  },
  contains$1: function(receiver, element) {
    if (Object.getPrototypeOf(this).hasOwnProperty("contains$1")) {
      return $.IterableMixinWorkaround_contains(receiver, element);
    } else
      return Object.prototype.contains$1.call(this, receiver, element);
  },
  get$contains: function(receiver) {
    return new $.BoundClosure$i1(this, "contains$1", receiver);
  },
  forEach$1: function(receiver, f) {
    if (Object.getPrototypeOf(this).hasOwnProperty("forEach$1")) {
      var t1;
      for (t1 = this.get$iterator(receiver); t1.moveNext$0();)
        f.call$1(t1.get$current());
      return;
    } else
      return Object.prototype.forEach$1.call(this, receiver, f);
  },
  get$isEmpty: function(receiver) {
    if (Object.getPrototypeOf(this).hasOwnProperty("get$isEmpty")) {
      return this.get$length(receiver) === 0;
    } else
      return Object.prototype.get$isEmpty.call(this, receiver);
  },
  elementAt$1: function(receiver, index) {
    if (Object.getPrototypeOf(this).hasOwnProperty("elementAt$1")) {
      return this.$index(receiver, index);
    } else
      return Object.prototype.elementAt$1.call(this, receiver, index);
  },
  add$1: function(receiver, value) {
    if (Object.getPrototypeOf(this).hasOwnProperty("add$1")) {
      throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
    } else
      return Object.prototype.add$1.call(this, receiver, value);
  },
  addAll$1: function(receiver, iterable) {
    if (Object.getPrototypeOf(this).hasOwnProperty("addAll$1")) {
      throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
    } else
      return Object.prototype.addAll$1.call(this, receiver, iterable);
  },
  clear$0: function(receiver) {
    if (Object.getPrototypeOf(this).hasOwnProperty("clear$0")) {
      throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
    } else
      return Object.prototype.clear$0.call(this, receiver);
  },
  indexOf$2: function(receiver, element, start) {
    if (Object.getPrototypeOf(this).hasOwnProperty("indexOf$2")) {
      return $.Lists_indexOf(receiver, element, start, this.get$length(receiver));
    } else
      return Object.prototype.indexOf$2.call(this, receiver, element, start);
  },
  indexOf$1: function($receiver, element) {
    return this.indexOf$2($receiver, element, 0);
  },
  removeLast$0: function(receiver) {
    if (Object.getPrototypeOf(this).hasOwnProperty("removeLast$0")) {
      throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
    } else
      return Object.prototype.removeLast$0.call(this, receiver);
  },
  remove$1: function(receiver, object) {
    if (Object.getPrototypeOf(this).hasOwnProperty("remove$1")) {
      throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
    } else
      return Object.prototype.remove$1.call(this, receiver, object);
  },
  sublist$2: function(receiver, start, end) {
    if (Object.getPrototypeOf(this).hasOwnProperty("sublist$2")) {
      if (end == null)
        end = this.get$length(receiver);
      return $.Lists_getRange(receiver, start, end, []);
    } else
      return Object.prototype.sublist$2.call(this, receiver, start, end);
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  $isList: function() {
    return true;
  },
  $asList: function() {
    return function () { return [$.$int]; };
  },
  $isCollection: function() {
    return true;
  },
  $asCollection: function() {
    return function () { return [$.$int]; };
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  },
  $asJavaScriptIndexingBehavior: function() {
    return null;
  }
});

$.$defineNativeClass("Uint8ClampedArray", {
  $index: function(receiver, index) {
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    receiver[index] = value;
  },
  get$iterator: function(receiver) {
    return $.FixedSizeListIterator$(receiver);
  },
  contains$1: function(receiver, element) {
    return $.IterableMixinWorkaround_contains(receiver, element);
  },
  get$contains: function(receiver) {
    return new $.BoundClosure$i1(this, "contains$1", receiver);
  },
  forEach$1: function(receiver, f) {
    var t1;
    for (t1 = this.get$iterator(receiver); t1.moveNext$0();)
      f.call$1(t1.get$current());
    return;
  },
  get$isEmpty: function(receiver) {
    return this.get$length(receiver) === 0;
  },
  elementAt$1: function(receiver, index) {
    return receiver[index];
  },
  add$1: function(receiver, value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(receiver, iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  clear$0: function(receiver) {
    throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
  },
  indexOf$2: function(receiver, element, start) {
    return $.Lists_indexOf(receiver, element, start, this.get$length(receiver));
  },
  indexOf$1: function($receiver, element) {
    return this.indexOf$2($receiver, element, 0);
  },
  removeLast$0: function(receiver) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(receiver, object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  sublist$2: function(receiver, start, end) {
    if (end == null)
      end = this.get$length(receiver);
    return $.Lists_getRange(receiver, start, end, []);
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  $isList: function() {
    return true;
  },
  $asList: function() {
    return function () { return [$.$int]; };
  },
  $isCollection: function() {
    return true;
  },
  $asCollection: function() {
    return function () { return [$.$int]; };
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  },
  $asJavaScriptIndexingBehavior: function() {
    return null;
  }
});

$.$defineNativeClass("HTMLVideoElement", {"": "height%,width%"});

$.$defineNativeClass("WheelEvent", {
  get$deltaY: function(receiver) {
    var detail;
    if (receiver.deltaY !== undefined)
      return this.get$_liblib$_deltaY(receiver);
    else if (receiver.wheelDelta !== undefined)
      return this.get$_wheelDelta(receiver);
    else if (receiver.detail !== undefined) {
      if (receiver.axis == MouseScrollEvent.VERTICAL_AXIS) {
        detail = this.get$_detail(receiver);
        if (detail < 100)
          return detail * 40;
        return detail;
      }
      return 0;
    }
    throw $.$$throw($.UnsupportedError$("deltaY is not supported"));
  },
  get$deltaX: function(receiver) {
    var detail;
    if (receiver.deltaX !== undefined)
      return this.get$_liblib$_deltaX(receiver);
    else if (receiver.wheelDeltaX !== undefined)
      return this.get$_wheelDeltaX(receiver);
    else if (receiver.detail !== undefined) {
      if (receiver.axis !== undefined && receiver.axis == MouseScrollEvent.HORIZONTAL_AXIS) {
        detail = this.get$_detail(receiver);
        if (detail < 100)
          return detail * 40;
        return detail;
      }
      return 0;
    }
    throw $.$$throw($.UnsupportedError$("deltaX is not supported"));
  },
  get$_liblib$_deltaY: function(receiver) {
    return receiver.deltaY;
  },
  get$_liblib$_deltaX: function(receiver) {
    return receiver.deltaX;
  },
  get$_wheelDelta: function(receiver) {
    return receiver.wheelDelta;
  },
  get$_wheelDeltaX: function(receiver) {
    return receiver.wheelDeltaX;
  },
  get$_detail: function(receiver) {
    return receiver.detail;
  }
});

$.$defineNativeClass("DOMWindow", {"": "name=,navigator=",
  requestAnimationFrame$1: function(receiver, callback) {
    this._ensureRequestAnimationFrame$0(receiver);
    return this._requestAnimationFrame$1(receiver, callback);
  },
  _requestAnimationFrame$1: function(receiver, callback) {
    return receiver.requestAnimationFrame($.convertDartClosureToJS(callback, 1));
  },
  _ensureRequestAnimationFrame$0: function(receiver) {
    if (!!(receiver.requestAnimationFrame && receiver.cancelAnimationFrame))
      return;
      (function($this) {
   var vendors = ['ms', 'moz', 'webkit', 'o'];
   for (var i = 0; i < vendors.length && !$this.requestAnimationFrame; ++i) {
     $this.requestAnimationFrame = $this[vendors[i] + 'RequestAnimationFrame'];
     $this.cancelAnimationFrame =
         $this[vendors[i]+'CancelAnimationFrame'] ||
         $this[vendors[i]+'CancelRequestAnimationFrame'];
   }
   if ($this.requestAnimationFrame && $this.cancelAnimationFrame) return;
   $this.requestAnimationFrame = function(callback) {
      return window.setTimeout(function() {
        callback(Date.now());
      }, 16 /* 16ms ~= 60fps */);
   };
   $this.cancelAnimationFrame = function(id) { clearTimeout(id); }
  })(receiver);
  },
  get$parent: function(receiver) {
    return $._convertNativeToDart_Window(receiver.parent);
  },
  get$top: function(receiver) {
    return $._convertNativeToDart_Window(receiver.top);
  },
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  dispatchEvent$1: function(receiver, evt) {
    return receiver.dispatchEvent(evt);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  stop$0: function(receiver) {
    return receiver.stop();
  },
  get$onError: function(receiver) {
    return $.EventStreamProvider_error.forTarget$1(receiver);
  },
  get$onKeyDown: function(receiver) {
    return $.EventStreamProvider_keydown.forTarget$1(receiver);
  },
  get$onKeyUp: function(receiver) {
    return $.EventStreamProvider_keyup.forTarget$1(receiver);
  },
  get$onLoad: function(receiver) {
    return $.EventStreamProvider_load.forTarget$1(receiver);
  }
});

$.$defineNativeClass("XPathException", {"": "name=",
  toString$0: function(receiver) {
    return receiver.toString();
  }
});

$.$defineNativeClass("ClientRect", {"": "bottom=,height=,left=,right=,top=,width=",
  toString$0: function(receiver) {
    return "(" + $.S(receiver.left) + ", " + $.S(receiver.top) + ", " + $.S(receiver.width) + ", " + $.S(receiver.height) + ")";
  },
  $eq: function(receiver, other) {
    var t1, t2, t3;
    if (other == null)
      return false;
    if (!(typeof other === "object" && other !== null && other.$isRect()))
      return false;
    t1 = receiver.left;
    t2 = $.getInterceptor$x(other);
    t3 = t2.get$left(other);
    if (t1 == null ? t3 == null : t1 === t3) {
      t1 = receiver.top;
      t3 = t2.get$top(other);
      if (t1 == null ? t3 == null : t1 === t3) {
        t1 = receiver.width;
        t3 = t2.get$width(other);
        if (t1 == null ? t3 == null : t1 === t3) {
          t1 = receiver.height;
          t2 = t2.get$height(other);
          t2 = t1 == null ? t2 == null : t1 === t2;
          t1 = t2;
        } else
          t1 = false;
      } else
        t1 = false;
    } else
      t1 = false;
    return t1;
  },
  union$1: function(receiver, rect) {
    var t1, right, bottom, left, $top;
    t1 = $.getInterceptor$x(rect);
    right = $.max($.$add$ns(receiver.left, receiver.width), $.$add$ns(t1.get$left(rect), t1.get$width(rect)));
    bottom = $.max($.$add$ns(receiver.top, receiver.height), $.$add$ns(t1.get$top(rect), t1.get$height(rect)));
    left = $.min(receiver.left, t1.get$left(rect));
    $top = $.min(receiver.top, t1.get$top(rect));
    return $.Rect$(left, $top, right - left, bottom - $top);
  },
  ceil$0: function(receiver) {
    return $.Rect$($.ceil$0$nx(receiver.left), $.ceil$0$nx(receiver.top), $.ceil$0$nx(receiver.width), $.ceil$0$nx(receiver.height));
  },
  toInt$0: function(receiver) {
    return $.Rect$($.toInt$0$nx(receiver.left), $.toInt$0$nx(receiver.top), $.toInt$0$nx(receiver.width), $.toInt$0$nx(receiver.height));
  },
  $isRect: function() {
    return true;
  },
  $asRect: function() {
    return null;
  }
});

$.$defineNativeClass("NamedNodeMap", {
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function(receiver) {
    return $.FixedSizeListIterator$(receiver);
  },
  contains$1: function(receiver, element) {
    return $.IterableMixinWorkaround_contains(receiver, element);
  },
  get$contains: function(receiver) {
    return new $.BoundClosure$i1(this, "contains$1", receiver);
  },
  forEach$1: function(receiver, f) {
    var t1;
    for (t1 = this.get$iterator(receiver); t1.moveNext$0();)
      f.call$1(t1.get$current());
    return;
  },
  get$isEmpty: function(receiver) {
    return this.get$length(receiver) === 0;
  },
  elementAt$1: function(receiver, index) {
    return receiver[index];
  },
  add$1: function(receiver, value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(receiver, iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  clear$0: function(receiver) {
    throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
  },
  indexOf$2: function(receiver, element, start) {
    return $.Lists_indexOf(receiver, element, start, this.get$length(receiver));
  },
  indexOf$1: function($receiver, element) {
    return this.indexOf$2($receiver, element, 0);
  },
  removeLast$0: function(receiver) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(receiver, object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  sublist$2: function(receiver, start, end) {
    if (end == null)
      end = this.get$length(receiver);
    return $.Lists_getRange(receiver, start, end, []);
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  $isList: function() {
    return true;
  },
  $asList: function() {
    return function () { return [$.Node]; };
  },
  $isCollection: function() {
    return true;
  },
  $asCollection: function() {
    return function () { return [$.Node]; };
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  },
  $asJavaScriptIndexingBehavior: function() {
    return null;
  }
});

$.$defineNativeClass("WebKitTransitionEvent", {
  $isEvent0: function() {
    return true;
  },
  $asEvent0: function() {
    return null;
  }
});

$.$defineNativeClass("SVGAElement", {"": "target="});

$.$defineNativeClass("SVGFEBlendElement", {"": "height=,width=,x=,y="});

$.$defineNativeClass("SVGFEColorMatrixElement", {"": "type=,height=,width=,x=,y="});

$.$defineNativeClass("SVGFEComponentTransferElement", {"": "height=,width=,x=,y="});

$.$defineNativeClass("SVGFECompositeElement", {"": "height=,width=,x=,y="});

$.$defineNativeClass("SVGFEConvolveMatrixElement", {"": "height=,width=,x=,y="});

$.$defineNativeClass("SVGFEDiffuseLightingElement", {"": "height=,width=,x=,y="});

$.$defineNativeClass("SVGFEDisplacementMapElement", {"": "height=,width=,x=,y="});

$.$defineNativeClass("SVGFEFloodElement", {"": "height=,width=,x=,y="});

$.$defineNativeClass("SVGFEGaussianBlurElement", {"": "height=,width=,x=,y="});

$.$defineNativeClass("SVGFEImageElement", {"": "height=,width=,x=,y="});

$.$defineNativeClass("SVGFEMergeElement", {"": "height=,width=,x=,y="});

$.$defineNativeClass("SVGFEMorphologyElement", {"": "height=,width=,x=,y="});

$.$defineNativeClass("SVGFEOffsetElement", {"": "height=,width=,x=,y="});

$.$defineNativeClass("SVGFEPointLightElement", {"": "x=,y="});

$.$defineNativeClass("SVGFESpecularLightingElement", {"": "height=,width=,x=,y="});

$.$defineNativeClass("SVGFESpotLightElement", {"": "x=,y="});

$.$defineNativeClass("SVGFETileElement", {"": "height=,width=,x=,y="});

$.$defineNativeClass("SVGFETurbulenceElement", {"": "type=,height=,width=,x=,y="});

$.$defineNativeClass("SVGFilterElement", {"": "height=,width=,x=,y="});

$.$defineNativeClass("SVGForeignObjectElement", {"": "height=,width=,x=,y="});

$.$defineNativeClass("SVGImageElement", {"": "height=,width=,x=,y="});

$.$defineNativeClass("SVGMaskElement", {"": "height=,width=,x=,y="});

$.$defineNativeClass("SVGPatternElement", {"": "height=,width=,x=,y="});

$.$defineNativeClass("SVGRectElement", {"": "height=,width=,x=,y="});

$.$defineNativeClass("SVGScriptElement", {"": "type="});

$.$defineNativeClass("SVGStyleElement", {"": "type="});

$.$defineNativeClass("SVGDocument", {
  $$dom_createEvent$1: function(receiver, eventType) {
    return receiver.createEvent(eventType);
  }
});

$.$defineNativeClass("SVGElement", {
  get$children: function(receiver) {
    return $.FilteredElementList$(receiver);
  },
  get$$$dom_children: function(receiver) {
    throw $.$$throw($.UnsupportedError$("Cannot get dom_children on SVG."));
  },
  get$id: function(receiver) {
    return receiver.id;
  }
});

$.$defineNativeClass("SVGException", {"": "name=",
  toString$0: function(receiver) {
    return receiver.toString();
  }
});

$.$defineNativeClass("SVGSVGElement", {"": "height=,width=,x=,y="});

$.$defineNativeClass("SVGTextPositioningElement", {"": "x=,y="});

$.$defineNativeClass("SVGUseElement", {"": "height=,width=,x=,y="});

$.$defineNativeClass("SVGComponentTransferFunctionElement", {"": "type="});

$.$defineNativeClass("SVGCursorElement", {"": "x=,y="});

$.$defineNativeClass("SVGFEDropShadowElement", {"": "height=,width=,x=,y="});

$.$defineNativeClass("SVGGlyphRefElement", {"": "x%,y%"});

$.$defineNativeClass("AudioBuffer", {"": "duration=,length="});

$.$defineNativeClass("AudioBufferSourceNode", {"": "loop}",
  start$3: function(receiver, when, grainOffset, grainDuration) {
    var t1, t2;
    t1 = $ === grainOffset;
    if (t1)
      grainOffset = null;
    t1 = !t1;
    t2 = $ === grainDuration;
    if (t2)
      grainDuration = null;
    t2 = !t2;
    if (!!receiver.start)
      if (t2)
        receiver.start(when, grainOffset, grainDuration);
      else if (t1)
        receiver.start(when, grainOffset);
      else
        receiver.start(when);
    else if (t2)
      receiver.noteOn(when, grainOffset, grainDuration);
    else if (t1)
      receiver.noteOn(when, grainOffset);
    else
      receiver.noteOn(when);
  },
  start$1: function($receiver, when) {
    return this.start$3($receiver, when, $, $);
  },
  stop$1: function(receiver, when) {
    if (!!receiver.stop)
      receiver.stop(when);
    else
      receiver.noteOff(when);
  }
});

$.$defineNativeClass("AudioContext", {"": "destination=",
  createBufferSource$0: function(receiver) {
    return receiver.createBufferSource();
  },
  decodeAudioData$3: function(receiver, audioData, successCallback, errorCallback) {
    return receiver.decodeAudioData(audioData,$.convertDartClosureToJS(successCallback, 1),$.convertDartClosureToJS(errorCallback, 1));
  },
  createGain$0: function(receiver) {
    if (receiver.createGain !== undefined)
      return receiver.createGain();
    else
      return receiver.createGainNode();
  }
});

$.$defineNativeClass("AudioParam", {"": "name="});

// 123 dynamic classes.
// 262 classes
// 25 !leaf
(function() {
  var v0_TextPositioningElement = "SVGAltGlyphElement|SVGTRefElement|SVGTSpanElement|SVGTextElement|SVGTextPositioningElement", v1__SVGComponentTransferFunctionElement = "SVGComponentTransferFunctionElement|SVGFEFuncAElement|SVGFEFuncBElement|SVGFEFuncGElement|SVGFEFuncRElement", v2_MediaElement = "HTMLAudioElement|HTMLMediaElement|HTMLVideoElement", v3_SvgElement = [v0_TextPositioningElement, v1__SVGComponentTransferFunctionElement, "SVGAElement|SVGAltGlyphDefElement|SVGAltGlyphItemElement|SVGAnimateColorElement|SVGAnimateElement|SVGAnimateMotionElement|SVGAnimateTransformElement|SVGAnimationElement|SVGCircleElement|SVGClipPathElement|SVGCursorElement|SVGDefsElement|SVGDescElement|SVGElement|SVGEllipseElement|SVGFEBlendElement|SVGFEColorMatrixElement|SVGFEComponentTransferElement|SVGFECompositeElement|SVGFEConvolveMatrixElement|SVGFEDiffuseLightingElement|SVGFEDisplacementMapElement|SVGFEDistantLightElement|SVGFEDropShadowElement|SVGFEFloodElement|SVGFEGaussianBlurElement|SVGFEImageElement|SVGFEMergeElement|SVGFEMergeNodeElement|SVGFEMorphologyElement|SVGFEOffsetElement|SVGFEPointLightElement|SVGFESpecularLightingElement|SVGFESpotLightElement|SVGFETileElement|SVGFETurbulenceElement|SVGFilterElement|SVGFontElement|SVGFontFaceElement|SVGFontFaceFormatElement|SVGFontFaceNameElement|SVGFontFaceSrcElement|SVGFontFaceUriElement|SVGForeignObjectElement|SVGGElement|SVGGlyphElement|SVGGlyphRefElement|SVGGradientElement|SVGHKernElement|SVGImageElement|SVGLineElement|SVGLinearGradientElement|SVGMPathElement|SVGMarkerElement|SVGMaskElement|SVGMetadataElement|SVGMissingGlyphElement|SVGPathElement|SVGPatternElement|SVGPolygonElement|SVGPolylineElement|SVGRadialGradientElement|SVGRectElement|SVGSVGElement|SVGScriptElement|SVGSetElement|SVGStopElement|SVGStyleElement|SVGStyledElement|SVGSwitchElement|SVGSymbolElement|SVGTextContentElement|SVGTextPathElement|SVGTitleElement|SVGUseElement|SVGVKernElement|SVGViewElement"].join("|"), v4_MouseEvent = "MouseEvent|WheelEvent", v5_UIEvent = [v4_MouseEvent, "CompositionEvent|FocusEvent|KeyboardEvent|SVGZoomEvent|TextEvent|TouchEvent|UIEvent"].join("|"), v6_Element = [v2_MediaElement, v3_SvgElement, "Element|HTMLAnchorElement|HTMLAppletElement|HTMLAreaElement|HTMLBRElement|HTMLBaseElement|HTMLBaseFontElement|HTMLBodyElement|HTMLButtonElement|HTMLCanvasElement|HTMLContentElement|HTMLDListElement|HTMLDataListElement|HTMLDetailsElement|HTMLDirectoryElement|HTMLDivElement|HTMLElement|HTMLEmbedElement|HTMLFieldSetElement|HTMLFontElement|HTMLFormElement|HTMLFrameElement|HTMLFrameSetElement|HTMLHRElement|HTMLHeadElement|HTMLHeadingElement|HTMLHtmlElement|HTMLIFrameElement|HTMLImageElement|HTMLInputElement|HTMLKeygenElement|HTMLLIElement|HTMLLabelElement|HTMLLegendElement|HTMLLinkElement|HTMLMapElement|HTMLMarqueeElement|HTMLMenuElement|HTMLMetaElement|HTMLMeterElement|HTMLModElement|HTMLOListElement|HTMLObjectElement|HTMLOptGroupElement|HTMLOptionElement|HTMLOutputElement|HTMLParagraphElement|HTMLParamElement|HTMLPreElement|HTMLProgressElement|HTMLQuoteElement|HTMLScriptElement|HTMLSelectElement|HTMLShadowElement|HTMLSourceElement|HTMLSpanElement|HTMLStyleElement|HTMLTableCaptionElement|HTMLTableCellElement|HTMLTableColElement|HTMLTableElement|HTMLTableRowElement|HTMLTableSectionElement|HTMLTextAreaElement|HTMLTitleElement|HTMLTrackElement|HTMLUListElement|HTMLUnknownElement"].join("|"), v7_CharacterData = "CDATASection|CharacterData|Comment|Text", v8_Document = "Document|HTMLDocument|SVGDocument", v9_Node = [v6_Element, v7_CharacterData, v8_Document, "Attr|DocumentFragment|DocumentType|EntityReference|Node|Notation|ProcessingInstruction|ShadowRoot"].join("|"), v10_AudioContext = "AudioContext|OfflineAudioContext", v11_MediaStream = "LocalMediaStream|MediaStream";
  $.dynamicSetMetadata([["Blob", "Blob|File"], ["CharacterData", v7_CharacterData], ["Document", v8_Document], ["HTMLMediaElement", v2_MediaElement], ["SVGTextPositioningElement", v0_TextPositioningElement], ["SVGComponentTransferFunctionElement", v1__SVGComponentTransferFunctionElement], ["SVGElement", v3_SvgElement], ["Element", v6_Element], ["MouseEvent", v4_MouseEvent], ["UIEvent", v5_UIEvent], ["Event", [v5_UIEvent, "AudioProcessingEvent|BeforeLoadEvent|CloseEvent|CustomEvent|DeviceMotionEvent|DeviceOrientationEvent|ErrorEvent|Event|HashChangeEvent|IDBVersionChangeEvent|MediaKeyEvent|MediaStreamEvent|MediaStreamTrackEvent|MessageEvent|MutationEvent|OfflineAudioCompletionEvent|OverflowEvent|PageTransitionEvent|PopStateEvent|ProgressEvent|RTCDTMFToneChangeEvent|RTCDataChannelEvent|RTCIceCandidateEvent|SpeechInputEvent|SpeechRecognitionError|SpeechRecognitionEvent|StorageEvent|TrackEvent|TransitionEvent|WebGLContextEvent|WebKitAnimationEvent|WebKitTransitionEvent|XMLHttpRequestProgressEvent"].join("|")], ["Node", v9_Node], ["AudioContext", v10_AudioContext], ["MediaStream", v11_MediaStream], ["EventTarget", [v9_Node, v10_AudioContext, v11_MediaStream, "DOMWindow|EventTarget|MediaController|TextTrack|TextTrackList|XMLHttpRequest|XMLHttpRequestUpload"].join("|")], ["HTMLCollection", "HTMLCollection|HTMLFormControlsCollection|HTMLOptionsCollection"], ["NodeList", "NodeList|RadioNodeList"], ["Uint8Array", "Uint8Array|Uint8ClampedArray"]]);
})();

$.main.call$0 = $.main;
// BEGIN invoke [main].
if (typeof document !== "undefined" && document.readyState !== "complete") {
  document.addEventListener("readystatechange", function () {
    if (document.readyState == "complete") {
      if (typeof dartMainRunner === "function") {
        dartMainRunner(function() { $.startRootIsolate($.main); });
      } else {
        $.startRootIsolate($.main);
      }
    }
  }, false);
} else {
  if (typeof dartMainRunner === "function") {
    dartMainRunner(function() { $.startRootIsolate($.main); });
  } else {
    $.startRootIsolate($.main);
  }
}
// END invoke [main].
function init() {
  Isolate.$isolateProperties = {};
  function generateAccessor(field, prototype) {
    var len = field.length;
    var code = field.charCodeAt(len - 1);
    code = code >= 60 && code <= 64 ? code - 59 : code >= 123 && code <= 126 ? code - 117 : code >= 37 && code <= 43 ? code - 27 : 0;
    if (code) {
      var getterCode = code & 3;
      var setterCode = code >> 2;
      var accessorName = field = field.substring(0, len - 1);
      var divider = field.indexOf(":");
      if (divider > 0) {
        accessorName = field.substring(0, divider);
        field = field.substring(divider + 1);
      }
      if (getterCode) {
        var args = getterCode & 2 ? "receiver" : "";
        var receiver = getterCode & 1 ? "this" : "receiver";
        var body = "return " + receiver + "." + field;
        prototype["get$" + accessorName] = new Function(args, body);
      }
      if (setterCode) {
        var args = setterCode & 2 ? "receiver, value" : "value";
        var receiver = setterCode & 1 ? "this" : "receiver";
        var body = receiver + "." + field + " = value";
        prototype["set$" + accessorName] = new Function(args, body);
      }
    }
    return field;
  }
  Isolate.$isolateProperties.$generateAccessor = generateAccessor;
  function defineClass(cls, fields, prototype) {
    var constructor;
    if (typeof fields == "function") {
      constructor = fields;
    } else {
      var str = "function " + cls + "(";
      var body = "";
      for (var i = 0; i < fields.length; i++) {
        if (i != 0)
          str += ", ";
        var field = fields[i];
        field = generateAccessor(field, prototype);
        str += field;
        body += "this." + field + " = " + field + ";\n";
      }
      str += ") {" + body + "}\nreturn " + cls;
      constructor = new Function(str)();
    }
    constructor.prototype = prototype;
    constructor.builtin$cls = cls;
    return constructor;
  }
  var supportsProto = false;
  var tmp = defineClass("c", ["f?"], {}).prototype;
  if (tmp.__proto__) {
    tmp.__proto__ = {};
    if (typeof tmp.get$f != "undefined")
      supportsProto = true;
  }
  Isolate.$finishClasses = function(collectedClasses, isolateProperties, existingIsolateProperties) {
    var pendingClasses = {};
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    for (var cls in collectedClasses) {
      if (hasOwnProperty.call(collectedClasses, cls)) {
        var desc = collectedClasses[cls];
        var fields = desc[""], supr;
        if (typeof fields == "string") {
          var s = fields.split(";");
          supr = s[0];
          fields = s[1] == "" ? [] : s[1].split(",");
        } else {
          supr = desc.super;
        }
        isolateProperties[cls] = defineClass(cls, fields, desc);
        if (supr)
          pendingClasses[cls] = supr;
      }
    }
    var finishedClasses = {};
    function finishClass(cls) {
      var hasOwnProperty = Object.prototype.hasOwnProperty;
      if (hasOwnProperty.call(finishedClasses, cls))
        return;
      finishedClasses[cls] = true;
      var superclass = pendingClasses[cls];
      if ((!superclass || typeof superclass) != "string")
        return;
      finishClass(superclass);
      var constructor = isolateProperties[cls];
      var superConstructor = isolateProperties[superclass];
      if (!superConstructor)
        superConstructor = existingIsolateProperties[superclass];
      var prototype = constructor.prototype;
      if (supportsProto) {
        prototype.__proto__ = superConstructor.prototype;
        prototype.constructor = constructor;
      } else {
        function tmp() {
        }
        tmp.prototype = superConstructor.prototype;
        var newPrototype = new tmp();
        constructor.prototype = newPrototype;
        newPrototype.constructor = constructor;
        for (var member in prototype) {
          if (!member)
            continue;
          if (hasOwnProperty.call(prototype, member)) {
            newPrototype[member] = prototype[member];
          }
        }
      }
    }
    for (var cls in pendingClasses)
      finishClass(cls);
  };
  Isolate.$lazy = function(prototype, staticName, fieldName, getterName, lazyValue) {
    var getter = new Function("{ return $." + fieldName + ";}");
    var sentinelUndefined = {};
    var sentinelInProgress = {};
    prototype[fieldName] = sentinelUndefined;
    prototype[getterName] = function() {
      var result = $[fieldName];
      try {
        if (result === sentinelUndefined) {
          $[fieldName] = sentinelInProgress;
          try {
            result = $[fieldName] = lazyValue();
          } finally {
            if (result === sentinelUndefined) {
              if ($[fieldName] === sentinelInProgress) {
                $[fieldName] = null;
              }
            }
          }
        } else {
          if (result === sentinelInProgress)
            $.throwCyclicInit(staticName);
        }
        return result;
      } finally {
        $[getterName] = getter;
      }
    };
  };
  Isolate.$finishIsolateConstructor = function(oldIsolate) {
    var isolateProperties = oldIsolate.$isolateProperties;
    isolateProperties.$currentScript = typeof document == "object" ? document.currentScript || document.scripts[document.scripts.length - 1] : null;
    var isolatePrototype = oldIsolate.prototype;
    var str = "{\n";
    str += "var properties = Isolate.$isolateProperties;\n";
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    for (var staticName in isolateProperties) {
      if (hasOwnProperty.call(isolateProperties, staticName)) {
        str += "this." + staticName + "= properties." + staticName + ";\n";
      }
    }
    str += "}\n";
    var newIsolate = new Function(str);
    newIsolate.prototype = isolatePrototype;
    isolatePrototype.constructor = newIsolate;
    newIsolate.$isolateProperties = isolateProperties;
    newIsolate.$finishClasses = oldIsolate.$finishClasses;
    return newIsolate;
  };
}
//@ sourceMappingURL=contra.dart.js.map
